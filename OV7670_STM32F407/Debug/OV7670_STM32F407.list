
OV7670_STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005850  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b60  080059e0  080059e0  000159e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006540  08006540  00016540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006548  08006548  00016548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800654c  0800654c  0001654c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000000  08006550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
  8 .bss          00000734  200001e4  200001e4  000201e4  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000918  20000918  000201e4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001492c  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002ded  00000000  00000000  00034b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000077d4  00000000  00000000  0003792d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c00  00000000  00000000  0003f108  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d80  00000000  00000000  0003fd08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000061fd  00000000  00000000  00040a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000040f5  00000000  00000000  00046c85  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004ad7a  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002d34  00000000  00000000  0004adf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059c8 	.word	0x080059c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	080059c8 	.word	0x080059c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_uldivmod>:
 8000c40:	b953      	cbnz	r3, 8000c58 <__aeabi_uldivmod+0x18>
 8000c42:	b94a      	cbnz	r2, 8000c58 <__aeabi_uldivmod+0x18>
 8000c44:	2900      	cmp	r1, #0
 8000c46:	bf08      	it	eq
 8000c48:	2800      	cmpeq	r0, #0
 8000c4a:	bf1c      	itt	ne
 8000c4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c50:	f04f 30ff 	movne.w	r0, #4294967295
 8000c54:	f000 b97a 	b.w	8000f4c <__aeabi_idiv0>
 8000c58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c60:	f000 f806 	bl	8000c70 <__udivmoddi4>
 8000c64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6c:	b004      	add	sp, #16
 8000c6e:	4770      	bx	lr

08000c70 <__udivmoddi4>:
 8000c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c74:	468c      	mov	ip, r1
 8000c76:	460d      	mov	r5, r1
 8000c78:	4604      	mov	r4, r0
 8000c7a:	9e08      	ldr	r6, [sp, #32]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d151      	bne.n	8000d24 <__udivmoddi4+0xb4>
 8000c80:	428a      	cmp	r2, r1
 8000c82:	4617      	mov	r7, r2
 8000c84:	d96d      	bls.n	8000d62 <__udivmoddi4+0xf2>
 8000c86:	fab2 fe82 	clz	lr, r2
 8000c8a:	f1be 0f00 	cmp.w	lr, #0
 8000c8e:	d00b      	beq.n	8000ca8 <__udivmoddi4+0x38>
 8000c90:	f1ce 0c20 	rsb	ip, lr, #32
 8000c94:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c98:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c9c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ca0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ca4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ca8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cac:	0c25      	lsrs	r5, r4, #16
 8000cae:	fbbc f8fa 	udiv	r8, ip, sl
 8000cb2:	fa1f f987 	uxth.w	r9, r7
 8000cb6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cba:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cbe:	fb08 f309 	mul.w	r3, r8, r9
 8000cc2:	42ab      	cmp	r3, r5
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x6c>
 8000cc6:	19ed      	adds	r5, r5, r7
 8000cc8:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ccc:	f080 8123 	bcs.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	f240 8120 	bls.w	8000f16 <__udivmoddi4+0x2a6>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	443d      	add	r5, r7
 8000cdc:	1aed      	subs	r5, r5, r3
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ce4:	fb0a 5510 	mls	r5, sl, r0, r5
 8000ce8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cec:	fb00 f909 	mul.w	r9, r0, r9
 8000cf0:	45a1      	cmp	r9, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x98>
 8000cf4:	19e4      	adds	r4, r4, r7
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	f080 810a 	bcs.w	8000f12 <__udivmoddi4+0x2a2>
 8000cfe:	45a1      	cmp	r9, r4
 8000d00:	f240 8107 	bls.w	8000f12 <__udivmoddi4+0x2a2>
 8000d04:	3802      	subs	r0, #2
 8000d06:	443c      	add	r4, r7
 8000d08:	eba4 0409 	sub.w	r4, r4, r9
 8000d0c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d10:	2100      	movs	r1, #0
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d061      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d16:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	6034      	str	r4, [r6, #0]
 8000d1e:	6073      	str	r3, [r6, #4]
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0xc8>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d054      	beq.n	8000dd6 <__udivmoddi4+0x166>
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d32:	4608      	mov	r0, r1
 8000d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d38:	fab3 f183 	clz	r1, r3
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	f040 808e 	bne.w	8000e5e <__udivmoddi4+0x1ee>
 8000d42:	42ab      	cmp	r3, r5
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xdc>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80fa 	bhi.w	8000f40 <__udivmoddi4+0x2d0>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	46ac      	mov	ip, r5
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d03f      	beq.n	8000dda <__udivmoddi4+0x16a>
 8000d5a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	b912      	cbnz	r2, 8000d6a <__udivmoddi4+0xfa>
 8000d64:	2701      	movs	r7, #1
 8000d66:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d6a:	fab7 fe87 	clz	lr, r7
 8000d6e:	f1be 0f00 	cmp.w	lr, #0
 8000d72:	d134      	bne.n	8000dde <__udivmoddi4+0x16e>
 8000d74:	1beb      	subs	r3, r5, r7
 8000d76:	0c3a      	lsrs	r2, r7, #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d82:	0c25      	lsrs	r5, r4, #16
 8000d84:	fb02 3318 	mls	r3, r2, r8, r3
 8000d88:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d8c:	fb0c f308 	mul.w	r3, ip, r8
 8000d90:	42ab      	cmp	r3, r5
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x134>
 8000d94:	19ed      	adds	r5, r5, r7
 8000d96:	f108 30ff 	add.w	r0, r8, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x132>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	f200 80d1 	bhi.w	8000f44 <__udivmoddi4+0x2d4>
 8000da2:	4680      	mov	r8, r0
 8000da4:	1aed      	subs	r5, r5, r3
 8000da6:	b2a3      	uxth	r3, r4
 8000da8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dac:	fb02 5510 	mls	r5, r2, r0, r5
 8000db0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000db4:	fb0c fc00 	mul.w	ip, ip, r0
 8000db8:	45a4      	cmp	ip, r4
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x15c>
 8000dbc:	19e4      	adds	r4, r4, r7
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x15a>
 8000dc4:	45a4      	cmp	ip, r4
 8000dc6:	f200 80b8 	bhi.w	8000f3a <__udivmoddi4+0x2ca>
 8000dca:	4618      	mov	r0, r3
 8000dcc:	eba4 040c 	sub.w	r4, r4, ip
 8000dd0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd4:	e79d      	b.n	8000d12 <__udivmoddi4+0xa2>
 8000dd6:	4631      	mov	r1, r6
 8000dd8:	4630      	mov	r0, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	f1ce 0420 	rsb	r4, lr, #32
 8000de2:	fa05 f30e 	lsl.w	r3, r5, lr
 8000de6:	fa07 f70e 	lsl.w	r7, r7, lr
 8000dea:	fa20 f804 	lsr.w	r8, r0, r4
 8000dee:	0c3a      	lsrs	r2, r7, #16
 8000df0:	fa25 f404 	lsr.w	r4, r5, r4
 8000df4:	ea48 0803 	orr.w	r8, r8, r3
 8000df8:	fbb4 f1f2 	udiv	r1, r4, r2
 8000dfc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e00:	fb02 4411 	mls	r4, r2, r1, r4
 8000e04:	fa1f fc87 	uxth.w	ip, r7
 8000e08:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e0c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e10:	42ab      	cmp	r3, r5
 8000e12:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e16:	d909      	bls.n	8000e2c <__udivmoddi4+0x1bc>
 8000e18:	19ed      	adds	r5, r5, r7
 8000e1a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e1e:	f080 808a 	bcs.w	8000f36 <__udivmoddi4+0x2c6>
 8000e22:	42ab      	cmp	r3, r5
 8000e24:	f240 8087 	bls.w	8000f36 <__udivmoddi4+0x2c6>
 8000e28:	3902      	subs	r1, #2
 8000e2a:	443d      	add	r5, r7
 8000e2c:	1aeb      	subs	r3, r5, r3
 8000e2e:	fa1f f588 	uxth.w	r5, r8
 8000e32:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e36:	fb02 3310 	mls	r3, r2, r0, r3
 8000e3a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e3e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e42:	42ab      	cmp	r3, r5
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x1e6>
 8000e46:	19ed      	adds	r5, r5, r7
 8000e48:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4c:	d26f      	bcs.n	8000f2e <__udivmoddi4+0x2be>
 8000e4e:	42ab      	cmp	r3, r5
 8000e50:	d96d      	bls.n	8000f2e <__udivmoddi4+0x2be>
 8000e52:	3802      	subs	r0, #2
 8000e54:	443d      	add	r5, r7
 8000e56:	1aeb      	subs	r3, r5, r3
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	e78f      	b.n	8000d7e <__udivmoddi4+0x10e>
 8000e5e:	f1c1 0720 	rsb	r7, r1, #32
 8000e62:	fa22 f807 	lsr.w	r8, r2, r7
 8000e66:	408b      	lsls	r3, r1
 8000e68:	fa05 f401 	lsl.w	r4, r5, r1
 8000e6c:	ea48 0303 	orr.w	r3, r8, r3
 8000e70:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e74:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e7e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e82:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000e86:	fb0c 5519 	mls	r5, ip, r9, r5
 8000e8a:	fa1f f883 	uxth.w	r8, r3
 8000e8e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e92:	fb09 f408 	mul.w	r4, r9, r8
 8000e96:	42ac      	cmp	r4, r5
 8000e98:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ea0:	d908      	bls.n	8000eb4 <__udivmoddi4+0x244>
 8000ea2:	18ed      	adds	r5, r5, r3
 8000ea4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ea8:	d243      	bcs.n	8000f32 <__udivmoddi4+0x2c2>
 8000eaa:	42ac      	cmp	r4, r5
 8000eac:	d941      	bls.n	8000f32 <__udivmoddi4+0x2c2>
 8000eae:	f1a9 0902 	sub.w	r9, r9, #2
 8000eb2:	441d      	add	r5, r3
 8000eb4:	1b2d      	subs	r5, r5, r4
 8000eb6:	fa1f fe8e 	uxth.w	lr, lr
 8000eba:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ebe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ec2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ec6:	fb00 f808 	mul.w	r8, r0, r8
 8000eca:	45a0      	cmp	r8, r4
 8000ecc:	d907      	bls.n	8000ede <__udivmoddi4+0x26e>
 8000ece:	18e4      	adds	r4, r4, r3
 8000ed0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ed4:	d229      	bcs.n	8000f2a <__udivmoddi4+0x2ba>
 8000ed6:	45a0      	cmp	r8, r4
 8000ed8:	d927      	bls.n	8000f2a <__udivmoddi4+0x2ba>
 8000eda:	3802      	subs	r0, #2
 8000edc:	441c      	add	r4, r3
 8000ede:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ee2:	eba4 0408 	sub.w	r4, r4, r8
 8000ee6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eea:	454c      	cmp	r4, r9
 8000eec:	46c6      	mov	lr, r8
 8000eee:	464d      	mov	r5, r9
 8000ef0:	d315      	bcc.n	8000f1e <__udivmoddi4+0x2ae>
 8000ef2:	d012      	beq.n	8000f1a <__udivmoddi4+0x2aa>
 8000ef4:	b156      	cbz	r6, 8000f0c <__udivmoddi4+0x29c>
 8000ef6:	ebba 030e 	subs.w	r3, sl, lr
 8000efa:	eb64 0405 	sbc.w	r4, r4, r5
 8000efe:	fa04 f707 	lsl.w	r7, r4, r7
 8000f02:	40cb      	lsrs	r3, r1
 8000f04:	431f      	orrs	r7, r3
 8000f06:	40cc      	lsrs	r4, r1
 8000f08:	6037      	str	r7, [r6, #0]
 8000f0a:	6074      	str	r4, [r6, #4]
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	4618      	mov	r0, r3
 8000f14:	e6f8      	b.n	8000d08 <__udivmoddi4+0x98>
 8000f16:	4690      	mov	r8, r2
 8000f18:	e6e0      	b.n	8000cdc <__udivmoddi4+0x6c>
 8000f1a:	45c2      	cmp	sl, r8
 8000f1c:	d2ea      	bcs.n	8000ef4 <__udivmoddi4+0x284>
 8000f1e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f22:	eb69 0503 	sbc.w	r5, r9, r3
 8000f26:	3801      	subs	r0, #1
 8000f28:	e7e4      	b.n	8000ef4 <__udivmoddi4+0x284>
 8000f2a:	4628      	mov	r0, r5
 8000f2c:	e7d7      	b.n	8000ede <__udivmoddi4+0x26e>
 8000f2e:	4640      	mov	r0, r8
 8000f30:	e791      	b.n	8000e56 <__udivmoddi4+0x1e6>
 8000f32:	4681      	mov	r9, r0
 8000f34:	e7be      	b.n	8000eb4 <__udivmoddi4+0x244>
 8000f36:	4601      	mov	r1, r0
 8000f38:	e778      	b.n	8000e2c <__udivmoddi4+0x1bc>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	443c      	add	r4, r7
 8000f3e:	e745      	b.n	8000dcc <__udivmoddi4+0x15c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e708      	b.n	8000d56 <__udivmoddi4+0xe6>
 8000f44:	f1a8 0802 	sub.w	r8, r8, #2
 8000f48:	443d      	add	r5, r7
 8000f4a:	e72b      	b.n	8000da4 <__udivmoddi4+0x134>

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <Delay>:
#include "delay.h"

/* simple delay */
void Delay(unsigned long i)
{
  while (i--)
 8000f50:	f110 30ff 	adds.w	r0, r0, #4294967295
 8000f54:	d200      	bcs.n	8000f58 <Delay+0x8>
  {
    asm("NOP");
  }
}
 8000f56:	4770      	bx	lr
    asm("NOP");
 8000f58:	bf00      	nop
 8000f5a:	e7f9      	b.n	8000f50 <Delay>

08000f5c <OLED_WR_Byte>:
  for (n = 0; n < 16; n++)
    OLED_WR_Byte(code[n + 16], OLED_DATA);
}

void OLED_WR_Byte(uint8_t dat, uint8_t cmd)
{
 8000f5c:	b570      	push	{r4, r5, r6, lr}
  uint8_t i;
  if (cmd)
 8000f5e:	460a      	mov	r2, r1
{
 8000f60:	4605      	mov	r5, r0
  if (cmd)
 8000f62:	b101      	cbz	r1, 8000f66 <OLED_WR_Byte+0xa>
    OLED_DC_Set();
 8000f64:	2201      	movs	r2, #1
  else
    OLED_DC_Clr();
 8000f66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6a:	481a      	ldr	r0, [pc, #104]	; (8000fd4 <OLED_WR_Byte+0x78>)

  OLED_CS_Clr();

  for (i = 0; i < 8; i++)
  {
    OLED_SCLK_Clr();
 8000f6c:	4e19      	ldr	r6, [pc, #100]	; (8000fd4 <OLED_WR_Byte+0x78>)
    OLED_DC_Clr();
 8000f6e:	f000 ff75 	bl	8001e5c <HAL_GPIO_WritePin>
  OLED_CS_Clr();
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f78:	4816      	ldr	r0, [pc, #88]	; (8000fd4 <OLED_WR_Byte+0x78>)
 8000f7a:	f000 ff6f 	bl	8001e5c <HAL_GPIO_WritePin>
 8000f7e:	2408      	movs	r4, #8
    OLED_SCLK_Clr();
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f86:	4630      	mov	r0, r6
 8000f88:	f000 ff68 	bl	8001e5c <HAL_GPIO_WritePin>
    if (dat & 0x80)
 8000f8c:	062b      	lsls	r3, r5, #24
      OLED_SDIN_Set();
 8000f8e:	bf4c      	ite	mi
 8000f90:	2201      	movmi	r2, #1
    else
      OLED_SDIN_Clr();
 8000f92:	2200      	movpl	r2, #0
 8000f94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f98:	4630      	mov	r0, r6
 8000f9a:	f000 ff5f 	bl	8001e5c <HAL_GPIO_WritePin>
 8000f9e:	3c01      	subs	r4, #1

    OLED_SCLK_Set();
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa6:	4630      	mov	r0, r6
 8000fa8:	f000 ff58 	bl	8001e5c <HAL_GPIO_WritePin>
    dat <<= 1;
 8000fac:	006d      	lsls	r5, r5, #1
  for (i = 0; i < 8; i++)
 8000fae:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    dat <<= 1;
 8000fb2:	b2ed      	uxtb	r5, r5
  for (i = 0; i < 8; i++)
 8000fb4:	d1e4      	bne.n	8000f80 <OLED_WR_Byte+0x24>
  }
  OLED_CS_Set();
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fbc:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <OLED_WR_Byte+0x78>)
 8000fbe:	f000 ff4d 	bl	8001e5c <HAL_GPIO_WritePin>
  OLED_DC_Set();
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <OLED_WR_Byte+0x78>)
}
 8000fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OLED_DC_Set();
 8000fce:	f000 bf45 	b.w	8001e5c <HAL_GPIO_WritePin>
 8000fd2:	bf00      	nop
 8000fd4:	40020800 	.word	0x40020800

08000fd8 <OLED_Clear>:
  OLED_WR_Byte(0XAE, OLED_CMD);  //DISPLAY OFF
}

//��������,������,������Ļ�Ǻ�ɫ��!��û����һ��!!!	  
void OLED_Clear(void)
{
 8000fd8:	b538      	push	{r3, r4, r5, lr}
 8000fda:	24b0      	movs	r4, #176	; 0xb0
  uint8_t i, n;
  for (i = 0; i < 8; i++)
  {
    OLED_WR_Byte(0xb0 + i, OLED_CMD);    //����ҳ��ַ��0~7��
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4620      	mov	r0, r4
 8000fe0:	f7ff ffbc 	bl	8000f5c <OLED_WR_Byte>
    OLED_WR_Byte(0x00, OLED_CMD);      //������ʾλ�á��е͵�ַ
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	f7ff ffb8 	bl	8000f5c <OLED_WR_Byte>
    OLED_WR_Byte(0x10, OLED_CMD);      //������ʾλ�á��иߵ�ַ
 8000fec:	2100      	movs	r1, #0
 8000fee:	2010      	movs	r0, #16
 8000ff0:	f7ff ffb4 	bl	8000f5c <OLED_WR_Byte>
 8000ff4:	2584      	movs	r5, #132	; 0x84
    for (n = 0; n < 132; n++)
      OLED_WR_Byte(0, OLED_DATA);
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	3d01      	subs	r5, #1
 8000ffc:	f7ff ffae 	bl	8000f5c <OLED_WR_Byte>
    for (n = 0; n < 132; n++)
 8001000:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8001004:	d1f7      	bne.n	8000ff6 <OLED_Clear+0x1e>
 8001006:	3401      	adds	r4, #1
 8001008:	b2e4      	uxtb	r4, r4
  for (i = 0; i < 8; i++)
 800100a:	2cb8      	cmp	r4, #184	; 0xb8
 800100c:	d1e6      	bne.n	8000fdc <OLED_Clear+0x4>
  }
}
 800100e:	bd38      	pop	{r3, r4, r5, pc}

08001010 <OLED_SetPos>:

void OLED_SetPos(uint8_t x, uint8_t y) //������ʼ������
{
 8001010:	b510      	push	{r4, lr}
 8001012:	4604      	mov	r4, r0
  OLED_WR_Byte(0xb0 + y, OLED_CMD);
 8001014:	f1a1 0050 	sub.w	r0, r1, #80	; 0x50
 8001018:	b2c0      	uxtb	r0, r0
 800101a:	2100      	movs	r1, #0
 800101c:	f7ff ff9e 	bl	8000f5c <OLED_WR_Byte>
  OLED_WR_Byte(((x & 0xf0) >> 4) | 0x10, OLED_CMD);
 8001020:	0920      	lsrs	r0, r4, #4
 8001022:	2100      	movs	r1, #0
 8001024:	f040 0010 	orr.w	r0, r0, #16
 8001028:	f7ff ff98 	bl	8000f5c <OLED_WR_Byte>
  OLED_WR_Byte((x & 0x0f) | 0x01, OLED_CMD);
 800102c:	f004 000e 	and.w	r0, r4, #14
 8001030:	2100      	movs	r1, #0
 8001032:	f040 0001 	orr.w	r0, r0, #1
}
 8001036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OLED_WR_Byte((x & 0x0f) | 0x01, OLED_CMD);
 800103a:	f7ff bf8f 	b.w	8000f5c <OLED_WR_Byte>
	...

08001040 <OLED_DispStr.part.0>:

//��ʾ�ַ���
//x,y:	�������
//*s:	�ַ�����ʼ��ַ
//TextSize:����
void OLED_DispStr(uint8_t x, uint8_t y, uint8_t s[], uint8_t TextSize)
 8001040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001044:	f8df 9074 	ldr.w	r9, [pc, #116]	; 80010bc <OLED_DispStr.part.0+0x7c>
 8001048:	4605      	mov	r5, r0
 800104a:	460e      	mov	r6, r1
 800104c:	4690      	mov	r8, r2
          y++;
        }
        OLED_SetPos(x, y);
        for (i = 0; i < 8; i++)
          OLED_WR_Byte(F8X16[c * 16 + i], OLED_DATA);
        OLED_SetPos(x, y + 1);
 800104e:	2700      	movs	r7, #0
      while (s[j] != '\0')
 8001050:	b2fb      	uxtb	r3, r7
 8001052:	f818 4003 	ldrb.w	r4, [r8, r3]
 8001056:	b90c      	cbnz	r4, 800105c <OLED_DispStr.part.0+0x1c>
        j++;
      }
    }
      break;
  }
}
 8001058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (x > 120)
 800105c:	2d78      	cmp	r5, #120	; 0x78
          y++;
 800105e:	bf82      	ittt	hi
 8001060:	3601      	addhi	r6, #1
 8001062:	b2f6      	uxtbhi	r6, r6
          x = 0;
 8001064:	2500      	movhi	r5, #0
        OLED_SetPos(x, y);
 8001066:	4631      	mov	r1, r6
 8001068:	4628      	mov	r0, r5
        c = s[j] - 32;
 800106a:	3c20      	subs	r4, #32
        OLED_SetPos(x, y);
 800106c:	f7ff ffd0 	bl	8001010 <OLED_SetPos>
        c = s[j] - 32;
 8001070:	b2e4      	uxtb	r4, r4
          OLED_WR_Byte(F8X16[c * 16 + i], OLED_DATA);
 8001072:	f04f 0a00 	mov.w	sl, #0
 8001076:	eb09 1404 	add.w	r4, r9, r4, lsl #4
 800107a:	f814 000a 	ldrb.w	r0, [r4, sl]
 800107e:	2101      	movs	r1, #1
 8001080:	f10a 0a01 	add.w	sl, sl, #1
 8001084:	f7ff ff6a 	bl	8000f5c <OLED_WR_Byte>
        for (i = 0; i < 8; i++)
 8001088:	f1ba 0f08 	cmp.w	sl, #8
 800108c:	d1f5      	bne.n	800107a <OLED_DispStr.part.0+0x3a>
        OLED_SetPos(x, y + 1);
 800108e:	1c71      	adds	r1, r6, #1
 8001090:	b2c9      	uxtb	r1, r1
 8001092:	4628      	mov	r0, r5
 8001094:	f7ff ffbc 	bl	8001010 <OLED_SetPos>
 8001098:	f04f 0a00 	mov.w	sl, #0
          OLED_WR_Byte(F8X16[c * 16 + i + 8], OLED_DATA);
 800109c:	eb04 030a 	add.w	r3, r4, sl
 80010a0:	2101      	movs	r1, #1
 80010a2:	7a18      	ldrb	r0, [r3, #8]
 80010a4:	f10a 0a01 	add.w	sl, sl, #1
 80010a8:	f7ff ff58 	bl	8000f5c <OLED_WR_Byte>
        for (i = 0; i < 8; i++)
 80010ac:	f1ba 0f08 	cmp.w	sl, #8
 80010b0:	d1f4      	bne.n	800109c <OLED_DispStr.part.0+0x5c>
        x += 8;
 80010b2:	3508      	adds	r5, #8
 80010b4:	b2ed      	uxtb	r5, r5
 80010b6:	3701      	adds	r7, #1
 80010b8:	e7ca      	b.n	8001050 <OLED_DispStr.part.0+0x10>
 80010ba:	bf00      	nop
 80010bc:	08005c08 	.word	0x08005c08

080010c0 <OLED_DispStr>:
  switch (TextSize)
 80010c0:	2b01      	cmp	r3, #1
{
 80010c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010c6:	4605      	mov	r5, r0
 80010c8:	460e      	mov	r6, r1
 80010ca:	4617      	mov	r7, r2
  switch (TextSize)
 80010cc:	d003      	beq.n	80010d6 <OLED_DispStr+0x16>
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d00b      	beq.n	80010ea <OLED_DispStr+0x2a>
 80010d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010d6:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8001134 <OLED_DispStr+0x74>
 80010da:	f04f 0900 	mov.w	r9, #0
      while (s[j] != '\0')
 80010de:	fa5f f389 	uxtb.w	r3, r9
 80010e2:	5cfc      	ldrb	r4, [r7, r3]
 80010e4:	b92c      	cbnz	r4, 80010f2 <OLED_DispStr+0x32>
 80010e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
}
 80010ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010ee:	f7ff bfa7 	b.w	8001040 <OLED_DispStr.part.0>
        if (x > 126)
 80010f2:	2d7e      	cmp	r5, #126	; 0x7e
          y++;
 80010f4:	bf82      	ittt	hi
 80010f6:	3601      	addhi	r6, #1
 80010f8:	b2f6      	uxtbhi	r6, r6
          x = 0;
 80010fa:	2500      	movhi	r5, #0
        c = s[j] - 32;
 80010fc:	3c20      	subs	r4, #32
        OLED_SetPos(x, y);
 80010fe:	4631      	mov	r1, r6
 8001100:	4628      	mov	r0, r5
        c = s[j] - 32;
 8001102:	b2e4      	uxtb	r4, r4
        OLED_SetPos(x, y);
 8001104:	f7ff ff84 	bl	8001010 <OLED_SetPos>
 8001108:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800110c:	eb08 0444 	add.w	r4, r8, r4, lsl #1
 8001110:	f04f 0a00 	mov.w	sl, #0
          OLED_WR_Byte(F6x8[c][i], OLED_DATA);
 8001114:	f814 000a 	ldrb.w	r0, [r4, sl]
 8001118:	2101      	movs	r1, #1
 800111a:	f10a 0a01 	add.w	sl, sl, #1
 800111e:	f7ff ff1d 	bl	8000f5c <OLED_WR_Byte>
        for (i = 0; i < 6; i++)
 8001122:	f1ba 0f06 	cmp.w	sl, #6
 8001126:	d1f5      	bne.n	8001114 <OLED_DispStr+0x54>
        x += 6;
 8001128:	3506      	adds	r5, #6
 800112a:	b2ed      	uxtb	r5, r5
 800112c:	f109 0901 	add.w	r9, r9, #1
 8001130:	e7d5      	b.n	80010de <OLED_DispStr+0x1e>
 8001132:	bf00      	nop
 8001134:	080059e0 	.word	0x080059e0

08001138 <OLED_Init>:

//��ʼ��SSD1306					    
void OLED_Init(void)
{
 8001138:	b508      	push	{r3, lr}
  HAL_Delay(100);  // delay > 50 ms
 800113a:	2064      	movs	r0, #100	; 0x64
 800113c:	f000 fd2a 	bl	8001b94 <HAL_Delay>

  OLED_WR_Byte(0xAE, OLED_CMD); //�ر���ʾ
 8001140:	2100      	movs	r1, #0
 8001142:	20ae      	movs	r0, #174	; 0xae
 8001144:	f7ff ff0a 	bl	8000f5c <OLED_WR_Byte>
  OLED_WR_Byte(0xD5, OLED_CMD); //����ʱ�ӷ�Ƶ����,��Ƶ��
 8001148:	2100      	movs	r1, #0
 800114a:	20d5      	movs	r0, #213	; 0xd5
 800114c:	f7ff ff06 	bl	8000f5c <OLED_WR_Byte>
  OLED_WR_Byte(0x50, OLED_CMD); //[3:0],��Ƶ����;[7:4],��Ƶ��
 8001150:	2100      	movs	r1, #0
 8001152:	2050      	movs	r0, #80	; 0x50
 8001154:	f7ff ff02 	bl	8000f5c <OLED_WR_Byte>
  OLED_WR_Byte(0xA8, OLED_CMD); //��������·��
 8001158:	2100      	movs	r1, #0
 800115a:	20a8      	movs	r0, #168	; 0xa8
 800115c:	f7ff fefe 	bl	8000f5c <OLED_WR_Byte>
  OLED_WR_Byte(0X3F, OLED_CMD); //Ĭ��0X3F(1/64)
 8001160:	2100      	movs	r1, #0
 8001162:	203f      	movs	r0, #63	; 0x3f
 8001164:	f7ff fefa 	bl	8000f5c <OLED_WR_Byte>
  OLED_WR_Byte(0xD3, OLED_CMD); //������ʾƫ��
 8001168:	2100      	movs	r1, #0
 800116a:	20d3      	movs	r0, #211	; 0xd3
 800116c:	f7ff fef6 	bl	8000f5c <OLED_WR_Byte>
  OLED_WR_Byte(0X00, OLED_CMD); //Ĭ��Ϊ0
 8001170:	2100      	movs	r1, #0
 8001172:	4608      	mov	r0, r1
 8001174:	f7ff fef2 	bl	8000f5c <OLED_WR_Byte>

  OLED_WR_Byte(0x40, OLED_CMD); //������ʾ��ʼ�� [5:0],����.
 8001178:	2100      	movs	r1, #0
 800117a:	2040      	movs	r0, #64	; 0x40
 800117c:	f7ff feee 	bl	8000f5c <OLED_WR_Byte>

  OLED_WR_Byte(0x8D, OLED_CMD); //��ɱ�����
 8001180:	2100      	movs	r1, #0
 8001182:	208d      	movs	r0, #141	; 0x8d
 8001184:	f7ff feea 	bl	8000f5c <OLED_WR_Byte>
  OLED_WR_Byte(0x14, OLED_CMD); //bit2������/�ر�
 8001188:	2100      	movs	r1, #0
 800118a:	2014      	movs	r0, #20
 800118c:	f7ff fee6 	bl	8000f5c <OLED_WR_Byte>
  OLED_WR_Byte(0x20, OLED_CMD); //�����ڴ��ַģʽ
 8001190:	2100      	movs	r1, #0
 8001192:	2020      	movs	r0, #32
 8001194:	f7ff fee2 	bl	8000f5c <OLED_WR_Byte>
  OLED_WR_Byte(0x02, OLED_CMD); //[1:0],00���е�ַģʽ;01���е�ַģʽ;10,ҳ��ַģʽ;Ĭ��10;
 8001198:	2100      	movs	r1, #0
 800119a:	2002      	movs	r0, #2
 800119c:	f7ff fede 	bl	8000f5c <OLED_WR_Byte>
  OLED_WR_Byte(0xA1, OLED_CMD); //���ض�������,bit0:0,0->0;1,0->127;
 80011a0:	2100      	movs	r1, #0
 80011a2:	20a1      	movs	r0, #161	; 0xa1
 80011a4:	f7ff feda 	bl	8000f5c <OLED_WR_Byte>

  OLED_WR_Byte(0xC8, OLED_CMD); //����COMɨ�跽��;bit3:0,��ͨģʽ;1,�ض���ģʽ COM[N-1]->COM0;N:����·��
 80011a8:	2100      	movs	r1, #0
 80011aa:	20c8      	movs	r0, #200	; 0xc8
 80011ac:	f7ff fed6 	bl	8000f5c <OLED_WR_Byte>
//	OLED_WR_Byte(0xC0, OLED_CMD); //��ֱ����

  OLED_WR_Byte(0xDA, OLED_CMD); //����COMӲ����������
 80011b0:	2100      	movs	r1, #0
 80011b2:	20da      	movs	r0, #218	; 0xda
 80011b4:	f7ff fed2 	bl	8000f5c <OLED_WR_Byte>
  OLED_WR_Byte(0x12, OLED_CMD); //[5:4]����
 80011b8:	2100      	movs	r1, #0
 80011ba:	2012      	movs	r0, #18
 80011bc:	f7ff fece 	bl	8000f5c <OLED_WR_Byte>

  OLED_WR_Byte(0x81, OLED_CMD); //�Աȶ�����
 80011c0:	2100      	movs	r1, #0
 80011c2:	2081      	movs	r0, #129	; 0x81
 80011c4:	f7ff feca 	bl	8000f5c <OLED_WR_Byte>
  OLED_WR_Byte(0xEF, OLED_CMD); //1~255;Ĭ��0X7F (��������,Խ��Խ��)
 80011c8:	2100      	movs	r1, #0
 80011ca:	20ef      	movs	r0, #239	; 0xef
 80011cc:	f7ff fec6 	bl	8000f5c <OLED_WR_Byte>
  OLED_WR_Byte(0xD9, OLED_CMD); //����Ԥ�������
 80011d0:	2100      	movs	r1, #0
 80011d2:	20d9      	movs	r0, #217	; 0xd9
 80011d4:	f7ff fec2 	bl	8000f5c <OLED_WR_Byte>
  OLED_WR_Byte(0xf1, OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80011d8:	2100      	movs	r1, #0
 80011da:	20f1      	movs	r0, #241	; 0xf1
 80011dc:	f7ff febe 	bl	8000f5c <OLED_WR_Byte>
  OLED_WR_Byte(0xDB, OLED_CMD); //����VCOMH ��ѹ����
 80011e0:	2100      	movs	r1, #0
 80011e2:	20db      	movs	r0, #219	; 0xdb
 80011e4:	f7ff feba 	bl	8000f5c <OLED_WR_Byte>
  OLED_WR_Byte(0x30, OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80011e8:	2100      	movs	r1, #0
 80011ea:	2030      	movs	r0, #48	; 0x30
 80011ec:	f7ff feb6 	bl	8000f5c <OLED_WR_Byte>

  OLED_WR_Byte(0xA4, OLED_CMD); //ȫ����ʾ����;bit0:1,����;0,�ر�;(����/����)
 80011f0:	2100      	movs	r1, #0
 80011f2:	20a4      	movs	r0, #164	; 0xa4
 80011f4:	f7ff feb2 	bl	8000f5c <OLED_WR_Byte>
  OLED_WR_Byte(0xA6, OLED_CMD); //������ʾ��ʽ;bit0:1,������ʾ;0,������ʾ
 80011f8:	2100      	movs	r1, #0
 80011fa:	20a6      	movs	r0, #166	; 0xa6
 80011fc:	f7ff feae 	bl	8000f5c <OLED_WR_Byte>
  OLED_WR_Byte(0xAF, OLED_CMD); //������ʾ
 8001200:	2100      	movs	r1, #0
 8001202:	20af      	movs	r0, #175	; 0xaf
 8001204:	f7ff feaa 	bl	8000f5c <OLED_WR_Byte>

  OLED_Clear();
}
 8001208:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OLED_Clear();
 800120c:	f7ff bee4 	b.w	8000fd8 <OLED_Clear>

08001210 <SCCB_SID_GPIO_INPUT>:
}

/** Configure SCCB_SDA_Pin to IMPUT mode
 */
void SCCB_SID_GPIO_INPUT(void)
{
 8001210:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct =
 8001212:	2214      	movs	r2, #20
 8001214:	2100      	movs	r1, #0
 8001216:	a801      	add	r0, sp, #4
 8001218:	f002 fb6e 	bl	80038f8 <memset>

  /* GPIO Ports Clock Enable */
//  __HAL_RCC_GPIOB_CLK_ENABLE();
  /*Configure GPIO pins: GPIOB_Pin[6] = SCCB_SDA_Pin
   * */
  GPIO_InitStruct.Pin = SCCB_SDA_Pin;
 800121c:	2340      	movs	r3, #64	; 0x40
 800121e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;  // ���� �����ⲿ�������� �����ڲ�������
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001220:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pull = GPIO_PULLUP;  // ���� �����ⲿ�������� �����ڲ�������
 8001222:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001224:	4803      	ldr	r0, [pc, #12]	; (8001234 <SCCB_SID_GPIO_INPUT+0x24>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;  // ���� �����ⲿ�������� �����ڲ�������
 8001226:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001228:	f000 fd32 	bl	8001c90 <HAL_GPIO_Init>
}
 800122c:	b007      	add	sp, #28
 800122e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001232:	bf00      	nop
 8001234:	40020400 	.word	0x40020400

08001238 <SCCB_SID_GPIO_OUTPUT>:

/** Configure SCCB_SDA_Pin to OUTPUT mode
 */
void SCCB_SID_GPIO_OUTPUT(void)
{
 8001238:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct =
 800123a:	2214      	movs	r2, #20
 800123c:	2100      	movs	r1, #0
 800123e:	a801      	add	r0, sp, #4
 8001240:	f002 fb5a 	bl	80038f8 <memset>

  /* GPIO Ports Clock Enable */
//  __HAL_RCC_GPIOB_CLK_ENABLE();
  /*Configure GPIO pins: GPIOB_Pin[6] = SCCB_SDA_Pin
   * */
  GPIO_InitStruct.Pin = SCCB_SDA_Pin;
 8001244:	2340      	movs	r3, #64	; 0x40
 8001246:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001248:	2301      	movs	r3, #1
 800124a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800124e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001250:	4803      	ldr	r0, [pc, #12]	; (8001260 <SCCB_SID_GPIO_OUTPUT+0x28>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001252:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001254:	f000 fd1c 	bl	8001c90 <HAL_GPIO_Init>
}
 8001258:	b007      	add	sp, #28
 800125a:	f85d fb04 	ldr.w	pc, [sp], #4
 800125e:	bf00      	nop
 8001260:	40020400 	.word	0x40020400

08001264 <startSCCB>:
 ����: ��
 ����ֵ: ��
 -----------------------------------------------
 */
void startSCCB(void)
{
 8001264:	b510      	push	{r4, lr}
  SCCB_SID_H();     //�����߸ߵ�ƽ
 8001266:	4c11      	ldr	r4, [pc, #68]	; (80012ac <startSCCB+0x48>)
 8001268:	2201      	movs	r2, #1
 800126a:	2140      	movs	r1, #64	; 0x40
 800126c:	4620      	mov	r0, r4
 800126e:	f000 fdf5 	bl	8001e5c <HAL_GPIO_WritePin>
  Delay(50);
 8001272:	2032      	movs	r0, #50	; 0x32
 8001274:	f7ff fe6c 	bl	8000f50 <Delay>

  SCCB_SIC_H();	   //��ʱ���߸ߵ�ʱ���������ɸ�����
 8001278:	2201      	movs	r2, #1
 800127a:	2120      	movs	r1, #32
 800127c:	4620      	mov	r0, r4
 800127e:	f000 fded 	bl	8001e5c <HAL_GPIO_WritePin>
  Delay(50);
 8001282:	2032      	movs	r0, #50	; 0x32
 8001284:	f7ff fe64 	bl	8000f50 <Delay>

  SCCB_SID_L();
 8001288:	2200      	movs	r2, #0
 800128a:	2140      	movs	r1, #64	; 0x40
 800128c:	4620      	mov	r0, r4
 800128e:	f000 fde5 	bl	8001e5c <HAL_GPIO_WritePin>
  Delay(50);
 8001292:	2032      	movs	r0, #50	; 0x32
 8001294:	f7ff fe5c 	bl	8000f50 <Delay>

  SCCB_SIC_L();	 //�����߻ָ��͵�ƽ��������������Ҫ
 8001298:	4620      	mov	r0, r4
 800129a:	2200      	movs	r2, #0
 800129c:	2120      	movs	r1, #32
 800129e:	f000 fddd 	bl	8001e5c <HAL_GPIO_WritePin>
  Delay(50);
 80012a2:	2032      	movs	r0, #50	; 0x32
}
 80012a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Delay(50);
 80012a8:	f7ff be52 	b.w	8000f50 <Delay>
 80012ac:	40020400 	.word	0x40020400

080012b0 <stopSCCB>:
 ����: ��
 ����ֵ: ��
 -----------------------------------------------
 */
void stopSCCB(void)
{
 80012b0:	b510      	push	{r4, lr}
  SCCB_SID_L();
 80012b2:	4c0d      	ldr	r4, [pc, #52]	; (80012e8 <stopSCCB+0x38>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	2140      	movs	r1, #64	; 0x40
 80012b8:	4620      	mov	r0, r4
 80012ba:	f000 fdcf 	bl	8001e5c <HAL_GPIO_WritePin>
  Delay(50);
 80012be:	2032      	movs	r0, #50	; 0x32
 80012c0:	f7ff fe46 	bl	8000f50 <Delay>

  SCCB_SIC_H();
 80012c4:	2201      	movs	r2, #1
 80012c6:	2120      	movs	r1, #32
 80012c8:	4620      	mov	r0, r4
 80012ca:	f000 fdc7 	bl	8001e5c <HAL_GPIO_WritePin>
  Delay(50);
 80012ce:	2032      	movs	r0, #50	; 0x32
 80012d0:	f7ff fe3e 	bl	8000f50 <Delay>

  SCCB_SID_H();
 80012d4:	4620      	mov	r0, r4
 80012d6:	2201      	movs	r2, #1
 80012d8:	2140      	movs	r1, #64	; 0x40
 80012da:	f000 fdbf 	bl	8001e5c <HAL_GPIO_WritePin>
  Delay(50);
 80012de:	2032      	movs	r0, #50	; 0x32
}
 80012e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Delay(50);
 80012e4:	f7ff be34 	b.w	8000f50 <Delay>
 80012e8:	40020400 	.word	0x40020400

080012ec <noAck>:
 ����: ��
 ����ֵ: ��
 -----------------------------------------------
 */
void noAck(void)
{
 80012ec:	b510      	push	{r4, lr}
  SCCB_SID_H();
 80012ee:	4c11      	ldr	r4, [pc, #68]	; (8001334 <noAck+0x48>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	2140      	movs	r1, #64	; 0x40
 80012f4:	4620      	mov	r0, r4
 80012f6:	f000 fdb1 	bl	8001e5c <HAL_GPIO_WritePin>
  Delay(50);
 80012fa:	2032      	movs	r0, #50	; 0x32
 80012fc:	f7ff fe28 	bl	8000f50 <Delay>

  SCCB_SIC_H();
 8001300:	2201      	movs	r2, #1
 8001302:	2120      	movs	r1, #32
 8001304:	4620      	mov	r0, r4
 8001306:	f000 fda9 	bl	8001e5c <HAL_GPIO_WritePin>
  Delay(50);
 800130a:	2032      	movs	r0, #50	; 0x32
 800130c:	f7ff fe20 	bl	8000f50 <Delay>

  SCCB_SIC_L();
 8001310:	2200      	movs	r2, #0
 8001312:	2120      	movs	r1, #32
 8001314:	4620      	mov	r0, r4
 8001316:	f000 fda1 	bl	8001e5c <HAL_GPIO_WritePin>
  Delay(50);
 800131a:	2032      	movs	r0, #50	; 0x32
 800131c:	f7ff fe18 	bl	8000f50 <Delay>

  SCCB_SID_L();
 8001320:	4620      	mov	r0, r4
 8001322:	2200      	movs	r2, #0
 8001324:	2140      	movs	r1, #64	; 0x40
 8001326:	f000 fd99 	bl	8001e5c <HAL_GPIO_WritePin>
  Delay(50);
 800132a:	2032      	movs	r0, #50	; 0x32
}
 800132c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Delay(50);
 8001330:	f7ff be0e 	b.w	8000f50 <Delay>
 8001334:	40020400 	.word	0x40020400

08001338 <SCCBwriteByte>:
 ����: д������
 ����ֵ: ���ͳɹ�����1������ʧ�ܷ���0
 -----------------------------------------------
 */
unsigned char SCCBwriteByte(unsigned char m_data)
{
 8001338:	b570      	push	{r4, r5, r6, lr}
    {
      SCCB_SID_H();
    }
    else
    {
      SCCB_SID_L();
 800133a:	4d21      	ldr	r5, [pc, #132]	; (80013c0 <SCCBwriteByte+0x88>)
{
 800133c:	4606      	mov	r6, r0
 800133e:	2400      	movs	r4, #0
    if ((m_data << j) & 0x80)
 8001340:	fa06 f204 	lsl.w	r2, r6, r4
 8001344:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      SCCB_SID_H();
 8001348:	bf18      	it	ne
 800134a:	2201      	movne	r2, #1
      SCCB_SID_L();
 800134c:	2140      	movs	r1, #64	; 0x40
 800134e:	4628      	mov	r0, r5
 8001350:	f000 fd84 	bl	8001e5c <HAL_GPIO_WritePin>
    }
    Delay(50);
 8001354:	2032      	movs	r0, #50	; 0x32
 8001356:	f7ff fdfb 	bl	8000f50 <Delay>
    SCCB_SIC_H();
 800135a:	2201      	movs	r2, #1
 800135c:	2120      	movs	r1, #32
 800135e:	4818      	ldr	r0, [pc, #96]	; (80013c0 <SCCBwriteByte+0x88>)
 8001360:	f000 fd7c 	bl	8001e5c <HAL_GPIO_WritePin>
    Delay(50);
 8001364:	2032      	movs	r0, #50	; 0x32
 8001366:	f7ff fdf3 	bl	8000f50 <Delay>
    SCCB_SIC_L();
 800136a:	2200      	movs	r2, #0
 800136c:	2120      	movs	r1, #32
 800136e:	4814      	ldr	r0, [pc, #80]	; (80013c0 <SCCBwriteByte+0x88>)
 8001370:	f000 fd74 	bl	8001e5c <HAL_GPIO_WritePin>
 8001374:	3401      	adds	r4, #1
    Delay(2);
 8001376:	2002      	movs	r0, #2
 8001378:	f7ff fdea 	bl	8000f50 <Delay>
  for (j = 0; j < 8; j++) //ѭ��8�η�������
 800137c:	2c08      	cmp	r4, #8
 800137e:	d1df      	bne.n	8001340 <SCCBwriteByte+0x8>
  }
  //Delay(50);
  SCCB_SID_IN
 8001380:	f7ff ff46 	bl	8001210 <SCCB_SID_GPIO_INPUT>
  ;/*����SDAΪ����*/
  Delay(10);
 8001384:	200a      	movs	r0, #10
 8001386:	f7ff fde3 	bl	8000f50 <Delay>
  SCCB_SIC_H();
 800138a:	2201      	movs	r2, #1
 800138c:	2120      	movs	r1, #32
 800138e:	480c      	ldr	r0, [pc, #48]	; (80013c0 <SCCBwriteByte+0x88>)
 8001390:	f000 fd64 	bl	8001e5c <HAL_GPIO_WritePin>
  Delay(80);
 8001394:	2050      	movs	r0, #80	; 0x50
 8001396:	f7ff fddb 	bl	8000f50 <Delay>
  if (SCCB_SID_STATE)
 800139a:	2140      	movs	r1, #64	; 0x40
 800139c:	4808      	ldr	r0, [pc, #32]	; (80013c0 <SCCBwriteByte+0x88>)
 800139e:	f000 fd57 	bl	8001e50 <HAL_GPIO_ReadPin>
  }   //SDA=1����ʧ�ܣ�����0}
  else
  {
    tem = 1;
  }   //SDA=0���ͳɹ�������1
  SCCB_SIC_L();
 80013a2:	2200      	movs	r2, #0
 80013a4:	2120      	movs	r1, #32
  if (SCCB_SID_STATE)
 80013a6:	4604      	mov	r4, r0
  SCCB_SIC_L();
 80013a8:	4805      	ldr	r0, [pc, #20]	; (80013c0 <SCCBwriteByte+0x88>)
 80013aa:	f000 fd57 	bl	8001e5c <HAL_GPIO_WritePin>
  Delay(50);
 80013ae:	2032      	movs	r0, #50	; 0x32
 80013b0:	f7ff fdce 	bl	8000f50 <Delay>
  SCCB_SID_OUT
 80013b4:	f7ff ff40 	bl	8001238 <SCCB_SID_GPIO_OUTPUT>
  ;/*����SDAΪ���*/

  return (tem);
}
 80013b8:	fab4 f084 	clz	r0, r4
 80013bc:	0940      	lsrs	r0, r0, #5
 80013be:	bd70      	pop	{r4, r5, r6, pc}
 80013c0:	40020400 	.word	0x40020400

080013c4 <SCCBreadByte>:
 ����: ��
 ����ֵ: ��ȡ��������
 -----------------------------------------------
 */
unsigned char SCCBreadByte(void)
{
 80013c4:	b570      	push	{r4, r5, r6, lr}
  unsigned char read, j;
  read = 0x00;

  SCCB_SID_IN
 80013c6:	f7ff ff23 	bl	8001210 <SCCB_SID_GPIO_INPUT>
  ;/*����SDAΪ����*/
  Delay(50);
 80013ca:	2032      	movs	r0, #50	; 0x32
 80013cc:	f7ff fdc0 	bl	8000f50 <Delay>
  for (j = 8; j > 0; j--) //ѭ��8�ν�������
  {
    //Delay(100);
    SCCB_SIC_H();
 80013d0:	4e11      	ldr	r6, [pc, #68]	; (8001418 <SCCBreadByte+0x54>)
  Delay(50);
 80013d2:	2508      	movs	r5, #8
  read = 0x00;
 80013d4:	2400      	movs	r4, #0
    SCCB_SIC_H();
 80013d6:	2120      	movs	r1, #32
 80013d8:	2201      	movs	r2, #1
 80013da:	4630      	mov	r0, r6
 80013dc:	f000 fd3e 	bl	8001e5c <HAL_GPIO_WritePin>
    Delay(50);
 80013e0:	2032      	movs	r0, #50	; 0x32
 80013e2:	f7ff fdb5 	bl	8000f50 <Delay>
    read = read << 1;
 80013e6:	0064      	lsls	r4, r4, #1
    if (SCCB_SID_STATE)
 80013e8:	2140      	movs	r1, #64	; 0x40
 80013ea:	4630      	mov	r0, r6
    read = read << 1;
 80013ec:	b2e4      	uxtb	r4, r4
    if (SCCB_SID_STATE)
 80013ee:	f000 fd2f 	bl	8001e50 <HAL_GPIO_ReadPin>
 80013f2:	b108      	cbz	r0, 80013f8 <SCCBreadByte+0x34>
    {
      read = read + 1;
 80013f4:	3401      	adds	r4, #1
 80013f6:	b2e4      	uxtb	r4, r4
    }
    SCCB_SIC_L();
 80013f8:	2200      	movs	r2, #0
 80013fa:	2120      	movs	r1, #32
 80013fc:	4630      	mov	r0, r6
 80013fe:	f000 fd2d 	bl	8001e5c <HAL_GPIO_WritePin>
 8001402:	3d01      	subs	r5, #1
    Delay(50);
 8001404:	2032      	movs	r0, #50	; 0x32
 8001406:	f7ff fda3 	bl	8000f50 <Delay>
  for (j = 8; j > 0; j--) //ѭ��8�ν�������
 800140a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 800140e:	d1e2      	bne.n	80013d6 <SCCBreadByte+0x12>
  }
  SCCB_SID_OUT
 8001410:	f7ff ff12 	bl	8001238 <SCCB_SID_GPIO_OUTPUT>
  ;/*����SDAΪ���*/
  return (read);
}
 8001414:	4620      	mov	r0, r4
 8001416:	bd70      	pop	{r4, r5, r6, pc}
 8001418:	40020400 	.word	0x40020400

0800141c <Ov7670_WriteReg>:
/*Function: write OV7670 register through SCCB interface
 * if success: return 1
 * if error: return 0
 * */
unsigned char Ov7670_WriteReg(unsigned char regID, unsigned char regDat)
{
 800141c:	b538      	push	{r3, r4, r5, lr}
 800141e:	4605      	mov	r5, r0
 8001420:	460c      	mov	r4, r1
  startSCCB();  // send SCCB start sequence, ready to write command
 8001422:	f7ff ff1f 	bl	8001264 <startSCCB>
  if (0 == SCCBwriteByte(0x42)) // write ov7670 device ID(last bit controls W=0/R=1)
 8001426:	2042      	movs	r0, #66	; 0x42
 8001428:	f7ff ff86 	bl	8001338 <SCCBwriteByte>
 800142c:	b918      	cbnz	r0, 8001436 <Ov7670_WriteReg+0x1a>
  {
    stopSCCB();  // send SCCB stop sequence
 800142e:	f7ff ff3f 	bl	80012b0 <stopSCCB>
    return (0);  // if error: return 0
 8001432:	2000      	movs	r0, #0
 8001434:	bd38      	pop	{r3, r4, r5, pc}
  }
  Delay(20);
 8001436:	2014      	movs	r0, #20
 8001438:	f7ff fd8a 	bl	8000f50 <Delay>
  if (0 == SCCBwriteByte(regID))  // write register ID
 800143c:	4628      	mov	r0, r5
 800143e:	f7ff ff7b 	bl	8001338 <SCCBwriteByte>
 8001442:	2800      	cmp	r0, #0
 8001444:	d0f3      	beq.n	800142e <Ov7670_WriteReg+0x12>
  {
    stopSCCB();  // send SCCB stop sequence
    return (0);  // if error: return 0
  }
  Delay(20);
 8001446:	2014      	movs	r0, #20
 8001448:	f7ff fd82 	bl	8000f50 <Delay>
  if (0 == SCCBwriteByte(regDat))  // write data into register
 800144c:	4620      	mov	r0, r4
 800144e:	f7ff ff73 	bl	8001338 <SCCBwriteByte>
 8001452:	2800      	cmp	r0, #0
 8001454:	d0eb      	beq.n	800142e <Ov7670_WriteReg+0x12>
  {
    stopSCCB();  // send SCCB stop sequence
    return (0);  // if error: return 0
  }
  stopSCCB();  // send SCCB stop sequence
 8001456:	f7ff ff2b 	bl	80012b0 <stopSCCB>

  return (1);  // if success: return 1
 800145a:	2001      	movs	r0, #1
}
 800145c:	bd38      	pop	{r3, r4, r5, pc}
	...

08001460 <Ov7670_ReadReg>:
/*Function: read OV7670 register through SCCB interface
 * if success: return 1
 * if error: return 0
 * */
unsigned char Ov7670_ReadReg(unsigned char regID, unsigned char *regDat)
{
 8001460:	b570      	push	{r4, r5, r6, lr}
 8001462:	4606      	mov	r6, r0
 8001464:	460d      	mov	r5, r1
  /* send register ID */
  startSCCB();  // send SCCB start sequence, ready to write command
 8001466:	f7ff fefd 	bl	8001264 <startSCCB>
  if (0 == SCCBwriteByte(0x42)) // write ov7670 device ID(last bit controls W=0/R=1)
 800146a:	2042      	movs	r0, #66	; 0x42
 800146c:	f7ff ff64 	bl	8001338 <SCCBwriteByte>
 8001470:	4604      	mov	r4, r0
 8001472:	b948      	cbnz	r0, 8001488 <Ov7670_ReadReg+0x28>
  {
    stopSCCB();  // send SCCB stop sequence
 8001474:	f7ff ff1c 	bl	80012b0 <stopSCCB>
    HAL_UART_Transmit(&huart2, (uint8_t *) "yyy", strlen("yyy"), 10);
 8001478:	4919      	ldr	r1, [pc, #100]	; (80014e0 <Ov7670_ReadReg+0x80>)
 800147a:	230a      	movs	r3, #10
 800147c:	2203      	movs	r2, #3
  /* read value from register */
  startSCCB();
  if (0 == SCCBwriteByte(0x43)) // write ov7670 device ID(last bit controls W=0/R=1)
  {
    stopSCCB();  // send SCCB stop sequence
    HAL_UART_Transmit(&huart2, (uint8_t *) "qqq", strlen("qqq"), 10);
 800147e:	4819      	ldr	r0, [pc, #100]	; (80014e4 <Ov7670_ReadReg+0x84>)
 8001480:	f001 fb8a 	bl	8002b98 <HAL_UART_Transmit>
  Delay(20);
  *regDat = SCCBreadByte();  // return read value
  noAck();  // send SCCB NACK sequence
  stopSCCB();  // send SCCB stop sequence
  return (1);  // if success: return 1
}
 8001484:	4620      	mov	r0, r4
 8001486:	bd70      	pop	{r4, r5, r6, pc}
  Delay(20);
 8001488:	2014      	movs	r0, #20
 800148a:	f7ff fd61 	bl	8000f50 <Delay>
  if (0 == SCCBwriteByte(regID))  // write ov7670 register ID
 800148e:	4630      	mov	r0, r6
 8001490:	f7ff ff52 	bl	8001338 <SCCBwriteByte>
 8001494:	4604      	mov	r4, r0
 8001496:	b928      	cbnz	r0, 80014a4 <Ov7670_ReadReg+0x44>
    stopSCCB();  // send SCCB stop sequence
 8001498:	f7ff ff0a 	bl	80012b0 <stopSCCB>
    HAL_UART_Transmit(&huart2, (uint8_t *) "zzz", strlen("zzz"), 10);
 800149c:	230a      	movs	r3, #10
 800149e:	2203      	movs	r2, #3
 80014a0:	4911      	ldr	r1, [pc, #68]	; (80014e8 <Ov7670_ReadReg+0x88>)
 80014a2:	e7ec      	b.n	800147e <Ov7670_ReadReg+0x1e>
  stopSCCB();  // send SCCB stop sequence
 80014a4:	f7ff ff04 	bl	80012b0 <stopSCCB>
  Delay(20);
 80014a8:	2014      	movs	r0, #20
 80014aa:	f7ff fd51 	bl	8000f50 <Delay>
  startSCCB();
 80014ae:	f7ff fed9 	bl	8001264 <startSCCB>
  if (0 == SCCBwriteByte(0x43)) // write ov7670 device ID(last bit controls W=0/R=1)
 80014b2:	2043      	movs	r0, #67	; 0x43
 80014b4:	f7ff ff40 	bl	8001338 <SCCBwriteByte>
 80014b8:	4604      	mov	r4, r0
 80014ba:	b928      	cbnz	r0, 80014c8 <Ov7670_ReadReg+0x68>
    stopSCCB();  // send SCCB stop sequence
 80014bc:	f7ff fef8 	bl	80012b0 <stopSCCB>
    HAL_UART_Transmit(&huart2, (uint8_t *) "qqq", strlen("qqq"), 10);
 80014c0:	230a      	movs	r3, #10
 80014c2:	2203      	movs	r2, #3
 80014c4:	4909      	ldr	r1, [pc, #36]	; (80014ec <Ov7670_ReadReg+0x8c>)
 80014c6:	e7da      	b.n	800147e <Ov7670_ReadReg+0x1e>
  Delay(20);
 80014c8:	2014      	movs	r0, #20
 80014ca:	f7ff fd41 	bl	8000f50 <Delay>
  *regDat = SCCBreadByte();  // return read value
 80014ce:	f7ff ff79 	bl	80013c4 <SCCBreadByte>
 80014d2:	7028      	strb	r0, [r5, #0]
  noAck();  // send SCCB NACK sequence
 80014d4:	f7ff ff0a 	bl	80012ec <noAck>
  return (1);  // if success: return 1
 80014d8:	2401      	movs	r4, #1
  stopSCCB();  // send SCCB stop sequence
 80014da:	f7ff fee9 	bl	80012b0 <stopSCCB>
 80014de:	e7d1      	b.n	8001484 <Ov7670_ReadReg+0x24>
 80014e0:	080061f8 	.word	0x080061f8
 80014e4:	200008d4 	.word	0x200008d4
 80014e8:	080061fc 	.word	0x080061fc
 80014ec:	08006200 	.word	0x08006200

080014f0 <Reset>:

// set registers
void Reset(void)
{
 80014f0:	b508      	push	{r3, lr}
  Ov7670_WriteReg(REG_COM7, COM7_RESET); // RESET CAMERA
 80014f2:	2180      	movs	r1, #128	; 0x80
 80014f4:	2012      	movs	r0, #18
 80014f6:	f7ff ff91 	bl	800141c <Ov7670_WriteReg>
  HAL_Delay(200);
 80014fa:	20c8      	movs	r0, #200	; 0xc8
}
 80014fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(200);
 8001500:	f000 bb48 	b.w	8001b94 <HAL_Delay>

08001504 <InitForFIFOWriteReset>:

void InitForFIFOWriteReset(void)
{
  Ov7670_WriteReg(REG_COM10, COM10_VS_NEG);
 8001504:	2102      	movs	r1, #2
 8001506:	2015      	movs	r0, #21
 8001508:	f7ff bf88 	b.w	800141c <Ov7670_WriteReg>

0800150c <InitDefaultReg>:
  // color bar
  Ov7670_WriteReg(REG_COM17, reg_com7 | COM17_CBAR);
}

void InitDefaultReg(void)
{
 800150c:	b508      	push	{r3, lr}
  // Gamma curve values
  Ov7670_WriteReg(0x7a, 0x20);
 800150e:	2120      	movs	r1, #32
 8001510:	207a      	movs	r0, #122	; 0x7a
 8001512:	f7ff ff83 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x7b, 0x10);
 8001516:	2110      	movs	r1, #16
 8001518:	207b      	movs	r0, #123	; 0x7b
 800151a:	f7ff ff7f 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x7c, 0x1e);
 800151e:	211e      	movs	r1, #30
 8001520:	207c      	movs	r0, #124	; 0x7c
 8001522:	f7ff ff7b 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x7d, 0x35);
 8001526:	2135      	movs	r1, #53	; 0x35
 8001528:	207d      	movs	r0, #125	; 0x7d
 800152a:	f7ff ff77 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x7e, 0x5a);
 800152e:	215a      	movs	r1, #90	; 0x5a
 8001530:	207e      	movs	r0, #126	; 0x7e
 8001532:	f7ff ff73 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x7f, 0x69);
 8001536:	2169      	movs	r1, #105	; 0x69
 8001538:	207f      	movs	r0, #127	; 0x7f
 800153a:	f7ff ff6f 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x80, 0x76);
 800153e:	2176      	movs	r1, #118	; 0x76
 8001540:	2080      	movs	r0, #128	; 0x80
 8001542:	f7ff ff6b 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x81, 0x80);
 8001546:	2180      	movs	r1, #128	; 0x80
 8001548:	2081      	movs	r0, #129	; 0x81
 800154a:	f7ff ff67 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x82, 0x88);
 800154e:	2188      	movs	r1, #136	; 0x88
 8001550:	2082      	movs	r0, #130	; 0x82
 8001552:	f7ff ff63 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x83, 0x8f);
 8001556:	218f      	movs	r1, #143	; 0x8f
 8001558:	2083      	movs	r0, #131	; 0x83
 800155a:	f7ff ff5f 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x84, 0x96);
 800155e:	2196      	movs	r1, #150	; 0x96
 8001560:	2084      	movs	r0, #132	; 0x84
 8001562:	f7ff ff5b 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x85, 0xa3);
 8001566:	21a3      	movs	r1, #163	; 0xa3
 8001568:	2085      	movs	r0, #133	; 0x85
 800156a:	f7ff ff57 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x86, 0xaf);
 800156e:	21af      	movs	r1, #175	; 0xaf
 8001570:	2086      	movs	r0, #134	; 0x86
 8001572:	f7ff ff53 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x87, 0xc4);
 8001576:	21c4      	movs	r1, #196	; 0xc4
 8001578:	2087      	movs	r0, #135	; 0x87
 800157a:	f7ff ff4f 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x88, 0xd7);
 800157e:	21d7      	movs	r1, #215	; 0xd7
 8001580:	2088      	movs	r0, #136	; 0x88
 8001582:	f7ff ff4b 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x89, 0xe8);
 8001586:	21e8      	movs	r1, #232	; 0xe8
 8001588:	2089      	movs	r0, #137	; 0x89
 800158a:	f7ff ff47 	bl	800141c <Ov7670_WriteReg>

  // AGC and AEC parameters.  Note we start by disabling those features,
  //then turn them only after tweaking the values.
  Ov7670_WriteReg(REG_COM8, COM8_FASTAEC | COM8_AECSTEP | COM8_BFILT);
 800158e:	21e0      	movs	r1, #224	; 0xe0
 8001590:	2013      	movs	r0, #19
 8001592:	f7ff ff43 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_GAIN, 0);
 8001596:	2100      	movs	r1, #0
 8001598:	4608      	mov	r0, r1
 800159a:	f7ff ff3f 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_AECH, 0);
 800159e:	2100      	movs	r1, #0
 80015a0:	2010      	movs	r0, #16
 80015a2:	f7ff ff3b 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_COM4, 0x40);
 80015a6:	2140      	movs	r1, #64	; 0x40
 80015a8:	200d      	movs	r0, #13
 80015aa:	f7ff ff37 	bl	800141c <Ov7670_WriteReg>
  // magic reserved bit
  Ov7670_WriteReg(REG_COM9, 0x18);
 80015ae:	2118      	movs	r1, #24
 80015b0:	2014      	movs	r0, #20
 80015b2:	f7ff ff33 	bl	800141c <Ov7670_WriteReg>
  // 4x gain + magic rsvd bit
  Ov7670_WriteReg(REG_BD50MAX, 0x05);
 80015b6:	2105      	movs	r1, #5
 80015b8:	20a5      	movs	r0, #165	; 0xa5
 80015ba:	f7ff ff2f 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_BD60MAX, 0x07);
 80015be:	2107      	movs	r1, #7
 80015c0:	20ab      	movs	r0, #171	; 0xab
 80015c2:	f7ff ff2b 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_AEW, 0x95);
 80015c6:	2195      	movs	r1, #149	; 0x95
 80015c8:	2024      	movs	r0, #36	; 0x24
 80015ca:	f7ff ff27 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_AEB, 0x33);
 80015ce:	2133      	movs	r1, #51	; 0x33
 80015d0:	2025      	movs	r0, #37	; 0x25
 80015d2:	f7ff ff23 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_VPT, 0xe3);
 80015d6:	21e3      	movs	r1, #227	; 0xe3
 80015d8:	2026      	movs	r0, #38	; 0x26
 80015da:	f7ff ff1f 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_HAECC1, 0x78);
 80015de:	2178      	movs	r1, #120	; 0x78
 80015e0:	209f      	movs	r0, #159	; 0x9f
 80015e2:	f7ff ff1b 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_HAECC2, 0x68);
 80015e6:	2168      	movs	r1, #104	; 0x68
 80015e8:	20a0      	movs	r0, #160	; 0xa0
 80015ea:	f7ff ff17 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0xa1, 0x03);
 80015ee:	2103      	movs	r1, #3
 80015f0:	20a1      	movs	r0, #161	; 0xa1
 80015f2:	f7ff ff13 	bl	800141c <Ov7670_WriteReg>
  // magic
  Ov7670_WriteReg(REG_HAECC3, 0xd8);
 80015f6:	21d8      	movs	r1, #216	; 0xd8
 80015f8:	20a6      	movs	r0, #166	; 0xa6
 80015fa:	f7ff ff0f 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_HAECC4, 0xd8);
 80015fe:	21d8      	movs	r1, #216	; 0xd8
 8001600:	20a7      	movs	r0, #167	; 0xa7
 8001602:	f7ff ff0b 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_HAECC5, 0xf0);
 8001606:	21f0      	movs	r1, #240	; 0xf0
 8001608:	20a8      	movs	r0, #168	; 0xa8
 800160a:	f7ff ff07 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_HAECC6, 0x90);
 800160e:	2190      	movs	r1, #144	; 0x90
 8001610:	20a9      	movs	r0, #169	; 0xa9
 8001612:	f7ff ff03 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_HAECC7, 0x94);
 8001616:	2194      	movs	r1, #148	; 0x94
 8001618:	20aa      	movs	r0, #170	; 0xaa
 800161a:	f7ff feff 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_COM8,
 800161e:	21e5      	movs	r1, #229	; 0xe5
 8001620:	2013      	movs	r0, #19
 8001622:	f7ff fefb 	bl	800141c <Ov7670_WriteReg>
  COM8_FASTAEC | COM8_AECSTEP | COM8_BFILT | COM8_AGC | COM8_AEC);

  // Almost all of these are magic "reserved" values.
  Ov7670_WriteReg(REG_COM5, 0x61);
 8001626:	2161      	movs	r1, #97	; 0x61
 8001628:	200e      	movs	r0, #14
 800162a:	f7ff fef7 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_COM6, 0x4b);
 800162e:	214b      	movs	r1, #75	; 0x4b
 8001630:	200f      	movs	r0, #15
 8001632:	f7ff fef3 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x16, 0x02);
 8001636:	2102      	movs	r1, #2
 8001638:	2016      	movs	r0, #22
 800163a:	f7ff feef 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_MVFP, 0x07);
 800163e:	2107      	movs	r1, #7
 8001640:	201e      	movs	r0, #30
 8001642:	f7ff feeb 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x21, 0x02);
 8001646:	2102      	movs	r1, #2
 8001648:	2021      	movs	r0, #33	; 0x21
 800164a:	f7ff fee7 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x22, 0x91);
 800164e:	2191      	movs	r1, #145	; 0x91
 8001650:	2022      	movs	r0, #34	; 0x22
 8001652:	f7ff fee3 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x29, 0x07);
 8001656:	2107      	movs	r1, #7
 8001658:	2029      	movs	r0, #41	; 0x29
 800165a:	f7ff fedf 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x33, 0x0b);
 800165e:	210b      	movs	r1, #11
 8001660:	2033      	movs	r0, #51	; 0x33
 8001662:	f7ff fedb 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x35, 0x0b);
 8001666:	210b      	movs	r1, #11
 8001668:	2035      	movs	r0, #53	; 0x35
 800166a:	f7ff fed7 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x37, 0x1d);
 800166e:	211d      	movs	r1, #29
 8001670:	2037      	movs	r0, #55	; 0x37
 8001672:	f7ff fed3 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x38, 0x71);
 8001676:	2171      	movs	r1, #113	; 0x71
 8001678:	2038      	movs	r0, #56	; 0x38
 800167a:	f7ff fecf 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x39, 0x2a);
 800167e:	212a      	movs	r1, #42	; 0x2a
 8001680:	2039      	movs	r0, #57	; 0x39
 8001682:	f7ff fecb 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_COM12, 0x78);
 8001686:	2178      	movs	r1, #120	; 0x78
 8001688:	203c      	movs	r0, #60	; 0x3c
 800168a:	f7ff fec7 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x4d, 0x40);
 800168e:	2140      	movs	r1, #64	; 0x40
 8001690:	204d      	movs	r0, #77	; 0x4d
 8001692:	f7ff fec3 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x4e, 0x20);
 8001696:	2120      	movs	r1, #32
 8001698:	204e      	movs	r0, #78	; 0x4e
 800169a:	f7ff febf 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_GFIX, 0);
 800169e:	2100      	movs	r1, #0
 80016a0:	2069      	movs	r0, #105	; 0x69
 80016a2:	f7ff febb 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x6b, 0x0a);
 80016a6:	210a      	movs	r1, #10
 80016a8:	206b      	movs	r0, #107	; 0x6b
 80016aa:	f7ff feb7 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x74, 0x10);
 80016ae:	2110      	movs	r1, #16
 80016b0:	2074      	movs	r0, #116	; 0x74
 80016b2:	f7ff feb3 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x8d, 0x4f);
 80016b6:	214f      	movs	r1, #79	; 0x4f
 80016b8:	208d      	movs	r0, #141	; 0x8d
 80016ba:	f7ff feaf 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x8e, 0);
 80016be:	2100      	movs	r1, #0
 80016c0:	208e      	movs	r0, #142	; 0x8e
 80016c2:	f7ff feab 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x8f, 0);
 80016c6:	2100      	movs	r1, #0
 80016c8:	208f      	movs	r0, #143	; 0x8f
 80016ca:	f7ff fea7 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x90, 0);
 80016ce:	2100      	movs	r1, #0
 80016d0:	2090      	movs	r0, #144	; 0x90
 80016d2:	f7ff fea3 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x91, 0);
 80016d6:	2100      	movs	r1, #0
 80016d8:	2091      	movs	r0, #145	; 0x91
 80016da:	f7ff fe9f 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x96, 0);
 80016de:	2100      	movs	r1, #0
 80016e0:	2096      	movs	r0, #150	; 0x96
 80016e2:	f7ff fe9b 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x9a, 0);
 80016e6:	2100      	movs	r1, #0
 80016e8:	209a      	movs	r0, #154	; 0x9a
 80016ea:	f7ff fe97 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0xb0, 0x84);
 80016ee:	2184      	movs	r1, #132	; 0x84
 80016f0:	20b0      	movs	r0, #176	; 0xb0
 80016f2:	f7ff fe93 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0xb1, 0x0c);
 80016f6:	210c      	movs	r1, #12
 80016f8:	20b1      	movs	r0, #177	; 0xb1
 80016fa:	f7ff fe8f 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0xb2, 0x0e);
 80016fe:	210e      	movs	r1, #14
 8001700:	20b2      	movs	r0, #178	; 0xb2
 8001702:	f7ff fe8b 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0xb3, 0x82);
 8001706:	2182      	movs	r1, #130	; 0x82
 8001708:	20b3      	movs	r0, #179	; 0xb3
 800170a:	f7ff fe87 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0xb8, 0x0a);
 800170e:	210a      	movs	r1, #10
 8001710:	20b8      	movs	r0, #184	; 0xb8
 8001712:	f7ff fe83 	bl	800141c <Ov7670_WriteReg>

  // More reserved magic, some of which tweaks white balance
  Ov7670_WriteReg(0x43, 0x0a);
 8001716:	210a      	movs	r1, #10
 8001718:	2043      	movs	r0, #67	; 0x43
 800171a:	f7ff fe7f 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x44, 0xf0);
 800171e:	21f0      	movs	r1, #240	; 0xf0
 8001720:	2044      	movs	r0, #68	; 0x44
 8001722:	f7ff fe7b 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x45, 0x34);
 8001726:	2134      	movs	r1, #52	; 0x34
 8001728:	2045      	movs	r0, #69	; 0x45
 800172a:	f7ff fe77 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x46, 0x58);
 800172e:	2158      	movs	r1, #88	; 0x58
 8001730:	2046      	movs	r0, #70	; 0x46
 8001732:	f7ff fe73 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x47, 0x28);
 8001736:	2128      	movs	r1, #40	; 0x28
 8001738:	2047      	movs	r0, #71	; 0x47
 800173a:	f7ff fe6f 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x48, 0x3a);
 800173e:	213a      	movs	r1, #58	; 0x3a
 8001740:	2048      	movs	r0, #72	; 0x48
 8001742:	f7ff fe6b 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x59, 0x88);
 8001746:	2188      	movs	r1, #136	; 0x88
 8001748:	2059      	movs	r0, #89	; 0x59
 800174a:	f7ff fe67 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x5a, 0x88);
 800174e:	2188      	movs	r1, #136	; 0x88
 8001750:	205a      	movs	r0, #90	; 0x5a
 8001752:	f7ff fe63 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x5b, 0x44);
 8001756:	2144      	movs	r1, #68	; 0x44
 8001758:	205b      	movs	r0, #91	; 0x5b
 800175a:	f7ff fe5f 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x5c, 0x67);
 800175e:	2167      	movs	r1, #103	; 0x67
 8001760:	205c      	movs	r0, #92	; 0x5c
 8001762:	f7ff fe5b 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x5d, 0x49);
 8001766:	2149      	movs	r1, #73	; 0x49
 8001768:	205d      	movs	r0, #93	; 0x5d
 800176a:	f7ff fe57 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x5e, 0x0e);
 800176e:	210e      	movs	r1, #14
 8001770:	205e      	movs	r0, #94	; 0x5e
 8001772:	f7ff fe53 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x6c, 0x0a);
 8001776:	210a      	movs	r1, #10
 8001778:	206c      	movs	r0, #108	; 0x6c
 800177a:	f7ff fe4f 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x6d, 0x55);
 800177e:	2155      	movs	r1, #85	; 0x55
 8001780:	206d      	movs	r0, #109	; 0x6d
 8001782:	f7ff fe4b 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x6e, 0x11);
 8001786:	2111      	movs	r1, #17
 8001788:	206e      	movs	r0, #110	; 0x6e
 800178a:	f7ff fe47 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x6f, 0x9f);
 800178e:	219f      	movs	r1, #159	; 0x9f
 8001790:	206f      	movs	r0, #111	; 0x6f
 8001792:	f7ff fe43 	bl	800141c <Ov7670_WriteReg>
  // "9e for advance AWB"
  Ov7670_WriteReg(0x6a, 0x40);
 8001796:	2140      	movs	r1, #64	; 0x40
 8001798:	206a      	movs	r0, #106	; 0x6a
 800179a:	f7ff fe3f 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_BLUE, 0x40);
 800179e:	2140      	movs	r1, #64	; 0x40
 80017a0:	2001      	movs	r0, #1
 80017a2:	f7ff fe3b 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_RED, 0x60);
 80017a6:	2160      	movs	r1, #96	; 0x60
 80017a8:	2002      	movs	r0, #2
 80017aa:	f7ff fe37 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_COM8,
 80017ae:	21e7      	movs	r1, #231	; 0xe7
 80017b0:	2013      	movs	r0, #19
 80017b2:	f7ff fe33 	bl	800141c <Ov7670_WriteReg>
  COM8_FASTAEC | COM8_AECSTEP | COM8_BFILT | COM8_AGC | COM8_AEC | COM8_AWB);

  // Matrix coefficients
  Ov7670_WriteReg(0x4f, 0x80);
 80017b6:	2180      	movs	r1, #128	; 0x80
 80017b8:	204f      	movs	r0, #79	; 0x4f
 80017ba:	f7ff fe2f 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x50, 0x80);
 80017be:	2180      	movs	r1, #128	; 0x80
 80017c0:	2050      	movs	r0, #80	; 0x50
 80017c2:	f7ff fe2b 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x51, 0);
 80017c6:	2100      	movs	r1, #0
 80017c8:	2051      	movs	r0, #81	; 0x51
 80017ca:	f7ff fe27 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x52, 0x22);
 80017ce:	2122      	movs	r1, #34	; 0x22
 80017d0:	2052      	movs	r0, #82	; 0x52
 80017d2:	f7ff fe23 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x53, 0x5e);
 80017d6:	215e      	movs	r1, #94	; 0x5e
 80017d8:	2053      	movs	r0, #83	; 0x53
 80017da:	f7ff fe1f 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x54, 0x80);
 80017de:	2180      	movs	r1, #128	; 0x80
 80017e0:	2054      	movs	r0, #84	; 0x54
 80017e2:	f7ff fe1b 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x58, 0x9e);
 80017e6:	219e      	movs	r1, #158	; 0x9e
 80017e8:	2058      	movs	r0, #88	; 0x58
 80017ea:	f7ff fe17 	bl	800141c <Ov7670_WriteReg>

  Ov7670_WriteReg(REG_COM16, COM16_AWBGAIN);
 80017ee:	2108      	movs	r1, #8
 80017f0:	2041      	movs	r0, #65	; 0x41
 80017f2:	f7ff fe13 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_EDGE, 0);
 80017f6:	2100      	movs	r1, #0
 80017f8:	203f      	movs	r0, #63	; 0x3f
 80017fa:	f7ff fe0f 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x75, 0x05);
 80017fe:	2105      	movs	r1, #5
 8001800:	2075      	movs	r0, #117	; 0x75
 8001802:	f7ff fe0b 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x76, 0xe1);
 8001806:	21e1      	movs	r1, #225	; 0xe1
 8001808:	2076      	movs	r0, #118	; 0x76
 800180a:	f7ff fe07 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x4c, 0);
 800180e:	2100      	movs	r1, #0
 8001810:	204c      	movs	r0, #76	; 0x4c
 8001812:	f7ff fe03 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x77, 0x01);
 8001816:	2101      	movs	r1, #1
 8001818:	2077      	movs	r0, #119	; 0x77
 800181a:	f7ff fdff 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x4b, 0x09);
 800181e:	2109      	movs	r1, #9
 8001820:	204b      	movs	r0, #75	; 0x4b
 8001822:	f7ff fdfb 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0xc9, 0x60);
 8001826:	2160      	movs	r1, #96	; 0x60
 8001828:	20c9      	movs	r0, #201	; 0xc9
 800182a:	f7ff fdf7 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_COM16, 0x38);
 800182e:	2138      	movs	r1, #56	; 0x38
 8001830:	2041      	movs	r0, #65	; 0x41
 8001832:	f7ff fdf3 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x56, 0x40);
 8001836:	2140      	movs	r1, #64	; 0x40
 8001838:	2056      	movs	r0, #86	; 0x56
 800183a:	f7ff fdef 	bl	800141c <Ov7670_WriteReg>

  Ov7670_WriteReg(0x34, 0x11);
 800183e:	2111      	movs	r1, #17
 8001840:	2034      	movs	r0, #52	; 0x34
 8001842:	f7ff fdeb 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_COM11, COM11_EXP | COM11_HZAUTO_ON);
 8001846:	2112      	movs	r1, #18
 8001848:	203b      	movs	r0, #59	; 0x3b
 800184a:	f7ff fde7 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0xa4, 0x88);
 800184e:	2188      	movs	r1, #136	; 0x88
 8001850:	20a4      	movs	r0, #164	; 0xa4
 8001852:	f7ff fde3 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x96, 0);
 8001856:	2100      	movs	r1, #0
 8001858:	2096      	movs	r0, #150	; 0x96
 800185a:	f7ff fddf 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x97, 0x30);
 800185e:	2130      	movs	r1, #48	; 0x30
 8001860:	2097      	movs	r0, #151	; 0x97
 8001862:	f7ff fddb 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x98, 0x20);
 8001866:	2120      	movs	r1, #32
 8001868:	2098      	movs	r0, #152	; 0x98
 800186a:	f7ff fdd7 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x99, 0x30);
 800186e:	2130      	movs	r1, #48	; 0x30
 8001870:	2099      	movs	r0, #153	; 0x99
 8001872:	f7ff fdd3 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x9a, 0x84);
 8001876:	2184      	movs	r1, #132	; 0x84
 8001878:	209a      	movs	r0, #154	; 0x9a
 800187a:	f7ff fdcf 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x9b, 0x29);
 800187e:	2129      	movs	r1, #41	; 0x29
 8001880:	209b      	movs	r0, #155	; 0x9b
 8001882:	f7ff fdcb 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x9c, 0x03);
 8001886:	2103      	movs	r1, #3
 8001888:	209c      	movs	r0, #156	; 0x9c
 800188a:	f7ff fdc7 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x9d, 0x4c);
 800188e:	214c      	movs	r1, #76	; 0x4c
 8001890:	209d      	movs	r0, #157	; 0x9d
 8001892:	f7ff fdc3 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x9e, 0x3f);
 8001896:	213f      	movs	r1, #63	; 0x3f
 8001898:	209e      	movs	r0, #158	; 0x9e
 800189a:	f7ff fdbf 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x78, 0x04);
 800189e:	2104      	movs	r1, #4
 80018a0:	2078      	movs	r0, #120	; 0x78
 80018a2:	f7ff fdbb 	bl	800141c <Ov7670_WriteReg>

  // Extra-weird stuff.  Some sort of multiplexor register
  Ov7670_WriteReg(0x79, 0x01);
 80018a6:	2101      	movs	r1, #1
 80018a8:	2079      	movs	r0, #121	; 0x79
 80018aa:	f7ff fdb7 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0xc8, 0xf0);
 80018ae:	21f0      	movs	r1, #240	; 0xf0
 80018b0:	20c8      	movs	r0, #200	; 0xc8
 80018b2:	f7ff fdb3 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x79, 0x0f);
 80018b6:	210f      	movs	r1, #15
 80018b8:	2079      	movs	r0, #121	; 0x79
 80018ba:	f7ff fdaf 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0xc8, 0x00);
 80018be:	2100      	movs	r1, #0
 80018c0:	20c8      	movs	r0, #200	; 0xc8
 80018c2:	f7ff fdab 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x79, 0x10);
 80018c6:	2110      	movs	r1, #16
 80018c8:	2079      	movs	r0, #121	; 0x79
 80018ca:	f7ff fda7 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0xc8, 0x7e);
 80018ce:	217e      	movs	r1, #126	; 0x7e
 80018d0:	20c8      	movs	r0, #200	; 0xc8
 80018d2:	f7ff fda3 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x79, 0x0a);
 80018d6:	210a      	movs	r1, #10
 80018d8:	2079      	movs	r0, #121	; 0x79
 80018da:	f7ff fd9f 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0xc8, 0x80);
 80018de:	2180      	movs	r1, #128	; 0x80
 80018e0:	20c8      	movs	r0, #200	; 0xc8
 80018e2:	f7ff fd9b 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x79, 0x0b);
 80018e6:	210b      	movs	r1, #11
 80018e8:	2079      	movs	r0, #121	; 0x79
 80018ea:	f7ff fd97 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0xc8, 0x01);
 80018ee:	2101      	movs	r1, #1
 80018f0:	20c8      	movs	r0, #200	; 0xc8
 80018f2:	f7ff fd93 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x79, 0x0c);
 80018f6:	210c      	movs	r1, #12
 80018f8:	2079      	movs	r0, #121	; 0x79
 80018fa:	f7ff fd8f 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0xc8, 0x0f);
 80018fe:	210f      	movs	r1, #15
 8001900:	20c8      	movs	r0, #200	; 0xc8
 8001902:	f7ff fd8b 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x79, 0x0d);
 8001906:	210d      	movs	r1, #13
 8001908:	2079      	movs	r0, #121	; 0x79
 800190a:	f7ff fd87 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0xc8, 0x20);
 800190e:	2120      	movs	r1, #32
 8001910:	20c8      	movs	r0, #200	; 0xc8
 8001912:	f7ff fd83 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x79, 0x09);
 8001916:	2109      	movs	r1, #9
 8001918:	2079      	movs	r0, #121	; 0x79
 800191a:	f7ff fd7f 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0xc8, 0x80);
 800191e:	2180      	movs	r1, #128	; 0x80
 8001920:	20c8      	movs	r0, #200	; 0xc8
 8001922:	f7ff fd7b 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x79, 0x02);
 8001926:	2102      	movs	r1, #2
 8001928:	2079      	movs	r0, #121	; 0x79
 800192a:	f7ff fd77 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0xc8, 0xc0);
 800192e:	21c0      	movs	r1, #192	; 0xc0
 8001930:	20c8      	movs	r0, #200	; 0xc8
 8001932:	f7ff fd73 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x79, 0x03);
 8001936:	2103      	movs	r1, #3
 8001938:	2079      	movs	r0, #121	; 0x79
 800193a:	f7ff fd6f 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0xc8, 0x40);
 800193e:	2140      	movs	r1, #64	; 0x40
 8001940:	20c8      	movs	r0, #200	; 0xc8
 8001942:	f7ff fd6b 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x79, 0x05);
 8001946:	2105      	movs	r1, #5
 8001948:	2079      	movs	r0, #121	; 0x79
 800194a:	f7ff fd67 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0xc8, 0x30);
 800194e:	2130      	movs	r1, #48	; 0x30
 8001950:	20c8      	movs	r0, #200	; 0xc8
 8001952:	f7ff fd63 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x79, 0x26);
 8001956:	2126      	movs	r1, #38	; 0x26
 8001958:	2079      	movs	r0, #121	; 0x79
}
 800195a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Ov7670_WriteReg(0x79, 0x26);
 800195e:	f7ff bd5d 	b.w	800141c <Ov7670_WriteReg>

08001962 <InitYUV>:
  Ov7670_WriteReg(0x54, 0xe4);          // "matrix coefficient 6"
  Ov7670_WriteReg(REG_COM13, COM13_GAMMA | COM13_UVSAT);
}

void InitYUV(void)
{
 8001962:	b513      	push	{r0, r1, r4, lr}
  unsigned char reg_com7 = 0;
 8001964:	a902      	add	r1, sp, #8
 8001966:	2400      	movs	r4, #0
 8001968:	f801 4d01 	strb.w	r4, [r1, #-1]!
  Ov7670_ReadReg(REG_COM7, &reg_com7);
 800196c:	2012      	movs	r0, #18
 800196e:	f7ff fd77 	bl	8001460 <Ov7670_ReadReg>

  Ov7670_WriteReg(REG_COM7, reg_com7 | COM7_YUV);
 8001972:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001976:	2012      	movs	r0, #18
 8001978:	f7ff fd50 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_RGB444, RGB444_DISABLE);
 800197c:	4621      	mov	r1, r4
 800197e:	208c      	movs	r0, #140	; 0x8c
 8001980:	f7ff fd4c 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_COM15, COM15_R00FF);
 8001984:	21c0      	movs	r1, #192	; 0xc0
 8001986:	2040      	movs	r0, #64	; 0x40
 8001988:	f7ff fd48 	bl	800141c <Ov7670_WriteReg>

  Ov7670_WriteReg(REG_TSLB, 0x04);
 800198c:	2104      	movs	r1, #4
 800198e:	203a      	movs	r0, #58	; 0x3a
 8001990:	f7ff fd44 	bl	800141c <Ov7670_WriteReg>
//       Ov7670_WriteReg(REG_TSLB, 0x14);
//       Ov7670_WriteReg(REG_MANU, 0x00);
//       Ov7670_WriteReg(REG_MANV, 0x00);

  Ov7670_WriteReg(REG_COM1, 0x00);
 8001994:	4621      	mov	r1, r4
 8001996:	2004      	movs	r0, #4
 8001998:	f7ff fd40 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_COM9, 0x18);     // 4x gain ceiling; 0x8 is reserved bit
 800199c:	2118      	movs	r1, #24
 800199e:	2014      	movs	r0, #20
 80019a0:	f7ff fd3c 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x4f, 0x80);         // "matrix coefficient 1"
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	204f      	movs	r0, #79	; 0x4f
 80019a8:	f7ff fd38 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x50, 0x80);         // "matrix coefficient 2"
 80019ac:	2180      	movs	r1, #128	; 0x80
 80019ae:	2050      	movs	r0, #80	; 0x50
 80019b0:	f7ff fd34 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x51, 0x00);         // vb
 80019b4:	4621      	mov	r1, r4
 80019b6:	2051      	movs	r0, #81	; 0x51
 80019b8:	f7ff fd30 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x52, 0x22);         // "matrix coefficient 4"
 80019bc:	2122      	movs	r1, #34	; 0x22
 80019be:	2052      	movs	r0, #82	; 0x52
 80019c0:	f7ff fd2c 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x53, 0x5e);         // "matrix coefficient 5"
 80019c4:	215e      	movs	r1, #94	; 0x5e
 80019c6:	2053      	movs	r0, #83	; 0x53
 80019c8:	f7ff fd28 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(0x54, 0x80);         // "matrix coefficient 6"
 80019cc:	2180      	movs	r1, #128	; 0x80
 80019ce:	2054      	movs	r0, #84	; 0x54
 80019d0:	f7ff fd24 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_COM13, COM13_GAMMA | COM13_UVSAT | COM13_UVSWAP);
 80019d4:	21c1      	movs	r1, #193	; 0xc1
 80019d6:	203d      	movs	r0, #61	; 0x3d
 80019d8:	f7ff fd20 	bl	800141c <Ov7670_WriteReg>
}
 80019dc:	b002      	add	sp, #8
 80019de:	bd10      	pop	{r4, pc}

080019e0 <InitQQVGA>:
  Ov7670_WriteReg(REG_SCALING_PCLK_DIV, SCALING_PCLK_DIV_QVGA);
  Ov7670_WriteReg(REG_SCALING_PCLK_DELAY, SCALING_PCLK_DELAY_QVGA);
}

void InitQQVGA(void)
{
 80019e0:	b507      	push	{r0, r1, r2, lr}
  // QQVGA
  unsigned char reg_com7 = 0;
 80019e2:	a902      	add	r1, sp, #8
 80019e4:	2300      	movs	r3, #0
 80019e6:	f801 3d01 	strb.w	r3, [r1, #-1]!
  Ov7670_ReadReg(REG_COM7, &reg_com7);
 80019ea:	2012      	movs	r0, #18
 80019ec:	f7ff fd38 	bl	8001460 <Ov7670_ReadReg>

  Ov7670_WriteReg(REG_COM7, reg_com7 | COM7_QQVGA);
 80019f0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80019f4:	2012      	movs	r0, #18
 80019f6:	f7ff fd11 	bl	800141c <Ov7670_WriteReg>

  Ov7670_WriteReg(REG_HSTART, HSTART_QQVGA);
 80019fa:	2116      	movs	r1, #22
 80019fc:	2017      	movs	r0, #23
 80019fe:	f7ff fd0d 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_HSTOP, HSTOP_QQVGA);
 8001a02:	2104      	movs	r1, #4
 8001a04:	2018      	movs	r0, #24
 8001a06:	f7ff fd09 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_HREF, HREF_QQVGA);
 8001a0a:	21a4      	movs	r1, #164	; 0xa4
 8001a0c:	2032      	movs	r0, #50	; 0x32
 8001a0e:	f7ff fd05 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_VSTART, VSTART_QQVGA);
 8001a12:	2102      	movs	r1, #2
 8001a14:	2019      	movs	r0, #25
 8001a16:	f7ff fd01 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_VSTOP, VSTOP_QQVGA);
 8001a1a:	217a      	movs	r1, #122	; 0x7a
 8001a1c:	201a      	movs	r0, #26
 8001a1e:	f7ff fcfd 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_VREF, VREF_QQVGA);
 8001a22:	210a      	movs	r1, #10
 8001a24:	2003      	movs	r0, #3
 8001a26:	f7ff fcf9 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_COM3, COM3_QQVGA);
 8001a2a:	2104      	movs	r1, #4
 8001a2c:	200c      	movs	r0, #12
 8001a2e:	f7ff fcf5 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_COM14, COM14_QQVGA);
 8001a32:	211a      	movs	r1, #26
 8001a34:	203e      	movs	r0, #62	; 0x3e
 8001a36:	f7ff fcf1 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_SCALING_XSC, SCALING_XSC_QQVGA);
 8001a3a:	213a      	movs	r1, #58	; 0x3a
 8001a3c:	2070      	movs	r0, #112	; 0x70
 8001a3e:	f7ff fced 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_SCALING_YSC, SCALING_YSC_QQVGA);
 8001a42:	2135      	movs	r1, #53	; 0x35
 8001a44:	2071      	movs	r0, #113	; 0x71
 8001a46:	f7ff fce9 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_SCALING_DCWCTR, SCALING_DCWCTR_QQVGA);
 8001a4a:	2122      	movs	r1, #34	; 0x22
 8001a4c:	2072      	movs	r0, #114	; 0x72
 8001a4e:	f7ff fce5 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_SCALING_PCLK_DIV, SCALING_PCLK_DIV_QQVGA);
 8001a52:	21f2      	movs	r1, #242	; 0xf2
 8001a54:	2073      	movs	r0, #115	; 0x73
 8001a56:	f7ff fce1 	bl	800141c <Ov7670_WriteReg>
  Ov7670_WriteReg(REG_SCALING_PCLK_DELAY, SCALING_PCLK_DELAY_QQVGA);
 8001a5a:	2102      	movs	r1, #2
 8001a5c:	20a2      	movs	r0, #162	; 0xa2
 8001a5e:	f7ff fcdd 	bl	800141c <Ov7670_WriteReg>
}
 8001a62:	b003      	add	sp, #12
 8001a64:	f85d fb04 	ldr.w	pc, [sp], #4

08001a68 <Sensor_init>:
/* Function: Sensor_init
 * if success: return 1
 * if error: return 0
 * */
unsigned char Sensor_init(void)
{
 8001a68:	b513      	push	{r0, r1, r4, lr}
//  uchar ovidmsb=0,
//  ovidlsb=0;
//  Sensor_GPIO_Init();  // configured in file: gpio.c
//  SCCB_GPIO_Config();  // configured in file: gpio.c

  temp = 0x80;
 8001a6a:	2180      	movs	r1, #128	; 0x80
  if (0 == Ov7670_WriteReg(0x12, temp))
 8001a6c:	2012      	movs	r0, #18
  temp = 0x80;
 8001a6e:	f88d 1007 	strb.w	r1, [sp, #7]
  if (0 == Ov7670_WriteReg(0x12, temp))
 8001a72:	f7ff fcd3 	bl	800141c <Ov7670_WriteReg>
  {	//Reset SCCB
    print_str("Reset Error", 1);
 8001a76:	2101      	movs	r1, #1
  if (0 == Ov7670_WriteReg(0x12, temp))
 8001a78:	4604      	mov	r4, r0
 8001a7a:	b928      	cbnz	r0, 8001a88 <Sensor_init+0x20>
    print_str("Reset Error", 1);
 8001a7c:	4818      	ldr	r0, [pc, #96]	; (8001ae0 <Sensor_init+0x78>)
  }
  print_str("Reset OK", 1);
  Delay(1);
  if (0 == Ov7670_ReadReg(0x0b, &temp))
  {  // read ID
    print_str("ID Error", 1);
 8001a7e:	f001 fcf7 	bl	8003470 <print_str>

//  Sensor_EXTI_Config();  // configured in file: gpio.c
//  Sensor_Interrupts_Config();  // configured in file: gpio.c
  }
  return 1;  // return 1 = OK
}
 8001a82:	4620      	mov	r0, r4
 8001a84:	b002      	add	sp, #8
 8001a86:	bd10      	pop	{r4, pc}
  print_str("Reset OK", 1);
 8001a88:	4816      	ldr	r0, [pc, #88]	; (8001ae4 <Sensor_init+0x7c>)
 8001a8a:	f001 fcf1 	bl	8003470 <print_str>
  Delay(1);
 8001a8e:	2001      	movs	r0, #1
 8001a90:	f7ff fa5e 	bl	8000f50 <Delay>
  if (0 == Ov7670_ReadReg(0x0b, &temp))
 8001a94:	f10d 0107 	add.w	r1, sp, #7
 8001a98:	200b      	movs	r0, #11
 8001a9a:	f7ff fce1 	bl	8001460 <Ov7670_ReadReg>
    print_str("ID Error", 1);
 8001a9e:	2101      	movs	r1, #1
  if (0 == Ov7670_ReadReg(0x0b, &temp))
 8001aa0:	4604      	mov	r4, r0
 8001aa2:	b908      	cbnz	r0, 8001aa8 <Sensor_init+0x40>
    print_str("ID Error", 1);
 8001aa4:	4810      	ldr	r0, [pc, #64]	; (8001ae8 <Sensor_init+0x80>)
 8001aa6:	e7ea      	b.n	8001a7e <Sensor_init+0x16>
  print_str("ID OK", 1);
 8001aa8:	4810      	ldr	r0, [pc, #64]	; (8001aec <Sensor_init+0x84>)
 8001aaa:	f001 fce1 	bl	8003470 <print_str>
  print_str("id=", 0);
 8001aae:	2100      	movs	r1, #0
 8001ab0:	480f      	ldr	r0, [pc, #60]	; (8001af0 <Sensor_init+0x88>)
 8001ab2:	f001 fcdd 	bl	8003470 <print_str>
  print_int_hex(temp, 1);
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001abc:	f001 fd1c 	bl	80034f8 <print_int_hex>
  if (temp == 0x73)
 8001ac0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ac4:	2b73      	cmp	r3, #115	; 0x73
 8001ac6:	d109      	bne.n	8001adc <Sensor_init+0x74>
    Reset();
 8001ac8:	f7ff fd12 	bl	80014f0 <Reset>
    InitYUV();
 8001acc:	f7ff ff49 	bl	8001962 <InitYUV>
    InitQQVGA();
 8001ad0:	f7ff ff86 	bl	80019e0 <InitQQVGA>
    InitForFIFOWriteReset();
 8001ad4:	f7ff fd16 	bl	8001504 <InitForFIFOWriteReset>
    InitDefaultReg();
 8001ad8:	f7ff fd18 	bl	800150c <InitDefaultReg>
  return 1;  // return 1 = OK
 8001adc:	2401      	movs	r4, #1
 8001ade:	e7d0      	b.n	8001a82 <Sensor_init+0x1a>
 8001ae0:	08006204 	.word	0x08006204
 8001ae4:	08006210 	.word	0x08006210
 8001ae8:	08006219 	.word	0x08006219
 8001aec:	08006222 	.word	0x08006222
 8001af0:	08006228 	.word	0x08006228

08001af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af6:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <HAL_InitTick+0x3c>)
 8001af8:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <HAL_InitTick+0x40>)
{
 8001afa:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001afc:	7818      	ldrb	r0, [r3, #0]
 8001afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b02:	fbb3 f3f0 	udiv	r3, r3, r0
 8001b06:	6810      	ldr	r0, [r2, #0]
 8001b08:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b0c:	f000 f8aa 	bl	8001c64 <HAL_SYSTICK_Config>
 8001b10:	4604      	mov	r4, r0
 8001b12:	b958      	cbnz	r0, 8001b2c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b14:	2d0f      	cmp	r5, #15
 8001b16:	d809      	bhi.n	8001b2c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b18:	4602      	mov	r2, r0
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	f000 f85e 	bl	8001be0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <HAL_InitTick+0x44>)
 8001b26:	4620      	mov	r0, r4
 8001b28:	601d      	str	r5, [r3, #0]
 8001b2a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001b2c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001b2e:	bd38      	pop	{r3, r4, r5, pc}
 8001b30:	20000010 	.word	0x20000010
 8001b34:	20000000 	.word	0x20000000
 8001b38:	20000004 	.word	0x20000004

08001b3c <HAL_Init>:
{
 8001b3c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_Init+0x30>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b46:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b4e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b56:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b58:	2003      	movs	r0, #3
 8001b5a:	f000 f82f 	bl	8001bbc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f7ff ffc8 	bl	8001af4 <HAL_InitTick>
  HAL_MspInit();
 8001b64:	f001 fcf2 	bl	800354c <HAL_MspInit>
}
 8001b68:	2000      	movs	r0, #0
 8001b6a:	bd08      	pop	{r3, pc}
 8001b6c:	40023c00 	.word	0x40023c00

08001b70 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001b70:	4a03      	ldr	r2, [pc, #12]	; (8001b80 <HAL_IncTick+0x10>)
 8001b72:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <HAL_IncTick+0x14>)
 8001b74:	6811      	ldr	r1, [r2, #0]
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	440b      	add	r3, r1
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000830 	.word	0x20000830
 8001b84:	20000000 	.word	0x20000000

08001b88 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001b88:	4b01      	ldr	r3, [pc, #4]	; (8001b90 <HAL_GetTick+0x8>)
 8001b8a:	6818      	ldr	r0, [r3, #0]
}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000830 	.word	0x20000830

08001b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b94:	b538      	push	{r3, r4, r5, lr}
 8001b96:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001b98:	f7ff fff6 	bl	8001b88 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b9c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9e:	bf1c      	itt	ne
 8001ba0:	4b05      	ldrne	r3, [pc, #20]	; (8001bb8 <HAL_Delay+0x24>)
 8001ba2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001ba4:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001ba6:	bf18      	it	ne
 8001ba8:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001baa:	f7ff ffed 	bl	8001b88 <HAL_GetTick>
 8001bae:	1b40      	subs	r0, r0, r5
 8001bb0:	4284      	cmp	r4, r0
 8001bb2:	d8fa      	bhi.n	8001baa <HAL_Delay+0x16>
  {
  }
}
 8001bb4:	bd38      	pop	{r3, r4, r5, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000000 	.word	0x20000000

08001bbc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bbc:	4a07      	ldr	r2, [pc, #28]	; (8001bdc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001bbe:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bc4:	041b      	lsls	r3, r3, #16
 8001bc6:	0c1b      	lsrs	r3, r3, #16
 8001bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bcc:	0200      	lsls	r0, r0, #8
 8001bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001bd6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001bd8:	60d3      	str	r3, [r2, #12]
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be0:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001be2:	b530      	push	{r4, r5, lr}
 8001be4:	68dc      	ldr	r4, [r3, #12]
 8001be6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bea:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bee:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	bf28      	it	cs
 8001bf4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	f04f 0501 	mov.w	r5, #1
 8001bfc:	fa05 f303 	lsl.w	r3, r5, r3
 8001c00:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c04:	bf8c      	ite	hi
 8001c06:	3c03      	subhi	r4, #3
 8001c08:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0a:	4019      	ands	r1, r3
 8001c0c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c0e:	fa05 f404 	lsl.w	r4, r5, r4
 8001c12:	3c01      	subs	r4, #1
 8001c14:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001c16:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	ea42 0201 	orr.w	r2, r2, r1
 8001c1c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c20:	bfad      	iteet	ge
 8001c22:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c26:	f000 000f 	andlt.w	r0, r0, #15
 8001c2a:	4b06      	ldrlt	r3, [pc, #24]	; (8001c44 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c30:	bfb5      	itete	lt
 8001c32:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c34:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c36:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c38:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001c3c:	bd30      	pop	{r4, r5, pc}
 8001c3e:	bf00      	nop
 8001c40:	e000ed00 	.word	0xe000ed00
 8001c44:	e000ed14 	.word	0xe000ed14

08001c48 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001c48:	2800      	cmp	r0, #0
 8001c4a:	db08      	blt.n	8001c5e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c4c:	0942      	lsrs	r2, r0, #5
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f000 001f 	and.w	r0, r0, #31
 8001c54:	fa03 f000 	lsl.w	r0, r3, r0
 8001c58:	4b01      	ldr	r3, [pc, #4]	; (8001c60 <HAL_NVIC_EnableIRQ+0x18>)
 8001c5a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001c5e:	4770      	bx	lr
 8001c60:	e000e100 	.word	0xe000e100

08001c64 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c64:	3801      	subs	r0, #1
 8001c66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001c6a:	d20a      	bcs.n	8001c82 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6e:	4a07      	ldr	r2, [pc, #28]	; (8001c8c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c70:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c72:	21f0      	movs	r1, #240	; 0xf0
 8001c74:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c78:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001c82:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000e010 	.word	0xe000e010
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c94:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c96:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c98:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001e48 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c9c:	4a68      	ldr	r2, [pc, #416]	; (8001e40 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c9e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001e4c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001ca6:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001caa:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001cac:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cb0:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001cb4:	45b6      	cmp	lr, r6
 8001cb6:	f040 80ae 	bne.w	8001e16 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cba:	684c      	ldr	r4, [r1, #4]
 8001cbc:	f024 0710 	bic.w	r7, r4, #16
 8001cc0:	2f02      	cmp	r7, #2
 8001cc2:	d116      	bne.n	8001cf2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001cc4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001cc8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ccc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001cd0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cd4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001cd8:	f04f 0c0f 	mov.w	ip, #15
 8001cdc:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001ce0:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ce4:	690d      	ldr	r5, [r1, #16]
 8001ce6:	fa05 f50b 	lsl.w	r5, r5, fp
 8001cea:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001cee:	f8ca 5020 	str.w	r5, [sl, #32]
 8001cf2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cf6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001cf8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cfc:	fa05 f50a 	lsl.w	r5, r5, sl
 8001d00:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d02:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d06:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d0a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d0e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d10:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d14:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001d16:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d1a:	d811      	bhi.n	8001d40 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001d1c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d1e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d22:	68cf      	ldr	r7, [r1, #12]
 8001d24:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001d28:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001d2c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001d2e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d30:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d34:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001d38:	409f      	lsls	r7, r3
 8001d3a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001d3e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001d40:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d42:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d44:	688f      	ldr	r7, [r1, #8]
 8001d46:	fa07 f70a 	lsl.w	r7, r7, sl
 8001d4a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001d4c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d4e:	00e5      	lsls	r5, r4, #3
 8001d50:	d561      	bpl.n	8001e16 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d52:	f04f 0b00 	mov.w	fp, #0
 8001d56:	f8cd b00c 	str.w	fp, [sp, #12]
 8001d5a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d5e:	4d39      	ldr	r5, [pc, #228]	; (8001e44 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d60:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001d64:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001d68:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001d6c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001d70:	9703      	str	r7, [sp, #12]
 8001d72:	9f03      	ldr	r7, [sp, #12]
 8001d74:	f023 0703 	bic.w	r7, r3, #3
 8001d78:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001d7c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d80:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001d84:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d88:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001d8c:	f04f 0e0f 	mov.w	lr, #15
 8001d90:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d94:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d96:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d9a:	d043      	beq.n	8001e24 <HAL_GPIO_Init+0x194>
 8001d9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001da0:	42a8      	cmp	r0, r5
 8001da2:	d041      	beq.n	8001e28 <HAL_GPIO_Init+0x198>
 8001da4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001da8:	42a8      	cmp	r0, r5
 8001daa:	d03f      	beq.n	8001e2c <HAL_GPIO_Init+0x19c>
 8001dac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001db0:	42a8      	cmp	r0, r5
 8001db2:	d03d      	beq.n	8001e30 <HAL_GPIO_Init+0x1a0>
 8001db4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001db8:	42a8      	cmp	r0, r5
 8001dba:	d03b      	beq.n	8001e34 <HAL_GPIO_Init+0x1a4>
 8001dbc:	4548      	cmp	r0, r9
 8001dbe:	d03b      	beq.n	8001e38 <HAL_GPIO_Init+0x1a8>
 8001dc0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001dc4:	42a8      	cmp	r0, r5
 8001dc6:	d039      	beq.n	8001e3c <HAL_GPIO_Init+0x1ac>
 8001dc8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001dcc:	42a8      	cmp	r0, r5
 8001dce:	bf14      	ite	ne
 8001dd0:	2508      	movne	r5, #8
 8001dd2:	2507      	moveq	r5, #7
 8001dd4:	fa05 f50c 	lsl.w	r5, r5, ip
 8001dd8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ddc:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001dde:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001de0:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001de2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001de6:	bf0c      	ite	eq
 8001de8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001dea:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001dec:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001dee:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001df0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001df4:	bf0c      	ite	eq
 8001df6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001df8:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001dfa:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dfc:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dfe:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001e02:	bf0c      	ite	eq
 8001e04:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001e06:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001e08:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001e0a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e0c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001e0e:	bf54      	ite	pl
 8001e10:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001e12:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001e14:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e16:	3301      	adds	r3, #1
 8001e18:	2b10      	cmp	r3, #16
 8001e1a:	f47f af44 	bne.w	8001ca6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001e1e:	b005      	add	sp, #20
 8001e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e24:	465d      	mov	r5, fp
 8001e26:	e7d5      	b.n	8001dd4 <HAL_GPIO_Init+0x144>
 8001e28:	2501      	movs	r5, #1
 8001e2a:	e7d3      	b.n	8001dd4 <HAL_GPIO_Init+0x144>
 8001e2c:	2502      	movs	r5, #2
 8001e2e:	e7d1      	b.n	8001dd4 <HAL_GPIO_Init+0x144>
 8001e30:	2503      	movs	r5, #3
 8001e32:	e7cf      	b.n	8001dd4 <HAL_GPIO_Init+0x144>
 8001e34:	2504      	movs	r5, #4
 8001e36:	e7cd      	b.n	8001dd4 <HAL_GPIO_Init+0x144>
 8001e38:	2505      	movs	r5, #5
 8001e3a:	e7cb      	b.n	8001dd4 <HAL_GPIO_Init+0x144>
 8001e3c:	2506      	movs	r5, #6
 8001e3e:	e7c9      	b.n	8001dd4 <HAL_GPIO_Init+0x144>
 8001e40:	40013c00 	.word	0x40013c00
 8001e44:	40020000 	.word	0x40020000
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40021400 	.word	0x40021400

08001e50 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e50:	6903      	ldr	r3, [r0, #16]
 8001e52:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001e54:	bf14      	ite	ne
 8001e56:	2001      	movne	r0, #1
 8001e58:	2000      	moveq	r0, #0
 8001e5a:	4770      	bx	lr

08001e5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e5c:	b10a      	cbz	r2, 8001e62 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e5e:	6181      	str	r1, [r0, #24]
 8001e60:	4770      	bx	lr
 8001e62:	0409      	lsls	r1, r1, #16
 8001e64:	e7fb      	b.n	8001e5e <HAL_GPIO_WritePin+0x2>

08001e66 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001e66:	6943      	ldr	r3, [r0, #20]
 8001e68:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e6c:	bf08      	it	eq
 8001e6e:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e70:	6181      	str	r1, [r0, #24]
 8001e72:	4770      	bx	lr

08001e74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e74:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001e78:	6959      	ldr	r1, [r3, #20]
 8001e7a:	4201      	tst	r1, r0
 8001e7c:	d002      	beq.n	8001e84 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e7e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e80:	f001 faa8 	bl	80033d4 <HAL_GPIO_EXTI_Callback>
 8001e84:	bd08      	pop	{r3, pc}
 8001e86:	bf00      	nop
 8001e88:	40013c00 	.word	0x40013c00

08001e8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e90:	4604      	mov	r4, r0
 8001e92:	b918      	cbnz	r0, 8001e9c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001e94:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001e96:	b002      	add	sp, #8
 8001e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9c:	6803      	ldr	r3, [r0, #0]
 8001e9e:	07dd      	lsls	r5, r3, #31
 8001ea0:	d410      	bmi.n	8001ec4 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ea2:	6823      	ldr	r3, [r4, #0]
 8001ea4:	0798      	lsls	r0, r3, #30
 8001ea6:	d458      	bmi.n	8001f5a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ea8:	6823      	ldr	r3, [r4, #0]
 8001eaa:	071a      	lsls	r2, r3, #28
 8001eac:	f100 809a 	bmi.w	8001fe4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	075b      	lsls	r3, r3, #29
 8001eb4:	f100 80b8 	bmi.w	8002028 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb8:	69a2      	ldr	r2, [r4, #24]
 8001eba:	2a00      	cmp	r2, #0
 8001ebc:	f040 8119 	bne.w	80020f2 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	e7e8      	b.n	8001e96 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ec4:	4ba6      	ldr	r3, [pc, #664]	; (8002160 <HAL_RCC_OscConfig+0x2d4>)
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	f002 020c 	and.w	r2, r2, #12
 8001ecc:	2a04      	cmp	r2, #4
 8001ece:	d007      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ed6:	2a08      	cmp	r2, #8
 8001ed8:	d10a      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	0259      	lsls	r1, r3, #9
 8001ede:	d507      	bpl.n	8001ef0 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	4b9f      	ldr	r3, [pc, #636]	; (8002160 <HAL_RCC_OscConfig+0x2d4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	039a      	lsls	r2, r3, #14
 8001ee6:	d5dc      	bpl.n	8001ea2 <HAL_RCC_OscConfig+0x16>
 8001ee8:	6863      	ldr	r3, [r4, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1d9      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x16>
 8001eee:	e7d1      	b.n	8001e94 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef0:	6863      	ldr	r3, [r4, #4]
 8001ef2:	4d9b      	ldr	r5, [pc, #620]	; (8002160 <HAL_RCC_OscConfig+0x2d4>)
 8001ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef8:	d111      	bne.n	8001f1e <HAL_RCC_OscConfig+0x92>
 8001efa:	682b      	ldr	r3, [r5, #0]
 8001efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f00:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001f02:	f7ff fe41 	bl	8001b88 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f06:	4d96      	ldr	r5, [pc, #600]	; (8002160 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001f08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	682b      	ldr	r3, [r5, #0]
 8001f0c:	039b      	lsls	r3, r3, #14
 8001f0e:	d4c8      	bmi.n	8001ea2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f10:	f7ff fe3a 	bl	8001b88 <HAL_GetTick>
 8001f14:	1b80      	subs	r0, r0, r6
 8001f16:	2864      	cmp	r0, #100	; 0x64
 8001f18:	d9f7      	bls.n	8001f0a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001f1a:	2003      	movs	r0, #3
 8001f1c:	e7bb      	b.n	8001e96 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f22:	d104      	bne.n	8001f2e <HAL_RCC_OscConfig+0xa2>
 8001f24:	682b      	ldr	r3, [r5, #0]
 8001f26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f2a:	602b      	str	r3, [r5, #0]
 8001f2c:	e7e5      	b.n	8001efa <HAL_RCC_OscConfig+0x6e>
 8001f2e:	682a      	ldr	r2, [r5, #0]
 8001f30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f34:	602a      	str	r2, [r5, #0]
 8001f36:	682a      	ldr	r2, [r5, #0]
 8001f38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f3c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1df      	bne.n	8001f02 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001f42:	f7ff fe21 	bl	8001b88 <HAL_GetTick>
 8001f46:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f48:	682b      	ldr	r3, [r5, #0]
 8001f4a:	039f      	lsls	r7, r3, #14
 8001f4c:	d5a9      	bpl.n	8001ea2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f4e:	f7ff fe1b 	bl	8001b88 <HAL_GetTick>
 8001f52:	1b80      	subs	r0, r0, r6
 8001f54:	2864      	cmp	r0, #100	; 0x64
 8001f56:	d9f7      	bls.n	8001f48 <HAL_RCC_OscConfig+0xbc>
 8001f58:	e7df      	b.n	8001f1a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f5a:	4b81      	ldr	r3, [pc, #516]	; (8002160 <HAL_RCC_OscConfig+0x2d4>)
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	f012 0f0c 	tst.w	r2, #12
 8001f62:	d007      	beq.n	8001f74 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f6a:	2a08      	cmp	r2, #8
 8001f6c:	d111      	bne.n	8001f92 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	025e      	lsls	r6, r3, #9
 8001f72:	d40e      	bmi.n	8001f92 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f74:	4b7a      	ldr	r3, [pc, #488]	; (8002160 <HAL_RCC_OscConfig+0x2d4>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	0795      	lsls	r5, r2, #30
 8001f7a:	d502      	bpl.n	8001f82 <HAL_RCC_OscConfig+0xf6>
 8001f7c:	68e2      	ldr	r2, [r4, #12]
 8001f7e:	2a01      	cmp	r2, #1
 8001f80:	d188      	bne.n	8001e94 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	6921      	ldr	r1, [r4, #16]
 8001f86:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001f8a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001f8e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f90:	e78a      	b.n	8001ea8 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f92:	68e2      	ldr	r2, [r4, #12]
 8001f94:	4b73      	ldr	r3, [pc, #460]	; (8002164 <HAL_RCC_OscConfig+0x2d8>)
 8001f96:	b1b2      	cbz	r2, 8001fc6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001f98:	2201      	movs	r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fdf4 	bl	8001b88 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa0:	4d6f      	ldr	r5, [pc, #444]	; (8002160 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001fa2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa4:	682b      	ldr	r3, [r5, #0]
 8001fa6:	0798      	lsls	r0, r3, #30
 8001fa8:	d507      	bpl.n	8001fba <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001faa:	682b      	ldr	r3, [r5, #0]
 8001fac:	6922      	ldr	r2, [r4, #16]
 8001fae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001fb2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001fb6:	602b      	str	r3, [r5, #0]
 8001fb8:	e776      	b.n	8001ea8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fba:	f7ff fde5 	bl	8001b88 <HAL_GetTick>
 8001fbe:	1b80      	subs	r0, r0, r6
 8001fc0:	2802      	cmp	r0, #2
 8001fc2:	d9ef      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x118>
 8001fc4:	e7a9      	b.n	8001f1a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001fc6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001fc8:	f7ff fdde 	bl	8001b88 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fcc:	4d64      	ldr	r5, [pc, #400]	; (8002160 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001fce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd0:	682b      	ldr	r3, [r5, #0]
 8001fd2:	0799      	lsls	r1, r3, #30
 8001fd4:	f57f af68 	bpl.w	8001ea8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd8:	f7ff fdd6 	bl	8001b88 <HAL_GetTick>
 8001fdc:	1b80      	subs	r0, r0, r6
 8001fde:	2802      	cmp	r0, #2
 8001fe0:	d9f6      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x144>
 8001fe2:	e79a      	b.n	8001f1a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fe4:	6962      	ldr	r2, [r4, #20]
 8001fe6:	4b60      	ldr	r3, [pc, #384]	; (8002168 <HAL_RCC_OscConfig+0x2dc>)
 8001fe8:	b17a      	cbz	r2, 800200a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001fea:	2201      	movs	r2, #1
 8001fec:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001fee:	f7ff fdcb 	bl	8001b88 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff2:	4d5b      	ldr	r5, [pc, #364]	; (8002160 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001ff4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001ff8:	079f      	lsls	r7, r3, #30
 8001ffa:	f53f af59 	bmi.w	8001eb0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffe:	f7ff fdc3 	bl	8001b88 <HAL_GetTick>
 8002002:	1b80      	subs	r0, r0, r6
 8002004:	2802      	cmp	r0, #2
 8002006:	d9f6      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x16a>
 8002008:	e787      	b.n	8001f1a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800200a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800200c:	f7ff fdbc 	bl	8001b88 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002010:	4d53      	ldr	r5, [pc, #332]	; (8002160 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002012:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002014:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002016:	0798      	lsls	r0, r3, #30
 8002018:	f57f af4a 	bpl.w	8001eb0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800201c:	f7ff fdb4 	bl	8001b88 <HAL_GetTick>
 8002020:	1b80      	subs	r0, r0, r6
 8002022:	2802      	cmp	r0, #2
 8002024:	d9f6      	bls.n	8002014 <HAL_RCC_OscConfig+0x188>
 8002026:	e778      	b.n	8001f1a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002028:	4b4d      	ldr	r3, [pc, #308]	; (8002160 <HAL_RCC_OscConfig+0x2d4>)
 800202a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800202c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002030:	d128      	bne.n	8002084 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002032:	9201      	str	r2, [sp, #4]
 8002034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002036:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002046:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002048:	4d48      	ldr	r5, [pc, #288]	; (800216c <HAL_RCC_OscConfig+0x2e0>)
 800204a:	682b      	ldr	r3, [r5, #0]
 800204c:	05d9      	lsls	r1, r3, #23
 800204e:	d51b      	bpl.n	8002088 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002050:	68a3      	ldr	r3, [r4, #8]
 8002052:	4d43      	ldr	r5, [pc, #268]	; (8002160 <HAL_RCC_OscConfig+0x2d4>)
 8002054:	2b01      	cmp	r3, #1
 8002056:	d127      	bne.n	80020a8 <HAL_RCC_OscConfig+0x21c>
 8002058:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002060:	f7ff fd92 	bl	8001b88 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002064:	4d3e      	ldr	r5, [pc, #248]	; (8002160 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8002066:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002068:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800206e:	079b      	lsls	r3, r3, #30
 8002070:	d539      	bpl.n	80020e6 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8002072:	2e00      	cmp	r6, #0
 8002074:	f43f af20 	beq.w	8001eb8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002078:	4a39      	ldr	r2, [pc, #228]	; (8002160 <HAL_RCC_OscConfig+0x2d4>)
 800207a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800207c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002080:	6413      	str	r3, [r2, #64]	; 0x40
 8002082:	e719      	b.n	8001eb8 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002084:	2600      	movs	r6, #0
 8002086:	e7df      	b.n	8002048 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002088:	682b      	ldr	r3, [r5, #0]
 800208a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002090:	f7ff fd7a 	bl	8001b88 <HAL_GetTick>
 8002094:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002096:	682b      	ldr	r3, [r5, #0]
 8002098:	05da      	lsls	r2, r3, #23
 800209a:	d4d9      	bmi.n	8002050 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209c:	f7ff fd74 	bl	8001b88 <HAL_GetTick>
 80020a0:	1bc0      	subs	r0, r0, r7
 80020a2:	2802      	cmp	r0, #2
 80020a4:	d9f7      	bls.n	8002096 <HAL_RCC_OscConfig+0x20a>
 80020a6:	e738      	b.n	8001f1a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a8:	2b05      	cmp	r3, #5
 80020aa:	d104      	bne.n	80020b6 <HAL_RCC_OscConfig+0x22a>
 80020ac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80020ae:	f043 0304 	orr.w	r3, r3, #4
 80020b2:	672b      	str	r3, [r5, #112]	; 0x70
 80020b4:	e7d0      	b.n	8002058 <HAL_RCC_OscConfig+0x1cc>
 80020b6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80020b8:	f022 0201 	bic.w	r2, r2, #1
 80020bc:	672a      	str	r2, [r5, #112]	; 0x70
 80020be:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80020c0:	f022 0204 	bic.w	r2, r2, #4
 80020c4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1ca      	bne.n	8002060 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80020ca:	f7ff fd5d 	bl	8001b88 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ce:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80020d2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80020d6:	0798      	lsls	r0, r3, #30
 80020d8:	d5cb      	bpl.n	8002072 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020da:	f7ff fd55 	bl	8001b88 <HAL_GetTick>
 80020de:	1bc0      	subs	r0, r0, r7
 80020e0:	4540      	cmp	r0, r8
 80020e2:	d9f7      	bls.n	80020d4 <HAL_RCC_OscConfig+0x248>
 80020e4:	e719      	b.n	8001f1a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e6:	f7ff fd4f 	bl	8001b88 <HAL_GetTick>
 80020ea:	1bc0      	subs	r0, r0, r7
 80020ec:	4540      	cmp	r0, r8
 80020ee:	d9bd      	bls.n	800206c <HAL_RCC_OscConfig+0x1e0>
 80020f0:	e713      	b.n	8001f1a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020f2:	4d1b      	ldr	r5, [pc, #108]	; (8002160 <HAL_RCC_OscConfig+0x2d4>)
 80020f4:	68ab      	ldr	r3, [r5, #8]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	f43f aeca 	beq.w	8001e94 <HAL_RCC_OscConfig+0x8>
 8002100:	4e1b      	ldr	r6, [pc, #108]	; (8002170 <HAL_RCC_OscConfig+0x2e4>)
 8002102:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002104:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002106:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002108:	d134      	bne.n	8002174 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800210a:	f7ff fd3d 	bl	8001b88 <HAL_GetTick>
 800210e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002110:	682b      	ldr	r3, [r5, #0]
 8002112:	0199      	lsls	r1, r3, #6
 8002114:	d41e      	bmi.n	8002154 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002116:	6a22      	ldr	r2, [r4, #32]
 8002118:	69e3      	ldr	r3, [r4, #28]
 800211a:	4313      	orrs	r3, r2
 800211c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800211e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002122:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002124:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002128:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212a:	4c0d      	ldr	r4, [pc, #52]	; (8002160 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800212c:	0852      	lsrs	r2, r2, #1
 800212e:	3a01      	subs	r2, #1
 8002130:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002134:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002136:	2301      	movs	r3, #1
 8002138:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800213a:	f7ff fd25 	bl	8001b88 <HAL_GetTick>
 800213e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	019a      	lsls	r2, r3, #6
 8002144:	f53f aebc 	bmi.w	8001ec0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002148:	f7ff fd1e 	bl	8001b88 <HAL_GetTick>
 800214c:	1b40      	subs	r0, r0, r5
 800214e:	2802      	cmp	r0, #2
 8002150:	d9f6      	bls.n	8002140 <HAL_RCC_OscConfig+0x2b4>
 8002152:	e6e2      	b.n	8001f1a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002154:	f7ff fd18 	bl	8001b88 <HAL_GetTick>
 8002158:	1bc0      	subs	r0, r0, r7
 800215a:	2802      	cmp	r0, #2
 800215c:	d9d8      	bls.n	8002110 <HAL_RCC_OscConfig+0x284>
 800215e:	e6dc      	b.n	8001f1a <HAL_RCC_OscConfig+0x8e>
 8002160:	40023800 	.word	0x40023800
 8002164:	42470000 	.word	0x42470000
 8002168:	42470e80 	.word	0x42470e80
 800216c:	40007000 	.word	0x40007000
 8002170:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8002174:	f7ff fd08 	bl	8001b88 <HAL_GetTick>
 8002178:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217a:	682b      	ldr	r3, [r5, #0]
 800217c:	019b      	lsls	r3, r3, #6
 800217e:	f57f ae9f 	bpl.w	8001ec0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002182:	f7ff fd01 	bl	8001b88 <HAL_GetTick>
 8002186:	1b00      	subs	r0, r0, r4
 8002188:	2802      	cmp	r0, #2
 800218a:	d9f6      	bls.n	800217a <HAL_RCC_OscConfig+0x2ee>
 800218c:	e6c5      	b.n	8001f1a <HAL_RCC_OscConfig+0x8e>
 800218e:	bf00      	nop

08002190 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002190:	4913      	ldr	r1, [pc, #76]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002192:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002194:	688b      	ldr	r3, [r1, #8]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b04      	cmp	r3, #4
 800219c:	d003      	beq.n	80021a6 <HAL_RCC_GetSysClockFreq+0x16>
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d003      	beq.n	80021aa <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021a2:	4810      	ldr	r0, [pc, #64]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80021a4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80021a6:	4810      	ldr	r0, [pc, #64]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x58>)
 80021a8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021aa:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ac:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ae:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021b0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b4:	bf14      	ite	ne
 80021b6:	480c      	ldrne	r0, [pc, #48]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b8:	480a      	ldreq	r0, [pc, #40]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ba:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80021be:	bf18      	it	ne
 80021c0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021c2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021c6:	fba1 0100 	umull	r0, r1, r1, r0
 80021ca:	f7fe fd39 	bl	8000c40 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021ce:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x50>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80021d6:	3301      	adds	r3, #1
 80021d8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80021da:	fbb0 f0f3 	udiv	r0, r0, r3
 80021de:	bd08      	pop	{r3, pc}
 80021e0:	40023800 	.word	0x40023800
 80021e4:	00f42400 	.word	0x00f42400
 80021e8:	007a1200 	.word	0x007a1200

080021ec <HAL_RCC_ClockConfig>:
{
 80021ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021f0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80021f2:	4604      	mov	r4, r0
 80021f4:	b910      	cbnz	r0, 80021fc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80021f6:	2001      	movs	r0, #1
 80021f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021fc:	4b44      	ldr	r3, [pc, #272]	; (8002310 <HAL_RCC_ClockConfig+0x124>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	f002 020f 	and.w	r2, r2, #15
 8002204:	428a      	cmp	r2, r1
 8002206:	d328      	bcc.n	800225a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002208:	6821      	ldr	r1, [r4, #0]
 800220a:	078f      	lsls	r7, r1, #30
 800220c:	d42d      	bmi.n	800226a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220e:	07c8      	lsls	r0, r1, #31
 8002210:	d440      	bmi.n	8002294 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002212:	4b3f      	ldr	r3, [pc, #252]	; (8002310 <HAL_RCC_ClockConfig+0x124>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	f002 020f 	and.w	r2, r2, #15
 800221a:	4295      	cmp	r5, r2
 800221c:	d366      	bcc.n	80022ec <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800221e:	6822      	ldr	r2, [r4, #0]
 8002220:	0751      	lsls	r1, r2, #29
 8002222:	d46c      	bmi.n	80022fe <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002224:	0713      	lsls	r3, r2, #28
 8002226:	d507      	bpl.n	8002238 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002228:	4a3a      	ldr	r2, [pc, #232]	; (8002314 <HAL_RCC_ClockConfig+0x128>)
 800222a:	6921      	ldr	r1, [r4, #16]
 800222c:	6893      	ldr	r3, [r2, #8]
 800222e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002232:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002236:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002238:	f7ff ffaa 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 800223c:	4b35      	ldr	r3, [pc, #212]	; (8002314 <HAL_RCC_ClockConfig+0x128>)
 800223e:	4a36      	ldr	r2, [pc, #216]	; (8002318 <HAL_RCC_ClockConfig+0x12c>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002246:	5cd3      	ldrb	r3, [r2, r3]
 8002248:	40d8      	lsrs	r0, r3
 800224a:	4b34      	ldr	r3, [pc, #208]	; (800231c <HAL_RCC_ClockConfig+0x130>)
 800224c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800224e:	2000      	movs	r0, #0
 8002250:	f7ff fc50 	bl	8001af4 <HAL_InitTick>
  return HAL_OK;
 8002254:	2000      	movs	r0, #0
 8002256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225a:	b2ca      	uxtb	r2, r1
 800225c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	4299      	cmp	r1, r3
 8002266:	d1c6      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xa>
 8002268:	e7ce      	b.n	8002208 <HAL_RCC_ClockConfig+0x1c>
 800226a:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800226c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002270:	bf1e      	ittt	ne
 8002272:	689a      	ldrne	r2, [r3, #8]
 8002274:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8002278:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800227a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800227c:	bf42      	ittt	mi
 800227e:	689a      	ldrmi	r2, [r3, #8]
 8002280:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8002284:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	68a0      	ldr	r0, [r4, #8]
 800228a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800228e:	4302      	orrs	r2, r0
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	e7bc      	b.n	800220e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002294:	6862      	ldr	r2, [r4, #4]
 8002296:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <HAL_RCC_ClockConfig+0x128>)
 8002298:	2a01      	cmp	r2, #1
 800229a:	d11d      	bne.n	80022d8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a2:	d0a8      	beq.n	80021f6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a4:	4e1b      	ldr	r6, [pc, #108]	; (8002314 <HAL_RCC_ClockConfig+0x128>)
 80022a6:	68b3      	ldr	r3, [r6, #8]
 80022a8:	f023 0303 	bic.w	r3, r3, #3
 80022ac:	4313      	orrs	r3, r2
 80022ae:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80022b0:	f7ff fc6a 	bl	8001b88 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80022b8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ba:	68b3      	ldr	r3, [r6, #8]
 80022bc:	6862      	ldr	r2, [r4, #4]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80022c6:	d0a4      	beq.n	8002212 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c8:	f7ff fc5e 	bl	8001b88 <HAL_GetTick>
 80022cc:	1bc0      	subs	r0, r0, r7
 80022ce:	4540      	cmp	r0, r8
 80022d0:	d9f3      	bls.n	80022ba <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80022d2:	2003      	movs	r0, #3
}
 80022d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022d8:	1e91      	subs	r1, r2, #2
 80022da:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022dc:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022de:	d802      	bhi.n	80022e6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80022e4:	e7dd      	b.n	80022a2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e6:	f013 0f02 	tst.w	r3, #2
 80022ea:	e7da      	b.n	80022a2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ec:	b2ea      	uxtb	r2, r5
 80022ee:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	429d      	cmp	r5, r3
 80022f8:	f47f af7d 	bne.w	80021f6 <HAL_RCC_ClockConfig+0xa>
 80022fc:	e78f      	b.n	800221e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022fe:	4905      	ldr	r1, [pc, #20]	; (8002314 <HAL_RCC_ClockConfig+0x128>)
 8002300:	68e0      	ldr	r0, [r4, #12]
 8002302:	688b      	ldr	r3, [r1, #8]
 8002304:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002308:	4303      	orrs	r3, r0
 800230a:	608b      	str	r3, [r1, #8]
 800230c:	e78a      	b.n	8002224 <HAL_RCC_ClockConfig+0x38>
 800230e:	bf00      	nop
 8002310:	40023c00 	.word	0x40023c00
 8002314:	40023800 	.word	0x40023800
 8002318:	080062ca 	.word	0x080062ca
 800231c:	20000010 	.word	0x20000010

08002320 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002322:	4a05      	ldr	r2, [pc, #20]	; (8002338 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800232a:	5cd3      	ldrb	r3, [r2, r3]
 800232c:	4a03      	ldr	r2, [pc, #12]	; (800233c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800232e:	6810      	ldr	r0, [r2, #0]
}
 8002330:	40d8      	lsrs	r0, r3
 8002332:	4770      	bx	lr
 8002334:	40023800 	.word	0x40023800
 8002338:	080062da 	.word	0x080062da
 800233c:	20000010 	.word	0x20000010

08002340 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002342:	4a05      	ldr	r2, [pc, #20]	; (8002358 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800234a:	5cd3      	ldrb	r3, [r2, r3]
 800234c:	4a03      	ldr	r2, [pc, #12]	; (800235c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800234e:	6810      	ldr	r0, [r2, #0]
}
 8002350:	40d8      	lsrs	r0, r3
 8002352:	4770      	bx	lr
 8002354:	40023800 	.word	0x40023800
 8002358:	080062da 	.word	0x080062da
 800235c:	20000010 	.word	0x20000010

08002360 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002360:	6a03      	ldr	r3, [r0, #32]
 8002362:	f023 0301 	bic.w	r3, r3, #1
 8002366:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002368:	6a03      	ldr	r3, [r0, #32]
{
 800236a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800236c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800236e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002370:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002372:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002376:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002378:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800237a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800237e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002380:	4d0e      	ldr	r5, [pc, #56]	; (80023bc <TIM_OC1_SetConfig+0x5c>)
 8002382:	42a8      	cmp	r0, r5
 8002384:	d002      	beq.n	800238c <TIM_OC1_SetConfig+0x2c>
 8002386:	4e0e      	ldr	r6, [pc, #56]	; (80023c0 <TIM_OC1_SetConfig+0x60>)
 8002388:	42b0      	cmp	r0, r6
 800238a:	d110      	bne.n	80023ae <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800238c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800238e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002392:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002394:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8002396:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800239a:	d002      	beq.n	80023a2 <TIM_OC1_SetConfig+0x42>
 800239c:	4d08      	ldr	r5, [pc, #32]	; (80023c0 <TIM_OC1_SetConfig+0x60>)
 800239e:	42a8      	cmp	r0, r5
 80023a0:	d105      	bne.n	80023ae <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023a2:	694d      	ldr	r5, [r1, #20]
 80023a4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023a6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80023aa:	4335      	orrs	r5, r6
 80023ac:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023ae:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023b0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023b2:	684a      	ldr	r2, [r1, #4]
 80023b4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023b6:	6203      	str	r3, [r0, #32]
 80023b8:	bd70      	pop	{r4, r5, r6, pc}
 80023ba:	bf00      	nop
 80023bc:	40010000 	.word	0x40010000
 80023c0:	40010400 	.word	0x40010400

080023c4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023c4:	6a03      	ldr	r3, [r0, #32]
 80023c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023ca:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023cc:	6a03      	ldr	r3, [r0, #32]
{
 80023ce:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023d0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023d2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023d4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023d6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80023da:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023dc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80023de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023e2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023e6:	4d11      	ldr	r5, [pc, #68]	; (800242c <TIM_OC3_SetConfig+0x68>)
 80023e8:	42a8      	cmp	r0, r5
 80023ea:	d003      	beq.n	80023f4 <TIM_OC3_SetConfig+0x30>
 80023ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80023f0:	42a8      	cmp	r0, r5
 80023f2:	d114      	bne.n	800241e <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023f4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80023f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023fa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023fe:	4d0b      	ldr	r5, [pc, #44]	; (800242c <TIM_OC3_SetConfig+0x68>)
 8002400:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8002402:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002406:	d003      	beq.n	8002410 <TIM_OC3_SetConfig+0x4c>
 8002408:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800240c:	42a8      	cmp	r0, r5
 800240e:	d106      	bne.n	800241e <TIM_OC3_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002410:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002412:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002414:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002418:	4335      	orrs	r5, r6
 800241a:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800241e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002420:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002422:	684a      	ldr	r2, [r1, #4]
 8002424:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002426:	6203      	str	r3, [r0, #32]
 8002428:	bd70      	pop	{r4, r5, r6, pc}
 800242a:	bf00      	nop
 800242c:	40010000 	.word	0x40010000

08002430 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002430:	6a03      	ldr	r3, [r0, #32]
 8002432:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002436:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002438:	6a03      	ldr	r3, [r0, #32]
{
 800243a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800243c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800243e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002440:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002442:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002446:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800244a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800244c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002450:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002454:	4d08      	ldr	r5, [pc, #32]	; (8002478 <TIM_OC4_SetConfig+0x48>)
 8002456:	42a8      	cmp	r0, r5
 8002458:	d003      	beq.n	8002462 <TIM_OC4_SetConfig+0x32>
 800245a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800245e:	42a8      	cmp	r0, r5
 8002460:	d104      	bne.n	800246c <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002462:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002464:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002468:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800246c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800246e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002470:	684a      	ldr	r2, [r1, #4]
 8002472:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002474:	6203      	str	r3, [r0, #32]
 8002476:	bd30      	pop	{r4, r5, pc}
 8002478:	40010000 	.word	0x40010000

0800247c <HAL_TIM_PWM_MspInit>:
 800247c:	4770      	bx	lr
	...

08002480 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002480:	4a30      	ldr	r2, [pc, #192]	; (8002544 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002482:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002484:	4290      	cmp	r0, r2
 8002486:	d012      	beq.n	80024ae <TIM_Base_SetConfig+0x2e>
 8002488:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800248c:	d00f      	beq.n	80024ae <TIM_Base_SetConfig+0x2e>
 800248e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002492:	4290      	cmp	r0, r2
 8002494:	d00b      	beq.n	80024ae <TIM_Base_SetConfig+0x2e>
 8002496:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800249a:	4290      	cmp	r0, r2
 800249c:	d007      	beq.n	80024ae <TIM_Base_SetConfig+0x2e>
 800249e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024a2:	4290      	cmp	r0, r2
 80024a4:	d003      	beq.n	80024ae <TIM_Base_SetConfig+0x2e>
 80024a6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80024aa:	4290      	cmp	r0, r2
 80024ac:	d119      	bne.n	80024e2 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 80024ae:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80024b4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024b6:	4a23      	ldr	r2, [pc, #140]	; (8002544 <TIM_Base_SetConfig+0xc4>)
 80024b8:	4290      	cmp	r0, r2
 80024ba:	d029      	beq.n	8002510 <TIM_Base_SetConfig+0x90>
 80024bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80024c0:	d026      	beq.n	8002510 <TIM_Base_SetConfig+0x90>
 80024c2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80024c6:	4290      	cmp	r0, r2
 80024c8:	d022      	beq.n	8002510 <TIM_Base_SetConfig+0x90>
 80024ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024ce:	4290      	cmp	r0, r2
 80024d0:	d01e      	beq.n	8002510 <TIM_Base_SetConfig+0x90>
 80024d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024d6:	4290      	cmp	r0, r2
 80024d8:	d01a      	beq.n	8002510 <TIM_Base_SetConfig+0x90>
 80024da:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80024de:	4290      	cmp	r0, r2
 80024e0:	d016      	beq.n	8002510 <TIM_Base_SetConfig+0x90>
 80024e2:	4a19      	ldr	r2, [pc, #100]	; (8002548 <TIM_Base_SetConfig+0xc8>)
 80024e4:	4290      	cmp	r0, r2
 80024e6:	d013      	beq.n	8002510 <TIM_Base_SetConfig+0x90>
 80024e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024ec:	4290      	cmp	r0, r2
 80024ee:	d00f      	beq.n	8002510 <TIM_Base_SetConfig+0x90>
 80024f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024f4:	4290      	cmp	r0, r2
 80024f6:	d00b      	beq.n	8002510 <TIM_Base_SetConfig+0x90>
 80024f8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80024fc:	4290      	cmp	r0, r2
 80024fe:	d007      	beq.n	8002510 <TIM_Base_SetConfig+0x90>
 8002500:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002504:	4290      	cmp	r0, r2
 8002506:	d003      	beq.n	8002510 <TIM_Base_SetConfig+0x90>
 8002508:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800250c:	4290      	cmp	r0, r2
 800250e:	d103      	bne.n	8002518 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002510:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002516:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002518:	694a      	ldr	r2, [r1, #20]
 800251a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800251e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002520:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002522:	688b      	ldr	r3, [r1, #8]
 8002524:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002526:	680b      	ldr	r3, [r1, #0]
 8002528:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <TIM_Base_SetConfig+0xc4>)
 800252c:	4298      	cmp	r0, r3
 800252e:	d003      	beq.n	8002538 <TIM_Base_SetConfig+0xb8>
 8002530:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002534:	4298      	cmp	r0, r3
 8002536:	d101      	bne.n	800253c <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8002538:	690b      	ldr	r3, [r1, #16]
 800253a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800253c:	2301      	movs	r3, #1
 800253e:	6143      	str	r3, [r0, #20]
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40010000 	.word	0x40010000
 8002548:	40014000 	.word	0x40014000

0800254c <HAL_TIM_Base_Init>:
{
 800254c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800254e:	4604      	mov	r4, r0
 8002550:	b1a0      	cbz	r0, 800257c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002552:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002556:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800255a:	b91b      	cbnz	r3, 8002564 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800255c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002560:	f001 f864 	bl	800362c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002564:	2302      	movs	r3, #2
 8002566:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800256a:	6820      	ldr	r0, [r4, #0]
 800256c:	1d21      	adds	r1, r4, #4
 800256e:	f7ff ff87 	bl	8002480 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002572:	2301      	movs	r3, #1
 8002574:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002578:	2000      	movs	r0, #0
 800257a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800257c:	2001      	movs	r0, #1
}
 800257e:	bd10      	pop	{r4, pc}

08002580 <HAL_TIM_PWM_Init>:
{
 8002580:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002582:	4604      	mov	r4, r0
 8002584:	b1a0      	cbz	r0, 80025b0 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002586:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800258a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800258e:	b91b      	cbnz	r3, 8002598 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002590:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002594:	f7ff ff72 	bl	800247c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002598:	2302      	movs	r3, #2
 800259a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800259e:	6820      	ldr	r0, [r4, #0]
 80025a0:	1d21      	adds	r1, r4, #4
 80025a2:	f7ff ff6d 	bl	8002480 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80025a6:	2301      	movs	r3, #1
 80025a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80025ac:	2000      	movs	r0, #0
 80025ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80025b0:	2001      	movs	r0, #1
}
 80025b2:	bd10      	pop	{r4, pc}

080025b4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025b4:	6a03      	ldr	r3, [r0, #32]
 80025b6:	f023 0310 	bic.w	r3, r3, #16
 80025ba:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80025bc:	6a03      	ldr	r3, [r0, #32]
{
 80025be:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 80025c0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80025c2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025c4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025c6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025ca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025ce:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80025d0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025d4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025d8:	4d10      	ldr	r5, [pc, #64]	; (800261c <TIM_OC2_SetConfig+0x68>)
 80025da:	42a8      	cmp	r0, r5
 80025dc:	d003      	beq.n	80025e6 <TIM_OC2_SetConfig+0x32>
 80025de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025e2:	42a8      	cmp	r0, r5
 80025e4:	d114      	bne.n	8002610 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025e6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80025e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025ec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025f0:	4d0a      	ldr	r5, [pc, #40]	; (800261c <TIM_OC2_SetConfig+0x68>)
 80025f2:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80025f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025f8:	d003      	beq.n	8002602 <TIM_OC2_SetConfig+0x4e>
 80025fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025fe:	42a8      	cmp	r0, r5
 8002600:	d106      	bne.n	8002610 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002602:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002604:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002606:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800260a:	4335      	orrs	r5, r6
 800260c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002610:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002612:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002614:	684a      	ldr	r2, [r1, #4]
 8002616:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002618:	6203      	str	r3, [r0, #32]
 800261a:	bd70      	pop	{r4, r5, r6, pc}
 800261c:	40010000 	.word	0x40010000

08002620 <HAL_TIM_PWM_ConfigChannel>:
{
 8002620:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002622:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002626:	2b01      	cmp	r3, #1
{
 8002628:	4604      	mov	r4, r0
 800262a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800262e:	d025      	beq.n	800267c <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002630:	2301      	movs	r3, #1
 8002632:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002636:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 800263a:	2a0c      	cmp	r2, #12
 800263c:	d818      	bhi.n	8002670 <HAL_TIM_PWM_ConfigChannel+0x50>
 800263e:	e8df f002 	tbb	[pc, r2]
 8002642:	1707      	.short	0x1707
 8002644:	171e1717 	.word	0x171e1717
 8002648:	172f1717 	.word	0x172f1717
 800264c:	1717      	.short	0x1717
 800264e:	40          	.byte	0x40
 800264f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002650:	6820      	ldr	r0, [r4, #0]
 8002652:	f7ff fe85 	bl	8002360 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002656:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002658:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800265a:	699a      	ldr	r2, [r3, #24]
 800265c:	f042 0208 	orr.w	r2, r2, #8
 8002660:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002662:	699a      	ldr	r2, [r3, #24]
 8002664:	f022 0204 	bic.w	r2, r2, #4
 8002668:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800266a:	699a      	ldr	r2, [r3, #24]
 800266c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800266e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002670:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002672:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002674:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002678:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800267c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800267e:	6820      	ldr	r0, [r4, #0]
 8002680:	f7ff ff98 	bl	80025b4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002684:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002686:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800268e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800269e:	e7e6      	b.n	800266e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026a0:	6820      	ldr	r0, [r4, #0]
 80026a2:	f7ff fe8f 	bl	80023c4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026a6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026a8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026aa:	69da      	ldr	r2, [r3, #28]
 80026ac:	f042 0208 	orr.w	r2, r2, #8
 80026b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026b2:	69da      	ldr	r2, [r3, #28]
 80026b4:	f022 0204 	bic.w	r2, r2, #4
 80026b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026ba:	69da      	ldr	r2, [r3, #28]
 80026bc:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026be:	61da      	str	r2, [r3, #28]
      break;
 80026c0:	e7d6      	b.n	8002670 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026c2:	6820      	ldr	r0, [r4, #0]
 80026c4:	f7ff feb4 	bl	8002430 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026c8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026ca:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026cc:	69da      	ldr	r2, [r3, #28]
 80026ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026d2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026d4:	69da      	ldr	r2, [r3, #28]
 80026d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026dc:	69da      	ldr	r2, [r3, #28]
 80026de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80026e2:	e7ec      	b.n	80026be <HAL_TIM_PWM_ConfigChannel+0x9e>

080026e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026e4:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026e6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026e8:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026ea:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026ee:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80026f2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026f4:	6083      	str	r3, [r0, #8]
 80026f6:	bd10      	pop	{r4, pc}

080026f8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80026f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80026fc:	2b01      	cmp	r3, #1
{
 80026fe:	b570      	push	{r4, r5, r6, lr}
 8002700:	4604      	mov	r4, r0
 8002702:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002706:	d019      	beq.n	800273c <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 8002708:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800270c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800270e:	2301      	movs	r3, #1
 8002710:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002714:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800271a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800271e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002720:	680b      	ldr	r3, [r1, #0]
 8002722:	2b40      	cmp	r3, #64	; 0x40
 8002724:	d065      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0xfa>
 8002726:	d815      	bhi.n	8002754 <HAL_TIM_ConfigClockSource+0x5c>
 8002728:	2b10      	cmp	r3, #16
 800272a:	d00c      	beq.n	8002746 <HAL_TIM_ConfigClockSource+0x4e>
 800272c:	d807      	bhi.n	800273e <HAL_TIM_ConfigClockSource+0x46>
 800272e:	b153      	cbz	r3, 8002746 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 8002730:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002732:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002734:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002738:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800273c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800273e:	2b20      	cmp	r3, #32
 8002740:	d001      	beq.n	8002746 <HAL_TIM_ConfigClockSource+0x4e>
 8002742:	2b30      	cmp	r3, #48	; 0x30
 8002744:	d1f4      	bne.n	8002730 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 8002746:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002748:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800274c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002750:	4313      	orrs	r3, r2
 8002752:	e01a      	b.n	800278a <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8002754:	2b60      	cmp	r3, #96	; 0x60
 8002756:	d034      	beq.n	80027c2 <HAL_TIM_ConfigClockSource+0xca>
 8002758:	d819      	bhi.n	800278e <HAL_TIM_ConfigClockSource+0x96>
 800275a:	2b50      	cmp	r3, #80	; 0x50
 800275c:	d1e8      	bne.n	8002730 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800275e:	684a      	ldr	r2, [r1, #4]
 8002760:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002762:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002764:	6a05      	ldr	r5, [r0, #32]
 8002766:	f025 0501 	bic.w	r5, r5, #1
 800276a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800276c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800276e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002772:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002776:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800277a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800277c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800277e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002780:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002786:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800278a:	6083      	str	r3, [r0, #8]
 800278c:	e7d0      	b.n	8002730 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 800278e:	2b70      	cmp	r3, #112	; 0x70
 8002790:	d00c      	beq.n	80027ac <HAL_TIM_ConfigClockSource+0xb4>
 8002792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002796:	d1cb      	bne.n	8002730 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8002798:	68cb      	ldr	r3, [r1, #12]
 800279a:	684a      	ldr	r2, [r1, #4]
 800279c:	6889      	ldr	r1, [r1, #8]
 800279e:	f7ff ffa1 	bl	80026e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027a2:	6822      	ldr	r2, [r4, #0]
 80027a4:	6893      	ldr	r3, [r2, #8]
 80027a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027aa:	e008      	b.n	80027be <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80027ac:	68cb      	ldr	r3, [r1, #12]
 80027ae:	684a      	ldr	r2, [r1, #4]
 80027b0:	6889      	ldr	r1, [r1, #8]
 80027b2:	f7ff ff97 	bl	80026e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027b6:	6822      	ldr	r2, [r4, #0]
 80027b8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027be:	6093      	str	r3, [r2, #8]
      break;
 80027c0:	e7b6      	b.n	8002730 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027c2:	684d      	ldr	r5, [r1, #4]
 80027c4:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027c6:	6a01      	ldr	r1, [r0, #32]
 80027c8:	f021 0110 	bic.w	r1, r1, #16
 80027cc:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027ce:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80027d0:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027d2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80027da:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027de:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80027e2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80027e4:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80027e6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80027e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027ec:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80027f0:	e7cb      	b.n	800278a <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027f2:	684a      	ldr	r2, [r1, #4]
 80027f4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80027f6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027f8:	6a05      	ldr	r5, [r0, #32]
 80027fa:	f025 0501 	bic.w	r5, r5, #1
 80027fe:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002800:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002802:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800280a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800280e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002810:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002812:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002814:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800281a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800281e:	e7b4      	b.n	800278a <HAL_TIM_ConfigClockSource+0x92>

08002820 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002820:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002822:	f001 011f 	and.w	r1, r1, #31
{
 8002826:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002828:	2401      	movs	r4, #1
 800282a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800282c:	ea23 0304 	bic.w	r3, r3, r4
 8002830:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002832:	6a03      	ldr	r3, [r0, #32]
 8002834:	408a      	lsls	r2, r1
 8002836:	431a      	orrs	r2, r3
 8002838:	6202      	str	r2, [r0, #32]
 800283a:	bd10      	pop	{r4, pc}

0800283c <HAL_TIM_PWM_Start>:
{
 800283c:	b510      	push	{r4, lr}
 800283e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002840:	2201      	movs	r2, #1
 8002842:	6800      	ldr	r0, [r0, #0]
 8002844:	f7ff ffec 	bl	8002820 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002848:	6823      	ldr	r3, [r4, #0]
 800284a:	4a0b      	ldr	r2, [pc, #44]	; (8002878 <HAL_TIM_PWM_Start+0x3c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d00e      	beq.n	800286e <HAL_TIM_PWM_Start+0x32>
 8002850:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002854:	4293      	cmp	r3, r2
 8002856:	d00a      	beq.n	800286e <HAL_TIM_PWM_Start+0x32>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800285e:	2a06      	cmp	r2, #6
 8002860:	d003      	beq.n	800286a <HAL_TIM_PWM_Start+0x2e>
    __HAL_TIM_ENABLE(htim);
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	f042 0201 	orr.w	r2, r2, #1
 8002868:	601a      	str	r2, [r3, #0]
}
 800286a:	2000      	movs	r0, #0
 800286c:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 800286e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002870:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002874:	645a      	str	r2, [r3, #68]	; 0x44
 8002876:	e7ef      	b.n	8002858 <HAL_TIM_PWM_Start+0x1c>
 8002878:	40010000 	.word	0x40010000

0800287c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800287c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002880:	2b01      	cmp	r3, #1
{
 8002882:	b530      	push	{r4, r5, lr}
 8002884:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002888:	d014      	beq.n	80028b4 <HAL_TIMEx_MasterConfigSynchronization+0x38>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800288a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800288c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002890:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002892:	68a3      	ldr	r3, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002894:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002896:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002898:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 800289c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028a0:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028a2:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028a4:	6062      	str	r2, [r4, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80028a6:	60a3      	str	r3, [r4, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028a8:	2301      	movs	r3, #1
 80028aa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028ae:	2300      	movs	r3, #0
 80028b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80028b4:	4618      	mov	r0, r3

  return HAL_OK;
}
 80028b6:	bd30      	pop	{r4, r5, pc}

080028b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028bc:	6806      	ldr	r6, [r0, #0]
 80028be:	68c2      	ldr	r2, [r0, #12]
 80028c0:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028c2:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028c8:	4313      	orrs	r3, r2
 80028ca:	6133      	str	r3, [r6, #16]
{
 80028cc:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028ce:	6883      	ldr	r3, [r0, #8]
 80028d0:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80028d2:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028d4:	4303      	orrs	r3, r0
 80028d6:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80028d8:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028dc:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80028de:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028e2:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 80028e4:	4313      	orrs	r3, r2
 80028e6:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028e8:	6973      	ldr	r3, [r6, #20]
 80028ea:	69a2      	ldr	r2, [r4, #24]
 80028ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f0:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028f2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028f6:	6173      	str	r3, [r6, #20]
 80028f8:	4b7a      	ldr	r3, [pc, #488]	; (8002ae4 <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028fa:	d17c      	bne.n	80029f6 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028fc:	429e      	cmp	r6, r3
 80028fe:	d003      	beq.n	8002908 <UART_SetConfig+0x50>
 8002900:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002904:	429e      	cmp	r6, r3
 8002906:	d144      	bne.n	8002992 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002908:	f7ff fd1a 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 800290c:	2519      	movs	r5, #25
 800290e:	fb05 f300 	mul.w	r3, r5, r0
 8002912:	6860      	ldr	r0, [r4, #4]
 8002914:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002918:	0040      	lsls	r0, r0, #1
 800291a:	fbb3 f3f0 	udiv	r3, r3, r0
 800291e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002922:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002926:	f7ff fd0b 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 800292a:	6863      	ldr	r3, [r4, #4]
 800292c:	4368      	muls	r0, r5
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fbb0 f7f3 	udiv	r7, r0, r3
 8002934:	f7ff fd04 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 8002938:	6863      	ldr	r3, [r4, #4]
 800293a:	4368      	muls	r0, r5
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002942:	fbb3 f3f9 	udiv	r3, r3, r9
 8002946:	fb09 7313 	mls	r3, r9, r3, r7
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	3332      	adds	r3, #50	; 0x32
 800294e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002958:	f7ff fcf2 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 800295c:	6862      	ldr	r2, [r4, #4]
 800295e:	4368      	muls	r0, r5
 8002960:	0052      	lsls	r2, r2, #1
 8002962:	fbb0 faf2 	udiv	sl, r0, r2
 8002966:	f7ff fceb 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800296a:	6863      	ldr	r3, [r4, #4]
 800296c:	4368      	muls	r0, r5
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	fbb0 f3f3 	udiv	r3, r0, r3
 8002974:	fbb3 f3f9 	udiv	r3, r3, r9
 8002978:	fb09 a313 	mls	r3, r9, r3, sl
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	3332      	adds	r3, #50	; 0x32
 8002980:	fbb3 f3f9 	udiv	r3, r3, r9
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800298a:	443b      	add	r3, r7
 800298c:	60b3      	str	r3, [r6, #8]
 800298e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002992:	f7ff fcc5 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 8002996:	2519      	movs	r5, #25
 8002998:	fb05 f300 	mul.w	r3, r5, r0
 800299c:	6860      	ldr	r0, [r4, #4]
 800299e:	f04f 0964 	mov.w	r9, #100	; 0x64
 80029a2:	0040      	lsls	r0, r0, #1
 80029a4:	fbb3 f3f0 	udiv	r3, r3, r0
 80029a8:	fbb3 f3f9 	udiv	r3, r3, r9
 80029ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80029b0:	f7ff fcb6 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 80029b4:	6863      	ldr	r3, [r4, #4]
 80029b6:	4368      	muls	r0, r5
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	fbb0 f7f3 	udiv	r7, r0, r3
 80029be:	f7ff fcaf 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 80029c2:	6863      	ldr	r3, [r4, #4]
 80029c4:	4368      	muls	r0, r5
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80029cc:	fbb3 f3f9 	udiv	r3, r3, r9
 80029d0:	fb09 7313 	mls	r3, r9, r3, r7
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	3332      	adds	r3, #50	; 0x32
 80029d8:	fbb3 f3f9 	udiv	r3, r3, r9
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80029e2:	f7ff fc9d 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 80029e6:	6862      	ldr	r2, [r4, #4]
 80029e8:	4368      	muls	r0, r5
 80029ea:	0052      	lsls	r2, r2, #1
 80029ec:	fbb0 faf2 	udiv	sl, r0, r2
 80029f0:	f7ff fc96 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 80029f4:	e7b9      	b.n	800296a <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029f6:	429e      	cmp	r6, r3
 80029f8:	d002      	beq.n	8002a00 <UART_SetConfig+0x148>
 80029fa:	4b3b      	ldr	r3, [pc, #236]	; (8002ae8 <UART_SetConfig+0x230>)
 80029fc:	429e      	cmp	r6, r3
 80029fe:	d140      	bne.n	8002a82 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002a00:	f7ff fc9e 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 8002a04:	6867      	ldr	r7, [r4, #4]
 8002a06:	2519      	movs	r5, #25
 8002a08:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002a0c:	fb05 f300 	mul.w	r3, r5, r0
 8002a10:	00bf      	lsls	r7, r7, #2
 8002a12:	fbb3 f3f7 	udiv	r3, r3, r7
 8002a16:	fbb3 f3f9 	udiv	r3, r3, r9
 8002a1a:	011f      	lsls	r7, r3, #4
 8002a1c:	f7ff fc90 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 8002a20:	6863      	ldr	r3, [r4, #4]
 8002a22:	4368      	muls	r0, r5
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	fbb0 f8f3 	udiv	r8, r0, r3
 8002a2a:	f7ff fc89 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 8002a2e:	6863      	ldr	r3, [r4, #4]
 8002a30:	4368      	muls	r0, r5
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a38:	fbb3 f3f9 	udiv	r3, r3, r9
 8002a3c:	fb09 8313 	mls	r3, r9, r3, r8
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	3332      	adds	r3, #50	; 0x32
 8002a44:	fbb3 f3f9 	udiv	r3, r3, r9
 8002a48:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002a4c:	f7ff fc78 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 8002a50:	6862      	ldr	r2, [r4, #4]
 8002a52:	4368      	muls	r0, r5
 8002a54:	0092      	lsls	r2, r2, #2
 8002a56:	fbb0 faf2 	udiv	sl, r0, r2
 8002a5a:	f7ff fc71 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002a5e:	6863      	ldr	r3, [r4, #4]
 8002a60:	4368      	muls	r0, r5
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a68:	fbb3 f3f9 	udiv	r3, r3, r9
 8002a6c:	fb09 a313 	mls	r3, r9, r3, sl
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	3332      	adds	r3, #50	; 0x32
 8002a74:	fbb3 f3f9 	udiv	r3, r3, r9
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	ea43 0308 	orr.w	r3, r3, r8
 8002a80:	e783      	b.n	800298a <UART_SetConfig+0xd2>
 8002a82:	f7ff fc4d 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 8002a86:	6867      	ldr	r7, [r4, #4]
 8002a88:	2519      	movs	r5, #25
 8002a8a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002a8e:	fb05 f300 	mul.w	r3, r5, r0
 8002a92:	00bf      	lsls	r7, r7, #2
 8002a94:	fbb3 f3f7 	udiv	r3, r3, r7
 8002a98:	fbb3 f3f9 	udiv	r3, r3, r9
 8002a9c:	011f      	lsls	r7, r3, #4
 8002a9e:	f7ff fc3f 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 8002aa2:	6863      	ldr	r3, [r4, #4]
 8002aa4:	4368      	muls	r0, r5
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	fbb0 f8f3 	udiv	r8, r0, r3
 8002aac:	f7ff fc38 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 8002ab0:	6863      	ldr	r3, [r4, #4]
 8002ab2:	4368      	muls	r0, r5
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aba:	fbb3 f3f9 	udiv	r3, r3, r9
 8002abe:	fb09 8313 	mls	r3, r9, r3, r8
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	3332      	adds	r3, #50	; 0x32
 8002ac6:	fbb3 f3f9 	udiv	r3, r3, r9
 8002aca:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002ace:	f7ff fc27 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 8002ad2:	6862      	ldr	r2, [r4, #4]
 8002ad4:	4368      	muls	r0, r5
 8002ad6:	0092      	lsls	r2, r2, #2
 8002ad8:	fbb0 faf2 	udiv	sl, r0, r2
 8002adc:	f7ff fc20 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 8002ae0:	e7bd      	b.n	8002a5e <UART_SetConfig+0x1a6>
 8002ae2:	bf00      	nop
 8002ae4:	40011000 	.word	0x40011000
 8002ae8:	40011400 	.word	0x40011400

08002aec <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aee:	4604      	mov	r4, r0
 8002af0:	460e      	mov	r6, r1
 8002af2:	4617      	mov	r7, r2
 8002af4:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002af6:	6821      	ldr	r1, [r4, #0]
 8002af8:	680b      	ldr	r3, [r1, #0]
 8002afa:	ea36 0303 	bics.w	r3, r6, r3
 8002afe:	d101      	bne.n	8002b04 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002b00:	2000      	movs	r0, #0
}
 8002b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002b04:	1c6b      	adds	r3, r5, #1
 8002b06:	d0f7      	beq.n	8002af8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b08:	b995      	cbnz	r5, 8002b30 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b0a:	6823      	ldr	r3, [r4, #0]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b12:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b14:	695a      	ldr	r2, [r3, #20]
 8002b16:	f022 0201 	bic.w	r2, r2, #1
 8002b1a:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002b1c:	2320      	movs	r3, #32
 8002b1e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002b22:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002b26:	2300      	movs	r3, #0
 8002b28:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002b2c:	2003      	movs	r0, #3
 8002b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b30:	f7ff f82a 	bl	8001b88 <HAL_GetTick>
 8002b34:	1bc0      	subs	r0, r0, r7
 8002b36:	4285      	cmp	r5, r0
 8002b38:	d2dd      	bcs.n	8002af6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002b3a:	e7e6      	b.n	8002b0a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002b3c <HAL_UART_Init>:
{
 8002b3c:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002b3e:	4604      	mov	r4, r0
 8002b40:	b340      	cbz	r0, 8002b94 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002b42:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002b46:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b4a:	b91b      	cbnz	r3, 8002b54 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002b4c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002b50:	f000 fe46 	bl	80037e0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002b54:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002b56:	2324      	movs	r3, #36	; 0x24
 8002b58:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002b5c:	68d3      	ldr	r3, [r2, #12]
 8002b5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b62:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002b64:	4620      	mov	r0, r4
 8002b66:	f7ff fea7 	bl	80028b8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b6a:	6823      	ldr	r3, [r4, #0]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b72:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b7a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b82:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b84:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002b86:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b88:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002b8a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002b8e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002b92:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002b94:	2001      	movs	r0, #1
}
 8002b96:	bd10      	pop	{r4, pc}

08002b98 <HAL_UART_Transmit>:
{
 8002b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b9c:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002b9e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002ba2:	2b20      	cmp	r3, #32
{
 8002ba4:	4604      	mov	r4, r0
 8002ba6:	460d      	mov	r5, r1
 8002ba8:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002baa:	d14f      	bne.n	8002c4c <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8002bac:	2900      	cmp	r1, #0
 8002bae:	d04a      	beq.n	8002c46 <HAL_UART_Transmit+0xae>
 8002bb0:	2a00      	cmp	r2, #0
 8002bb2:	d048      	beq.n	8002c46 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8002bb4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d047      	beq.n	8002c4c <HAL_UART_Transmit+0xb4>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bc6:	2321      	movs	r3, #33	; 0x21
 8002bc8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002bcc:	f7fe ffdc 	bl	8001b88 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002bd0:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002bd4:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002bd6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002bda:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	b96b      	cbnz	r3, 8002bfc <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002be0:	463b      	mov	r3, r7
 8002be2:	4632      	mov	r2, r6
 8002be4:	2140      	movs	r1, #64	; 0x40
 8002be6:	4620      	mov	r0, r4
 8002be8:	f7ff ff80 	bl	8002aec <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002bec:	b9b0      	cbnz	r0, 8002c1c <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8002bee:	2320      	movs	r3, #32
 8002bf0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002bf4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002bfc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c04:	68a3      	ldr	r3, [r4, #8]
 8002c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c0a:	4632      	mov	r2, r6
 8002c0c:	463b      	mov	r3, r7
 8002c0e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002c12:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c14:	d10e      	bne.n	8002c34 <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c16:	f7ff ff69 	bl	8002aec <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002c1a:	b110      	cbz	r0, 8002c22 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002c1c:	2003      	movs	r0, #3
 8002c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002c22:	882b      	ldrh	r3, [r5, #0]
 8002c24:	6822      	ldr	r2, [r4, #0]
 8002c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c2a:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002c2c:	6923      	ldr	r3, [r4, #16]
 8002c2e:	b943      	cbnz	r3, 8002c42 <HAL_UART_Transmit+0xaa>
          pData += 2U;
 8002c30:	3502      	adds	r5, #2
 8002c32:	e7d2      	b.n	8002bda <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c34:	f7ff ff5a 	bl	8002aec <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002c38:	2800      	cmp	r0, #0
 8002c3a:	d1ef      	bne.n	8002c1c <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002c3c:	6823      	ldr	r3, [r4, #0]
 8002c3e:	782a      	ldrb	r2, [r5, #0]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	3501      	adds	r5, #1
 8002c44:	e7c9      	b.n	8002bda <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002c46:	2001      	movs	r0, #1
 8002c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002c4c:	2002      	movs	r0, #2
}
 8002c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002c54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	2214      	movs	r2, #20
{
 8002c5a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5c:	eb0d 0002 	add.w	r0, sp, r2
 8002c60:	2100      	movs	r1, #0
 8002c62:	f000 fe49 	bl	80038f8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c66:	2400      	movs	r4, #0
 8002c68:	4b4f      	ldr	r3, [pc, #316]	; (8002da8 <MX_GPIO_Init+0x154>)
 8002c6a:	9400      	str	r4, [sp, #0]
 8002c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FIFO_WEN_Pin|FIFO_RRST_Pin|FIFO_OE_Pin|FIFO_RCK_Pin 
 8002c6e:	4f4f      	ldr	r7, [pc, #316]	; (8002dac <MX_GPIO_Init+0x158>)
                          |OLED_CS1_Pin|OLED_CS0_Pin|OLED_SDO_Pin|OLED_SDI_Pin 
                          |OLED_CLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8002c70:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8002db8 <MX_GPIO_Init+0x164>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCCB_SCL_Pin|SCCB_SDA_Pin, GPIO_PIN_SET);
 8002c74:	4e4e      	ldr	r6, [pc, #312]	; (8002db0 <MX_GPIO_Init+0x15c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c76:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8002dbc <MX_GPIO_Init+0x168>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c7a:	f042 0204 	orr.w	r2, r2, #4
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c82:	f002 0204 	and.w	r2, r2, #4
 8002c86:	9200      	str	r2, [sp, #0]
 8002c88:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c8a:	9401      	str	r4, [sp, #4]
 8002c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30
 8002c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c96:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002c9a:	9201      	str	r2, [sp, #4]
 8002c9c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c9e:	9402      	str	r4, [sp, #8]
 8002ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002caa:	f002 0201 	and.w	r2, r2, #1
 8002cae:	9202      	str	r2, [sp, #8]
 8002cb0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb2:	9403      	str	r4, [sp, #12]
 8002cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cb6:	f042 0202 	orr.w	r2, r2, #2
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
 8002cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cbe:	f002 0202 	and.w	r2, r2, #2
 8002cc2:	9203      	str	r2, [sp, #12]
 8002cc4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cc6:	9404      	str	r4, [sp, #16]
 8002cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cca:	f042 0208 	orr.w	r2, r2, #8
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, FIFO_WEN_Pin|FIFO_RRST_Pin|FIFO_OE_Pin|FIFO_RCK_Pin 
 8002cd8:	4622      	mov	r2, r4
 8002cda:	4638      	mov	r0, r7
 8002cdc:	f641 713c 	movw	r1, #7996	; 0x1f3c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ce0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, FIFO_WEN_Pin|FIFO_RRST_Pin|FIFO_OE_Pin|FIFO_RCK_Pin 
 8002ce2:	f7ff f8bb 	bl	8001e5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8002ce6:	4622      	mov	r2, r4
 8002ce8:	4648      	mov	r0, r9
 8002cea:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002cee:	f7ff f8b5 	bl	8001e5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SCCB_SCL_Pin|SCCB_SDA_Pin, GPIO_PIN_SET);
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	4630      	mov	r0, r6
 8002cf6:	2160      	movs	r1, #96	; 0x60
 8002cf8:	f7ff f8b0 	bl	8001e5c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = FIFO_WEN_Pin|FIFO_RRST_Pin|FIFO_OE_Pin|FIFO_RCK_Pin;
 8002cfc:	233c      	movs	r3, #60	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cfe:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = FIFO_WEN_Pin|FIFO_RRST_Pin|FIFO_OE_Pin|FIFO_RCK_Pin;
 8002d00:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d02:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d04:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d06:	4638      	mov	r0, r7
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d08:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d0a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d0e:	f7fe ffbf 	bl	8001c90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d12:	a905      	add	r1, sp, #20
 8002d14:	4827      	ldr	r0, [pc, #156]	; (8002db4 <MX_GPIO_Init+0x160>)
  GPIO_InitStruct.Pin = B1_Pin;
 8002d16:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d18:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d1e:	f7fe ffb7 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BIT2_Pin|BIT3_Pin|BIT4_Pin|BIT5_Pin 
 8002d22:	f44f 437f 	mov.w	r3, #65280	; 0xff00
                          |BIT6_Pin|BIT7_Pin|BIT0_Pin|BIT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d26:	a905      	add	r1, sp, #20
 8002d28:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = BIT2_Pin|BIT3_Pin|BIT4_Pin|BIT5_Pin 
 8002d2a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d2c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d30:	f7fe ffae 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8002d34:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d38:	a905      	add	r1, sp, #20
 8002d3a:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8002d3c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d3e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d42:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d44:	f7fe ffa4 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = OLED_CS1_Pin|OLED_CS0_Pin|OLED_SDO_Pin|OLED_SDI_Pin 
 8002d48:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
                          |OLED_CLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d4c:	a905      	add	r1, sp, #20
 8002d4e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = OLED_CS1_Pin|OLED_CS0_Pin|OLED_SDO_Pin|OLED_SDI_Pin 
 8002d50:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d52:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d54:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d56:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d58:	f7fe ff9a 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SCCB_SCL_Pin|SCCB_SDA_Pin;
 8002d5c:	2360      	movs	r3, #96	; 0x60
 8002d5e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d60:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002d62:	2311      	movs	r3, #17
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d64:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002d66:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d68:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d6c:	f7fe ff90 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VSYNC_EXTI_Pin;
 8002d70:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VSYNC_EXTI_GPIO_Port, &GPIO_InitStruct);
 8002d72:	a905      	add	r1, sp, #20
 8002d74:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = VSYNC_EXTI_Pin;
 8002d76:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d78:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(VSYNC_EXTI_GPIO_Port, &GPIO_InitStruct);
 8002d7e:	f7fe ff87 	bl	8001c90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002d82:	4622      	mov	r2, r4
 8002d84:	4621      	mov	r1, r4
 8002d86:	2006      	movs	r0, #6
 8002d88:	f7fe ff2a 	bl	8001be0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002d8c:	2006      	movs	r0, #6
 8002d8e:	f7fe ff5b 	bl	8001c48 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 1);
 8002d92:	462a      	mov	r2, r5
 8002d94:	4621      	mov	r1, r4
 8002d96:	2017      	movs	r0, #23
 8002d98:	f7fe ff22 	bl	8001be0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002d9c:	2017      	movs	r0, #23
 8002d9e:	f7fe ff53 	bl	8001c48 <HAL_NVIC_EnableIRQ>

}
 8002da2:	b00b      	add	sp, #44	; 0x2c
 8002da4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40020800 	.word	0x40020800
 8002db0:	40020400 	.word	0x40020400
 8002db4:	40020000 	.word	0x40020000
 8002db8:	40020c00 	.word	0x40020c00
 8002dbc:	10210000 	.word	0x10210000

08002dc0 <find_center_line>:
  }
}

void find_center_line(unsigned char (*image_bin)[IMAGE_SIZE],
    unsigned char *line_flag_list, unsigned char *line_pos_list)
{
 8002dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dc4:	b085      	sub	sp, #20
 8002dc6:	f102 031b 	add.w	r3, r2, #27
  unsigned int i, j;
  unsigned int l_edge = 0, r_edge = IMAGE_SIZE;
 8002dca:	f04f 0800 	mov.w	r8, #0
 8002dce:	f102 39ff 	add.w	r9, r2, #4294967295
 8002dd2:	460d      	mov	r5, r1
 8002dd4:	4607      	mov	r7, r0
 8002dd6:	9301      	str	r3, [sp, #4]
 8002dd8:	f04f 0a1c 	mov.w	sl, #28
{
 8002ddc:	46c3      	mov	fp, r8
 8002dde:	463c      	mov	r4, r7
 8002de0:	2601      	movs	r6, #1
 8002de2:	2100      	movs	r1, #0
  for (i = 0; i < IMAGE_SIZE; i++)
  {
    mul_flag = 1;
    for (j = 0; j < IMAGE_SIZE - 1; j++)
    {
      delta = image_bin[i][j] - image_bin[i][j + 1];
 8002de4:	7820      	ldrb	r0, [r4, #0]
 8002de6:	f894 e001 	ldrb.w	lr, [r4, #1]
      switch (delta)
 8002dea:	ebb0 000e 	subs.w	r0, r0, lr
 8002dee:	4622      	mov	r2, r4
      delta = image_bin[i][j] - image_bin[i][j + 1];
 8002df0:	f101 0301 	add.w	r3, r1, #1
      switch (delta)
 8002df4:	d006      	beq.n	8002e04 <find_center_line+0x44>
 8002df6:	2801      	cmp	r0, #1
 8002df8:	d003      	beq.n	8002e02 <find_center_line+0x42>
 8002dfa:	3001      	adds	r0, #1
 8002dfc:	d11c      	bne.n	8002e38 <find_center_line+0x78>
      case 1:
        l_edge = j;
        break;
      case -1:
        r_edge = j;
        break;
 8002dfe:	468a      	mov	sl, r1
 8002e00:	e000      	b.n	8002e04 <find_center_line+0x44>
      switch (delta)
 8002e02:	4688      	mov	r8, r1

      default:
        print_str("find_center_line Error", 1);
      }
      mul_flag *= image_bin[i][j];
 8002e04:	7812      	ldrb	r2, [r2, #0]
    for (j = 0; j < IMAGE_SIZE - 1; j++)
 8002e06:	2b1b      	cmp	r3, #27
 8002e08:	f104 0401 	add.w	r4, r4, #1
      mul_flag *= image_bin[i][j];
 8002e0c:	fb02 f606 	mul.w	r6, r2, r6
 8002e10:	4619      	mov	r1, r3
    for (j = 0; j < IMAGE_SIZE - 1; j++)
 8002e12:	d1e7      	bne.n	8002de4 <find_center_line+0x24>
    }
    // store flag
    if (mul_flag)
 8002e14:	b1ce      	cbz	r6, 8002e4a <find_center_line+0x8a>
    {
      line_flag_list[i] = 0;
 8002e16:	f885 b000 	strb.w	fp, [r5]
    else
    {
      line_flag_list[i] = 1;
    }
    // store position
    line_pos_list[i] = (int) ((l_edge + r_edge) / 2);
 8002e1a:	eb08 030a 	add.w	r3, r8, sl
 8002e1e:	085b      	lsrs	r3, r3, #1
 8002e20:	f809 3f01 	strb.w	r3, [r9, #1]!
  for (i = 0; i < IMAGE_SIZE; i++)
 8002e24:	9b01      	ldr	r3, [sp, #4]
 8002e26:	454b      	cmp	r3, r9
 8002e28:	f105 0501 	add.w	r5, r5, #1
 8002e2c:	f107 071c 	add.w	r7, r7, #28
 8002e30:	d1d5      	bne.n	8002dde <find_center_line+0x1e>
  }
}
 8002e32:	b005      	add	sp, #20
 8002e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        print_str("find_center_line Error", 1);
 8002e38:	2101      	movs	r1, #1
 8002e3a:	4806      	ldr	r0, [pc, #24]	; (8002e54 <find_center_line+0x94>)
 8002e3c:	9302      	str	r3, [sp, #8]
 8002e3e:	9403      	str	r4, [sp, #12]
 8002e40:	f000 fb16 	bl	8003470 <print_str>
 8002e44:	9a03      	ldr	r2, [sp, #12]
 8002e46:	9b02      	ldr	r3, [sp, #8]
 8002e48:	e7dc      	b.n	8002e04 <find_center_line+0x44>
      line_flag_list[i] = 1;
 8002e4a:	f04f 0301 	mov.w	r3, #1
 8002e4e:	702b      	strb	r3, [r5, #0]
 8002e50:	e7e3      	b.n	8002e1a <find_center_line+0x5a>
 8002e52:	bf00      	nop
 8002e54:	0800622c 	.word	0x0800622c

08002e58 <print_list>:

// print list
void print_list(unsigned char *list)
{
 8002e58:	b570      	push	{r4, r5, r6, lr}
  unsigned int i;
  for (i = 0; i < IMAGE_SIZE; i++)
  {
    print_int(list[i], 0);
    print_str(" ", 0);
 8002e5a:	4e0a      	ldr	r6, [pc, #40]	; (8002e84 <print_list+0x2c>)
 8002e5c:	1e45      	subs	r5, r0, #1
 8002e5e:	f100 041b 	add.w	r4, r0, #27
    print_int(list[i], 0);
 8002e62:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8002e66:	2100      	movs	r1, #0
 8002e68:	f000 fb1c 	bl	80034a4 <print_int>
    print_str(" ", 0);
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4630      	mov	r0, r6
 8002e70:	f000 fafe 	bl	8003470 <print_str>
  for (i = 0; i < IMAGE_SIZE; i++)
 8002e74:	42a5      	cmp	r5, r4
 8002e76:	d1f4      	bne.n	8002e62 <print_list+0xa>
  }
  print_str("\r\n", 0);
 8002e78:	2100      	movs	r1, #0
 8002e7a:	4803      	ldr	r0, [pc, #12]	; (8002e88 <print_list+0x30>)
}
 8002e7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  print_str("\r\n", 0);
 8002e80:	f000 baf6 	b.w	8003470 <print_str>
 8002e84:	0800624a 	.word	0x0800624a
 8002e88:	08006243 	.word	0x08006243

08002e8c <show_image_bin>:
  }
}

// show image
void show_image_bin(unsigned char (*image)[IMAGE_SIZE])
{
 8002e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  unsigned int i, j;
  for (i = 0; i < IMAGE_SIZE; i++)
  {
    print_int(i, 0);
    if(i<10)
    {print_str(" ", 0);}
 8002e90:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8002eec <show_image_bin+0x60>
      {
        print_str("++", 0);
      }
      else
      {
        print_str("  ", 0);
 8002e94:	4f13      	ldr	r7, [pc, #76]	; (8002ee4 <show_image_bin+0x58>)
 8002e96:	f100 051b 	add.w	r5, r0, #27
  for (i = 0; i < IMAGE_SIZE; i++)
 8002e9a:	2400      	movs	r4, #0
    print_int(i, 0);
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f000 fb00 	bl	80034a4 <print_int>
    if(i<10)
 8002ea4:	2c09      	cmp	r4, #9
 8002ea6:	d803      	bhi.n	8002eb0 <show_image_bin+0x24>
    {print_str(" ", 0);}
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4640      	mov	r0, r8
 8002eac:	f000 fae0 	bl	8003470 <print_str>
        print_str("++", 0);
 8002eb0:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8002ef0 <show_image_bin+0x64>
 8002eb4:	f1a5 061c 	sub.w	r6, r5, #28
      if (image[i][j] > 0)
 8002eb8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002ebc:	b181      	cbz	r1, 8002ee0 <show_image_bin+0x54>
        print_str("++", 0);
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4648      	mov	r0, r9
        print_str("  ", 0);
 8002ec2:	f000 fad5 	bl	8003470 <print_str>
    for (j = 0; j < IMAGE_SIZE; j++)
 8002ec6:	42b5      	cmp	r5, r6
 8002ec8:	d1f6      	bne.n	8002eb8 <show_image_bin+0x2c>
      }
    }
    print_str("\r\n", 0);
 8002eca:	2100      	movs	r1, #0
 8002ecc:	4806      	ldr	r0, [pc, #24]	; (8002ee8 <show_image_bin+0x5c>)
  for (i = 0; i < IMAGE_SIZE; i++)
 8002ece:	3401      	adds	r4, #1
    print_str("\r\n", 0);
 8002ed0:	f000 face 	bl	8003470 <print_str>
  for (i = 0; i < IMAGE_SIZE; i++)
 8002ed4:	2c1c      	cmp	r4, #28
 8002ed6:	f105 051c 	add.w	r5, r5, #28
 8002eda:	d1df      	bne.n	8002e9c <show_image_bin+0x10>
  }
}
 8002edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        print_str("  ", 0);
 8002ee0:	4638      	mov	r0, r7
 8002ee2:	e7ee      	b.n	8002ec2 <show_image_bin+0x36>
 8002ee4:	08006249 	.word	0x08006249
 8002ee8:	08006243 	.word	0x08006243
 8002eec:	0800624a 	.word	0x0800624a
 8002ef0:	08006246 	.word	0x08006246

08002ef4 <OV7670_StoreFrameSliced_QQVGA_28_28>:
  }
  print_str("\n", 0);
}

void OV7670_StoreFrameSliced_QQVGA_28_28(uint8_t binarize)
{
 8002ef4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  unsigned int a, b, c_data;
  unsigned int i = 0, j = 0;
 8002ef8:	2400      	movs	r4, #0

  for (a = 0; a < H; a++)
  {  // rows
    for (b = 0; b < W; b++)
    {  // columns
      FIFO_RCK_L();
 8002efa:	4f2c      	ldr	r7, [pc, #176]	; (8002fac <OV7670_StoreFrameSliced_QQVGA_28_28+0xb8>)
      asm("NOP");
      asm("NOP");
      c_data = GPIOB->IDR & 0xff00;        // read high-8 bits
 8002efc:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8002fbc <OV7670_StoreFrameSliced_QQVGA_28_28+0xc8>
{
 8002f00:	4680      	mov	r8, r0
  unsigned int i = 0, j = 0;
 8002f02:	4626      	mov	r6, r4
  for (a = 0; a < H; a++)
 8002f04:	46a2      	mov	sl, r4
{
 8002f06:	f06f 0521 	mvn.w	r5, #33	; 0x21
      FIFO_RCK_L();
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	2120      	movs	r1, #32
 8002f0e:	4638      	mov	r0, r7
 8002f10:	f7fe ffa4 	bl	8001e5c <HAL_GPIO_WritePin>
      asm("NOP");
 8002f14:	bf00      	nop
      asm("NOP");
 8002f16:	bf00      	nop
      FIFO_RCK_H();
 8002f18:	2201      	movs	r2, #1
 8002f1a:	2120      	movs	r1, #32
 8002f1c:	4638      	mov	r0, r7
      c_data = GPIOB->IDR & 0xff00;        // read high-8 bits
 8002f1e:	f8d9 b010 	ldr.w	fp, [r9, #16]
      FIFO_RCK_H();
 8002f22:	f7fe ff9b 	bl	8001e5c <HAL_GPIO_WritePin>
      asm("NOP");
 8002f26:	bf00      	nop
      asm("NOP");
 8002f28:	bf00      	nop
      FIFO_RCK_L();
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2120      	movs	r1, #32
 8002f2e:	4638      	mov	r0, r7
 8002f30:	f7fe ff94 	bl	8001e5c <HAL_GPIO_WritePin>
      asm("NOP");
 8002f34:	bf00      	nop
      asm("NOP");
 8002f36:	bf00      	nop
      FIFO_RCK_H();
 8002f38:	2201      	movs	r2, #1
 8002f3a:	2120      	movs	r1, #32
 8002f3c:	4638      	mov	r0, r7
 8002f3e:	f7fe ff8d 	bl	8001e5c <HAL_GPIO_WritePin>
      if ((a >= 4) && (a <= 112) && ((a - 4) % 4 == 0) && (b >= 34)
 8002f42:	f1aa 0304 	sub.w	r3, sl, #4
 8002f46:	2b6c      	cmp	r3, #108	; 0x6c
 8002f48:	d821      	bhi.n	8002f8e <OV7670_StoreFrameSliced_QQVGA_28_28+0x9a>
 8002f4a:	f01a 0f03 	tst.w	sl, #3
 8002f4e:	d11e      	bne.n	8002f8e <OV7670_StoreFrameSliced_QQVGA_28_28+0x9a>
 8002f50:	2d6c      	cmp	r5, #108	; 0x6c
 8002f52:	d81c      	bhi.n	8002f8e <OV7670_StoreFrameSliced_QQVGA_28_28+0x9a>
          && (b <= 142) && ((b - 34) % 4 == 0))
 8002f54:	f015 0003 	ands.w	r0, r5, #3
 8002f58:	d119      	bne.n	8002f8e <OV7670_StoreFrameSliced_QQVGA_28_28+0x9a>
 8002f5a:	ea4f 221b 	mov.w	r2, fp, lsr #8
      {  // select 28*28 pixels
        c_data = (c_data >> 8) & 0x00ff;
 8002f5e:	b2d3      	uxtb	r3, r2

        if (binarize)
 8002f60:	f1b8 0f00 	cmp.w	r8, #0
 8002f64:	d009      	beq.n	8002f7a <OV7670_StoreFrameSliced_QQVGA_28_28+0x86>
 8002f66:	4912      	ldr	r1, [pc, #72]	; (8002fb0 <OV7670_StoreFrameSliced_QQVGA_28_28+0xbc>)
        {
          if (c_data > THRESHOLD)
 8002f68:	2b69      	cmp	r3, #105	; 0x69
 8002f6a:	f04f 031c 	mov.w	r3, #28
          {
            image_bin[i][j] = 1;
 8002f6e:	fb03 1306 	mla	r3, r3, r6, r1
 8002f72:	bf86      	itte	hi
 8002f74:	2101      	movhi	r1, #1
 8002f76:	5519      	strbhi	r1, [r3, r4]
          }
          else
          {
            image_bin[i][j] = 0;
 8002f78:	5518      	strbls	r0, [r3, r4]
          }
          image_ori[i][j] = 0;  // Not used
        }
        image_ori[i][j] = c_data;
 8002f7a:	490e      	ldr	r1, [pc, #56]	; (8002fb4 <OV7670_StoreFrameSliced_QQVGA_28_28+0xc0>)
 8002f7c:	231c      	movs	r3, #28
 8002f7e:	fb03 1306 	mla	r3, r3, r6, r1
 8002f82:	551a      	strb	r2, [r3, r4]
        j++;
 8002f84:	3401      	adds	r4, #1
        if (j == IMAGE_SIZE)
 8002f86:	2c1c      	cmp	r4, #28
        {
          j = 0;
          i++;
 8002f88:	bf04      	itt	eq
 8002f8a:	3601      	addeq	r6, #1
          j = 0;
 8002f8c:	2400      	moveq	r4, #0
 8002f8e:	3501      	adds	r5, #1
    for (b = 0; b < W; b++)
 8002f90:	2d7e      	cmp	r5, #126	; 0x7e
 8002f92:	d1ba      	bne.n	8002f0a <OV7670_StoreFrameSliced_QQVGA_28_28+0x16>
        }
      }
    }
    HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8002f94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f98:	4807      	ldr	r0, [pc, #28]	; (8002fb8 <OV7670_StoreFrameSliced_QQVGA_28_28+0xc4>)
  for (a = 0; a < H; a++)
 8002f9a:	f10a 0a01 	add.w	sl, sl, #1
    HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8002f9e:	f7fe ff62 	bl	8001e66 <HAL_GPIO_TogglePin>
  for (a = 0; a < H; a++)
 8002fa2:	f1ba 0f78 	cmp.w	sl, #120	; 0x78
 8002fa6:	d1ae      	bne.n	8002f06 <OV7670_StoreFrameSliced_QQVGA_28_28+0x12>
 8002fa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fac:	40020800 	.word	0x40020800
 8002fb0:	20000200 	.word	0x20000200
 8002fb4:	20000510 	.word	0x20000510
 8002fb8:	40020c00 	.word	0x40020c00
 8002fbc:	40020400 	.word	0x40020400

08002fc0 <calc_direction>:
}

// calc_direction[-1, 1]
float calc_direction(unsigned char *line_flag_list,
    unsigned char *line_pos_list)
{
 8002fc0:	b5d0      	push	{r4, r6, r7, lr}
  unsigned int i;
  int height = IMAGE_SIZE / 2, width = IMAGE_SIZE / 2;
  float tmp, angle;
  for (i = 0; i < IMAGE_SIZE; i++)
 8002fc2:	2300      	movs	r3, #0
  {  // row
    if (line_flag_list[i])
 8002fc4:	5cc2      	ldrb	r2, [r0, r3]
 8002fc6:	b3da      	cbz	r2, 8003040 <calc_direction+0x80>
    {
      height = IMAGE_SIZE - i;
      width = IMAGE_SIZE / 2 - line_pos_list[i];
 8002fc8:	5cc8      	ldrb	r0, [r1, r3]
      height = IMAGE_SIZE - i;
 8002fca:	f1c3 041c 	rsb	r4, r3, #28
      width = IMAGE_SIZE / 2 - line_pos_list[i];
 8002fce:	f1c0 000e 	rsb	r0, r0, #14
      break;
    }
  }
  tmp = width / (height * 1.0);
 8002fd2:	f7fd faa7 	bl	8000524 <__aeabi_i2d>
 8002fd6:	4606      	mov	r6, r0
 8002fd8:	4620      	mov	r0, r4
 8002fda:	460f      	mov	r7, r1
 8002fdc:	f7fd faa2 	bl	8000524 <__aeabi_i2d>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4630      	mov	r0, r6
 8002fe6:	4639      	mov	r1, r7
 8002fe8:	f7fd fc2c 	bl	8000844 <__aeabi_ddiv>
 8002fec:	f7fd fdd8 	bl	8000ba0 <__aeabi_d2f>
 8002ff0:	ee07 0a90 	vmov	s15, r0
  /*
   * arctan x = x - x^3/3 + x^5/5 -鈥︹��(x鈮�1)
   * */
  angle = tmp - tmp * tmp * tmp / 3 + tmp * tmp * tmp * tmp * tmp / 5; // Tylor of arctan()
 8002ff4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002ff8:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
 8002ffc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003000:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003004:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003008:	ee86 6aa5 	vdiv.f32	s12, s13, s11
 800300c:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8003010:	eec7 6a25 	vdiv.f32	s13, s14, s11
 8003014:	ee77 7ae6 	vsub.f32	s15, s15, s13

  return 2.0 * angle / 3.141592653;
 8003018:	ee76 7a27 	vadd.f32	s15, s12, s15
 800301c:	ee17 0a90 	vmov	r0, s15
 8003020:	f7fd fa92 	bl	8000548 <__aeabi_f2d>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	f7fd f930 	bl	800028c <__adddf3>
 800302c:	a308      	add	r3, pc, #32	; (adr r3, 8003050 <calc_direction+0x90>)
 800302e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003032:	f7fd fc07 	bl	8000844 <__aeabi_ddiv>
 8003036:	f7fd fdb3 	bl	8000ba0 <__aeabi_d2f>
}
 800303a:	ee00 0a10 	vmov	s0, r0
 800303e:	bdd0      	pop	{r4, r6, r7, pc}
  for (i = 0; i < IMAGE_SIZE; i++)
 8003040:	3301      	adds	r3, #1
 8003042:	2b1c      	cmp	r3, #28
 8003044:	d1be      	bne.n	8002fc4 <calc_direction+0x4>
  int height = IMAGE_SIZE / 2, width = IMAGE_SIZE / 2;
 8003046:	200e      	movs	r0, #14
 8003048:	4604      	mov	r4, r0
 800304a:	e7c2      	b.n	8002fd2 <calc_direction+0x12>
 800304c:	f3af 8000 	nop.w
 8003050:	542fe938 	.word	0x542fe938
 8003054:	400921fb 	.word	0x400921fb

08003058 <control_motor>:

void control_motor(int base_pwm, int diff_pwm)
{
 8003058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifdef SERIAL_PRINT
  print_str("left:", 1);
  print_int(left, 1);
#endif
#ifdef OLED_PRINT
  OLED_DispStr(0, 2, (uint8_t*) "left pwm:", FONT_8X6);
 800305a:	4a29      	ldr	r2, [pc, #164]	; (8003100 <control_motor+0xa8>)
 800305c:	4e29      	ldr	r6, [pc, #164]	; (8003104 <control_motor+0xac>)
  left  = base_pwm - diff_pwm;
 800305e:	1a45      	subs	r5, r0, r1
  OLED_DispStr(0, 2, (uint8_t*) "left pwm:", FONT_8X6);
 8003060:	2301      	movs	r3, #1
{
 8003062:	4604      	mov	r4, r0
 8003064:	460f      	mov	r7, r1
  OLED_DispStr(0, 2, (uint8_t*) "left pwm:", FONT_8X6);
 8003066:	2000      	movs	r0, #0
 8003068:	2102      	movs	r1, #2
 800306a:	f7fe f829 	bl	80010c0 <OLED_DispStr>
  sprintf(str, "%d", left);
 800306e:	462a      	mov	r2, r5
 8003070:	4925      	ldr	r1, [pc, #148]	; (8003108 <control_motor+0xb0>)
 8003072:	4826      	ldr	r0, [pc, #152]	; (800310c <control_motor+0xb4>)
 8003074:	f001 f8b4 	bl	80041e0 <siprintf>
  OLED_DispStr(0, 3, (uint8_t*) str, FONT_8X6);
 8003078:	2301      	movs	r3, #1
 800307a:	4a24      	ldr	r2, [pc, #144]	; (800310c <control_motor+0xb4>)
 800307c:	2103      	movs	r1, #3
 800307e:	2000      	movs	r0, #0
 8003080:	f7fe f81e 	bl	80010c0 <OLED_DispStr>
#endif
  if(left >= 0)
 8003084:	2d00      	cmp	r5, #0
  {
    if(left > 512)
    {left = 512;}
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, left);
 8003086:	6833      	ldr	r3, [r6, #0]
  if(left >= 0)
 8003088:	db25      	blt.n	80030d6 <control_motor+0x7e>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, left);
 800308a:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800308e:	bfa8      	it	ge
 8003090:	f44f 7500 	movge.w	r5, #512	; 0x200
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8003094:	2200      	movs	r2, #0
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, left);
 8003096:	635d      	str	r5, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8003098:	639a      	str	r2, [r3, #56]	; 0x38
#ifdef SERIAL_PRINT
  print_str("right:", 1);
  print_int(right, 1);
#endif
#ifdef OLED_PRINT
  OLED_DispStr(0, 4, (uint8_t*) "right pwm:", FONT_8X6);
 800309a:	2301      	movs	r3, #1
  right = base_pwm + diff_pwm;
 800309c:	443c      	add	r4, r7
  OLED_DispStr(0, 4, (uint8_t*) "right pwm:", FONT_8X6);
 800309e:	4a1c      	ldr	r2, [pc, #112]	; (8003110 <control_motor+0xb8>)
 80030a0:	2104      	movs	r1, #4
 80030a2:	2000      	movs	r0, #0
 80030a4:	f7fe f80c 	bl	80010c0 <OLED_DispStr>
  sprintf(str, "%d", right);
 80030a8:	4622      	mov	r2, r4
 80030aa:	4917      	ldr	r1, [pc, #92]	; (8003108 <control_motor+0xb0>)
 80030ac:	4817      	ldr	r0, [pc, #92]	; (800310c <control_motor+0xb4>)
 80030ae:	f001 f897 	bl	80041e0 <siprintf>
  OLED_DispStr(0, 5, (uint8_t*) str, FONT_8X6);
 80030b2:	2301      	movs	r3, #1
 80030b4:	4a15      	ldr	r2, [pc, #84]	; (800310c <control_motor+0xb4>)
 80030b6:	2105      	movs	r1, #5
 80030b8:	2000      	movs	r0, #0
 80030ba:	f7fe f801 	bl	80010c0 <OLED_DispStr>
#endif

  if(right >= 0)
 80030be:	2c00      	cmp	r4, #0
  {
    if(right > 512)
    {right = 512;}
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, right);
 80030c0:	6833      	ldr	r3, [r6, #0]
  if(right >= 0)
 80030c2:	db12      	blt.n	80030ea <control_motor+0x92>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, right);
 80030c4:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80030c8:	bfa8      	it	ge
 80030ca:	f44f 7400 	movge.w	r4, #512	; 0x200
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 80030ce:	2200      	movs	r2, #0
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, right);
 80030d0:	63dc      	str	r4, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40
 80030d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80030d6:	2200      	movs	r2, #0
 80030d8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, -left);
 80030da:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 80030de:	4295      	cmp	r5, r2
 80030e0:	bfb8      	it	lt
 80030e2:	4615      	movlt	r5, r2
 80030e4:	426d      	negs	r5, r5
 80030e6:	639d      	str	r5, [r3, #56]	; 0x38
 80030e8:	e7d7      	b.n	800309a <control_motor+0x42>
  }
  else
  {
    if(right < -512)
    {right = -512;}
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80030ea:	2200      	movs	r2, #0
 80030ec:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, -right);
 80030ee:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 80030f2:	4294      	cmp	r4, r2
 80030f4:	bfb8      	it	lt
 80030f6:	4614      	movlt	r4, r2
 80030f8:	4264      	negs	r4, r4
 80030fa:	641c      	str	r4, [r3, #64]	; 0x40
 80030fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030fe:	bf00      	nop
 8003100:	0800624c 	.word	0x0800624c
 8003104:	20000894 	.word	0x20000894
 8003108:	08006256 	.word	0x08006256
 800310c:	20000008 	.word	0x20000008
 8003110:	08006259 	.word	0x08006259

08003114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003114:	b530      	push	{r4, r5, lr}
 8003116:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003118:	2230      	movs	r2, #48	; 0x30
 800311a:	2100      	movs	r1, #0
 800311c:	a808      	add	r0, sp, #32
 800311e:	f000 fbeb 	bl	80038f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003122:	2100      	movs	r1, #0
 8003124:	2214      	movs	r2, #20
 8003126:	a803      	add	r0, sp, #12
 8003128:	f000 fbe6 	bl	80038f8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800312c:	2400      	movs	r4, #0
 800312e:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <SystemClock_Config+0x90>)
 8003130:	9401      	str	r4, [sp, #4]
 8003132:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003134:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003138:	641a      	str	r2, [r3, #64]	; 0x40
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003140:	9301      	str	r3, [sp, #4]
 8003142:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003144:	4b18      	ldr	r3, [pc, #96]	; (80031a8 <SystemClock_Config+0x94>)
 8003146:	9402      	str	r4, [sp, #8]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003156:	9302      	str	r3, [sp, #8]
 8003158:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800315a:	2301      	movs	r3, #1
 800315c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800315e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003162:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003164:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003168:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800316a:	2304      	movs	r3, #4
 800316c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800316e:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003170:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003172:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003174:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003176:	2307      	movs	r3, #7
 8003178:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800317a:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800317c:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800317e:	f7fe fe85 	bl	8001e8c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003182:	230f      	movs	r3, #15
 8003184:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003186:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800318a:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800318c:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800318e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003192:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003194:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003196:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003198:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800319a:	f7ff f827 	bl	80021ec <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800319e:	b015      	add	sp, #84	; 0x54
 80031a0:	bd30      	pop	{r4, r5, pc}
 80031a2:	bf00      	nop
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40007000 	.word	0x40007000

080031ac <main>:
{
 80031ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031b0:	ed2d 8b02 	vpush	{d8}
  HAL_Init();
 80031b4:	f7fe fcc2 	bl	8001b3c <HAL_Init>
  SystemClock_Config();
 80031b8:	f7ff ffac 	bl	8003114 <SystemClock_Config>
  MX_GPIO_Init();
 80031bc:	f7ff fd4a 	bl	8002c54 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80031c0:	f000 faf2 	bl	80037a8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80031c4:	f000 fa88 	bl	80036d8 <MX_TIM3_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80031c8:	2100      	movs	r1, #0
 80031ca:	4870      	ldr	r0, [pc, #448]	; (800338c <main+0x1e0>)
 80031cc:	f7ff fb36 	bl	800283c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80031d0:	2104      	movs	r1, #4
 80031d2:	486e      	ldr	r0, [pc, #440]	; (800338c <main+0x1e0>)
 80031d4:	f7ff fb32 	bl	800283c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80031d8:	2108      	movs	r1, #8
 80031da:	486c      	ldr	r0, [pc, #432]	; (800338c <main+0x1e0>)
 80031dc:	f7ff fb2e 	bl	800283c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80031e0:	210c      	movs	r1, #12
 80031e2:	486a      	ldr	r0, [pc, #424]	; (800338c <main+0x1e0>)
 80031e4:	f7ff fb2a 	bl	800283c <HAL_TIM_PWM_Start>
  OLED_Init();
 80031e8:	f7fd ffa6 	bl	8001138 <OLED_Init>
  print_str("ov7670 init...", 1);
 80031ec:	2101      	movs	r1, #1
 80031ee:	4868      	ldr	r0, [pc, #416]	; (8003390 <main+0x1e4>)
 80031f0:	f000 f93e 	bl	8003470 <print_str>
  FIFO_OE_L();
 80031f4:	2200      	movs	r2, #0
 80031f6:	2110      	movs	r1, #16
 80031f8:	4866      	ldr	r0, [pc, #408]	; (8003394 <main+0x1e8>)
 80031fa:	f7fe fe2f 	bl	8001e5c <HAL_GPIO_WritePin>
  FIFO_WEN_H();
 80031fe:	2201      	movs	r2, #1
 8003200:	2104      	movs	r1, #4
 8003202:	4864      	ldr	r0, [pc, #400]	; (8003394 <main+0x1e8>)
 8003204:	f7fe fe2a 	bl	8001e5c <HAL_GPIO_WritePin>
  send_flag = 0;
 8003208:	4b63      	ldr	r3, [pc, #396]	; (8003398 <main+0x1ec>)
 800320a:	2200      	movs	r2, #0
 800320c:	701a      	strb	r2, [r3, #0]
 800320e:	4698      	mov	r8, r3
  while (1 != Sensor_init())
 8003210:	f7fe fc2a 	bl	8001a68 <Sensor_init>
 8003214:	2801      	cmp	r0, #1
 8003216:	4605      	mov	r5, r0
 8003218:	d1fa      	bne.n	8003210 <main+0x64>
  Vsync = 0;
 800321a:	2400      	movs	r4, #0
  print_str("ov7670 init OK!", 1);
 800321c:	4601      	mov	r1, r0
  Vsync = 0;
 800321e:	4f5f      	ldr	r7, [pc, #380]	; (800339c <main+0x1f0>)
  print_str("ov7670 init OK!", 1);
 8003220:	485f      	ldr	r0, [pc, #380]	; (80033a0 <main+0x1f4>)
  float offset=0, direction=0.0;
 8003222:	ed9f 8a60 	vldr	s16, [pc, #384]	; 80033a4 <main+0x1f8>
        FIFO_RRST_L();
 8003226:	4e5b      	ldr	r6, [pc, #364]	; (8003394 <main+0x1e8>)
    sprintf(str, "%f", direction);
 8003228:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 80033d0 <main+0x224>
  print_str("ov7670 init OK!", 1);
 800322c:	f000 f920 	bl	8003470 <print_str>
  FIFO_RRST_L();
 8003230:	4622      	mov	r2, r4
 8003232:	2108      	movs	r1, #8
 8003234:	4857      	ldr	r0, [pc, #348]	; (8003394 <main+0x1e8>)
  Vsync = 0;
 8003236:	703c      	strb	r4, [r7, #0]
  FIFO_RRST_L();
 8003238:	f7fe fe10 	bl	8001e5c <HAL_GPIO_WritePin>
  FIFO_RCK_L();
 800323c:	4622      	mov	r2, r4
 800323e:	2120      	movs	r1, #32
 8003240:	4854      	ldr	r0, [pc, #336]	; (8003394 <main+0x1e8>)
 8003242:	f7fe fe0b 	bl	8001e5c <HAL_GPIO_WritePin>
  FIFO_RCK_H();
 8003246:	462a      	mov	r2, r5
 8003248:	2120      	movs	r1, #32
 800324a:	4852      	ldr	r0, [pc, #328]	; (8003394 <main+0x1e8>)
 800324c:	f7fe fe06 	bl	8001e5c <HAL_GPIO_WritePin>
  FIFO_RCK_L();
 8003250:	4622      	mov	r2, r4
 8003252:	2120      	movs	r1, #32
 8003254:	484f      	ldr	r0, [pc, #316]	; (8003394 <main+0x1e8>)
 8003256:	f7fe fe01 	bl	8001e5c <HAL_GPIO_WritePin>
  FIFO_RRST_H();
 800325a:	462a      	mov	r2, r5
 800325c:	2108      	movs	r1, #8
 800325e:	484d      	ldr	r0, [pc, #308]	; (8003394 <main+0x1e8>)
 8003260:	f7fe fdfc 	bl	8001e5c <HAL_GPIO_WritePin>
  FIFO_RCK_H();
 8003264:	462a      	mov	r2, r5
 8003266:	2120      	movs	r1, #32
 8003268:	484a      	ldr	r0, [pc, #296]	; (8003394 <main+0x1e8>)
 800326a:	f7fe fdf7 	bl	8001e5c <HAL_GPIO_WritePin>
  Delay(50);
 800326e:	2032      	movs	r0, #50	; 0x32
 8003270:	f7fd fe6e 	bl	8000f50 <Delay>
  PID_init();
 8003274:	f000 f8e8 	bl	8003448 <PID_init>
  print_str("init PID", 1);
 8003278:	4629      	mov	r1, r5
 800327a:	484b      	ldr	r0, [pc, #300]	; (80033a8 <main+0x1fc>)
 800327c:	f000 f8f8 	bl	8003470 <print_str>
    OLED_Clear();
 8003280:	f7fd feaa 	bl	8000fd8 <OLED_Clear>
    if (send_flag == 1)
 8003284:	f898 5000 	ldrb.w	r5, [r8]
 8003288:	2d01      	cmp	r5, #1
 800328a:	d140      	bne.n	800330e <main+0x162>
      if (Vsync == 2)
 800328c:	783b      	ldrb	r3, [r7, #0]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d13d      	bne.n	800330e <main+0x162>
        FIFO_RRST_L();
 8003292:	2200      	movs	r2, #0
 8003294:	2108      	movs	r1, #8
 8003296:	4630      	mov	r0, r6
 8003298:	f7fe fde0 	bl	8001e5c <HAL_GPIO_WritePin>
        FIFO_RCK_L();
 800329c:	2200      	movs	r2, #0
 800329e:	2120      	movs	r1, #32
 80032a0:	4630      	mov	r0, r6
 80032a2:	f7fe fddb 	bl	8001e5c <HAL_GPIO_WritePin>
        FIFO_RCK_H();
 80032a6:	462a      	mov	r2, r5
 80032a8:	2120      	movs	r1, #32
 80032aa:	4630      	mov	r0, r6
 80032ac:	f7fe fdd6 	bl	8001e5c <HAL_GPIO_WritePin>
        FIFO_RCK_L();
 80032b0:	2200      	movs	r2, #0
 80032b2:	2120      	movs	r1, #32
 80032b4:	4630      	mov	r0, r6
 80032b6:	f7fe fdd1 	bl	8001e5c <HAL_GPIO_WritePin>
        FIFO_RRST_H();
 80032ba:	462a      	mov	r2, r5
 80032bc:	2108      	movs	r1, #8
 80032be:	4630      	mov	r0, r6
 80032c0:	f7fe fdcc 	bl	8001e5c <HAL_GPIO_WritePin>
        FIFO_RCK_H();
 80032c4:	462a      	mov	r2, r5
 80032c6:	2120      	movs	r1, #32
 80032c8:	4630      	mov	r0, r6
 80032ca:	f7fe fdc7 	bl	8001e5c <HAL_GPIO_WritePin>
        OV7670_StoreFrameSliced_QQVGA_28_28(1);
 80032ce:	4628      	mov	r0, r5
 80032d0:	f7ff fe10 	bl	8002ef4 <OV7670_StoreFrameSliced_QQVGA_28_28>
        show_image_bin(image_bin);
 80032d4:	4835      	ldr	r0, [pc, #212]	; (80033ac <main+0x200>)
        Vsync = 0;
 80032d6:	703c      	strb	r4, [r7, #0]
        show_image_bin(image_bin);
 80032d8:	f7ff fdd8 	bl	8002e8c <show_image_bin>
        find_center_line(image_bin, line_flag_list, line_pos_list);
 80032dc:	4a34      	ldr	r2, [pc, #208]	; (80033b0 <main+0x204>)
 80032de:	4935      	ldr	r1, [pc, #212]	; (80033b4 <main+0x208>)
 80032e0:	4832      	ldr	r0, [pc, #200]	; (80033ac <main+0x200>)
 80032e2:	f7ff fd6d 	bl	8002dc0 <find_center_line>
        print_str("print line flag:", 1);
 80032e6:	4629      	mov	r1, r5
 80032e8:	4833      	ldr	r0, [pc, #204]	; (80033b8 <main+0x20c>)
 80032ea:	f000 f8c1 	bl	8003470 <print_str>
        print_list(line_flag_list);
 80032ee:	4831      	ldr	r0, [pc, #196]	; (80033b4 <main+0x208>)
 80032f0:	f7ff fdb2 	bl	8002e58 <print_list>
        print_str("print line pos:", 1);
 80032f4:	4629      	mov	r1, r5
 80032f6:	4831      	ldr	r0, [pc, #196]	; (80033bc <main+0x210>)
 80032f8:	f000 f8ba 	bl	8003470 <print_str>
        print_list(line_pos_list);
 80032fc:	482c      	ldr	r0, [pc, #176]	; (80033b0 <main+0x204>)
 80032fe:	f7ff fdab 	bl	8002e58 <print_list>
        direction = calc_direction(line_flag_list, line_pos_list);
 8003302:	492b      	ldr	r1, [pc, #172]	; (80033b0 <main+0x204>)
 8003304:	482b      	ldr	r0, [pc, #172]	; (80033b4 <main+0x208>)
 8003306:	f7ff fe5b 	bl	8002fc0 <calc_direction>
 800330a:	eeb0 8a40 	vmov.f32	s16, s0
    if(direction > 3)
 800330e:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8003312:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331a:	dc33      	bgt.n	8003384 <main+0x1d8>
    if(direction < -3)
 800331c:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
    {direction = -3;}
 8003320:	eeb4 8a67 	vcmp.f32	s16, s15
 8003324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003328:	bf48      	it	mi
 800332a:	eeb0 8a67 	vmovmi.f32	s16, s15
    OLED_DispStr(0, 0, (uint8_t*) "direction:", FONT_8X6);
 800332e:	2100      	movs	r1, #0
 8003330:	2301      	movs	r3, #1
 8003332:	4a23      	ldr	r2, [pc, #140]	; (80033c0 <main+0x214>)
 8003334:	4608      	mov	r0, r1
 8003336:	f7fd fec3 	bl	80010c0 <OLED_DispStr>
    sprintf(str, "%f", direction);
 800333a:	ee18 0a10 	vmov	r0, s16
 800333e:	f7fd f903 	bl	8000548 <__aeabi_f2d>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4648      	mov	r0, r9
 8003348:	491e      	ldr	r1, [pc, #120]	; (80033c4 <main+0x218>)
 800334a:	f000 ff49 	bl	80041e0 <siprintf>
    OLED_DispStr(0, 1, (uint8_t*) str, FONT_8X6);
 800334e:	2301      	movs	r3, #1
 8003350:	4619      	mov	r1, r3
 8003352:	464a      	mov	r2, r9
 8003354:	2000      	movs	r0, #0
 8003356:	f7fd feb3 	bl	80010c0 <OLED_DispStr>
    diff_pwm = (int)(300 * direction);
 800335a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80033c8 <main+0x21c>
 800335e:	ee68 7a27 	vmul.f32	s15, s16, s15
    control_motor(base_pwm, diff_pwm);
 8003362:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003366:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800336a:	ee17 1a90 	vmov	r1, s15
 800336e:	f7ff fe73 	bl	8003058 <control_motor>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8003372:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003376:	4815      	ldr	r0, [pc, #84]	; (80033cc <main+0x220>)
 8003378:	f7fe fd75 	bl	8001e66 <HAL_GPIO_TogglePin>
    HAL_Delay(10);
 800337c:	200a      	movs	r0, #10
 800337e:	f7fe fc09 	bl	8001b94 <HAL_Delay>
    OLED_Clear();
 8003382:	e77d      	b.n	8003280 <main+0xd4>
    {direction = 3;}
 8003384:	eeb0 8a67 	vmov.f32	s16, s15
 8003388:	e7d1      	b.n	800332e <main+0x182>
 800338a:	bf00      	nop
 800338c:	20000894 	.word	0x20000894
 8003390:	08006264 	.word	0x08006264
 8003394:	40020800 	.word	0x40020800
 8003398:	20000820 	.word	0x20000820
 800339c:	20000834 	.word	0x20000834
 80033a0:	08006273 	.word	0x08006273
 80033a4:	00000000 	.word	0x00000000
 80033a8:	08006283 	.word	0x08006283
 80033ac:	20000200 	.word	0x20000200
 80033b0:	20000835 	.word	0x20000835
 80033b4:	20000851 	.word	0x20000851
 80033b8:	0800628c 	.word	0x0800628c
 80033bc:	0800629d 	.word	0x0800629d
 80033c0:	080062ad 	.word	0x080062ad
 80033c4:	080062b8 	.word	0x080062b8
 80033c8:	43960000 	.word	0x43960000
 80033cc:	40020c00 	.word	0x40020c00
 80033d0:	20000008 	.word	0x20000008

080033d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  switch (GPIO_Pin)
 80033d4:	2801      	cmp	r0, #1
{
 80033d6:	b510      	push	{r4, lr}
 80033d8:	4604      	mov	r4, r0
  switch (GPIO_Pin)
 80033da:	d01c      	beq.n	8003416 <HAL_GPIO_EXTI_Callback+0x42>
 80033dc:	2880      	cmp	r0, #128	; 0x80
 80033de:	d126      	bne.n	800342e <HAL_GPIO_EXTI_Callback+0x5a>
  {
  /*VSYNC EXTI line: 7*/
  case VSYNC_EXTI_Pin:
    if (Vsync == 0)
 80033e0:	4c13      	ldr	r4, [pc, #76]	; (8003430 <HAL_GPIO_EXTI_Callback+0x5c>)
 80033e2:	7823      	ldrb	r3, [r4, #0]
 80033e4:	b93b      	cbnz	r3, 80033f6 <HAL_GPIO_EXTI_Callback+0x22>
    {
      Vsync = 1;
 80033e6:	2201      	movs	r2, #1
 80033e8:	7022      	strb	r2, [r4, #0]
      FIFO_WEN_H();
 80033ea:	2104      	movs	r1, #4
 80033ec:	4811      	ldr	r0, [pc, #68]	; (8003434 <HAL_GPIO_EXTI_Callback+0x60>)
    break;

  default:
    break;
  }
}
 80033ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      FIFO_WEN_H();
 80033f2:	f7fe bd33 	b.w	8001e5c <HAL_GPIO_WritePin>
    else if (Vsync == 1)
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d119      	bne.n	800342e <HAL_GPIO_EXTI_Callback+0x5a>
      FIFO_WEN_L();
 80033fa:	2104      	movs	r1, #4
 80033fc:	480d      	ldr	r0, [pc, #52]	; (8003434 <HAL_GPIO_EXTI_Callback+0x60>)
 80033fe:	2200      	movs	r2, #0
 8003400:	f7fe fd2c 	bl	8001e5c <HAL_GPIO_WritePin>
      Vsync = 2;
 8003404:	2302      	movs	r3, #2
 8003406:	7023      	strb	r3, [r4, #0]
      HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8003408:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800340c:	480a      	ldr	r0, [pc, #40]	; (8003438 <HAL_GPIO_EXTI_Callback+0x64>)
}
 800340e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8003412:	f7fe bd28 	b.w	8001e66 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8003416:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800341a:	4807      	ldr	r0, [pc, #28]	; (8003438 <HAL_GPIO_EXTI_Callback+0x64>)
 800341c:	f7fe fd23 	bl	8001e66 <HAL_GPIO_TogglePin>
    if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 0)
 8003420:	4621      	mov	r1, r4
 8003422:	4806      	ldr	r0, [pc, #24]	; (800343c <HAL_GPIO_EXTI_Callback+0x68>)
 8003424:	f7fe fd14 	bl	8001e50 <HAL_GPIO_ReadPin>
 8003428:	b908      	cbnz	r0, 800342e <HAL_GPIO_EXTI_Callback+0x5a>
      send_flag = 1;
 800342a:	4b05      	ldr	r3, [pc, #20]	; (8003440 <HAL_GPIO_EXTI_Callback+0x6c>)
 800342c:	701c      	strb	r4, [r3, #0]
 800342e:	bd10      	pop	{r4, pc}
 8003430:	20000834 	.word	0x20000834
 8003434:	40020800 	.word	0x40020800
 8003438:	40020c00 	.word	0x40020c00
 800343c:	40020000 	.word	0x40020000
 8003440:	20000820 	.word	0x20000820

08003444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003444:	4770      	bx	lr
	...

08003448 <PID_init>:
float diff = 0;
PID_HandleTypeDef pid;

void PID_init(void)
{
  pid.SetValue = 0.0;
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <PID_init+0x1c>)
  pid.ControlValue = 0.0;
  pid.err = 0.0;
  pid.err_last = 0.0;
  pid.err_next = 0.0;
  pid.Kp = 0.2;
  pid.Ki = 0.015;
 800344a:	4907      	ldr	r1, [pc, #28]	; (8003468 <PID_init+0x20>)
 800344c:	61d9      	str	r1, [r3, #28]
  pid.SetValue = 0.0;
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
  pid.CurrentValue = 0.0;
 8003452:	605a      	str	r2, [r3, #4]
  pid.ControlValue = 0.0;
 8003454:	609a      	str	r2, [r3, #8]
  pid.err = 0.0;
 8003456:	60da      	str	r2, [r3, #12]
  pid.err_last = 0.0;
 8003458:	615a      	str	r2, [r3, #20]
  pid.err_next = 0.0;
 800345a:	611a      	str	r2, [r3, #16]
  pid.Kp = 0.2;
 800345c:	4a03      	ldr	r2, [pc, #12]	; (800346c <PID_init+0x24>)
 800345e:	619a      	str	r2, [r3, #24]
  pid.Kd = 0.2;
 8003460:	621a      	str	r2, [r3, #32]
 8003462:	4770      	bx	lr
 8003464:	20000870 	.word	0x20000870
 8003468:	3c75c28f 	.word	0x3c75c28f
 800346c:	3e4ccccd 	.word	0x3e4ccccd

08003470 <print_str>:
#include "print.h"
#include <stdio.h>
#include <string.h>

void print_str(const char* str2print, unsigned char new_line)
{
 8003470:	b570      	push	{r4, r5, r6, lr}
 8003472:	460c      	mov	r4, r1
 8003474:	4605      	mov	r5, r0
  HAL_UART_Transmit(&huart2, (uint8_t *) str2print, strlen(str2print), 10);
 8003476:	f7fc feab 	bl	80001d0 <strlen>
 800347a:	230a      	movs	r3, #10
 800347c:	b282      	uxth	r2, r0
 800347e:	4629      	mov	r1, r5
 8003480:	4806      	ldr	r0, [pc, #24]	; (800349c <print_str+0x2c>)
 8003482:	f7ff fb89 	bl	8002b98 <HAL_UART_Transmit>
  if (new_line)
 8003486:	b13c      	cbz	r4, 8003498 <print_str+0x28>
  {
    HAL_UART_Transmit(&huart2, (uint8_t *) "\r\n", strlen("\r\n"), 10);
 8003488:	230a      	movs	r3, #10
 800348a:	2202      	movs	r2, #2
 800348c:	4904      	ldr	r1, [pc, #16]	; (80034a0 <print_str+0x30>)
 800348e:	4803      	ldr	r0, [pc, #12]	; (800349c <print_str+0x2c>)
  }
}
 8003490:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UART_Transmit(&huart2, (uint8_t *) "\r\n", strlen("\r\n"), 10);
 8003494:	f7ff bb80 	b.w	8002b98 <HAL_UART_Transmit>
 8003498:	bd70      	pop	{r4, r5, r6, pc}
 800349a:	bf00      	nop
 800349c:	200008d4 	.word	0x200008d4
 80034a0:	08006243 	.word	0x08006243

080034a4 <print_int>:

void print_int(int int2print, unsigned char new_line)
{
 80034a4:	b530      	push	{r4, r5, lr}
  unsigned char display[] = "00000000";
 80034a6:	4c10      	ldr	r4, [pc, #64]	; (80034e8 <print_int+0x44>)
{
 80034a8:	b085      	sub	sp, #20
 80034aa:	4602      	mov	r2, r0
 80034ac:	460d      	mov	r5, r1
  unsigned char display[] = "00000000";
 80034ae:	6820      	ldr	r0, [r4, #0]
 80034b0:	6861      	ldr	r1, [r4, #4]
 80034b2:	ab01      	add	r3, sp, #4
 80034b4:	c303      	stmia	r3!, {r0, r1}
 80034b6:	7a21      	ldrb	r1, [r4, #8]
 80034b8:	7019      	strb	r1, [r3, #0]
  sprintf((char*) display, "%d", int2print);
 80034ba:	a801      	add	r0, sp, #4
 80034bc:	490b      	ldr	r1, [pc, #44]	; (80034ec <print_int+0x48>)
 80034be:	f000 fe8f 	bl	80041e0 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *) display, strlen((const char*) display),
 80034c2:	a801      	add	r0, sp, #4
 80034c4:	f7fc fe84 	bl	80001d0 <strlen>
 80034c8:	230a      	movs	r3, #10
 80034ca:	b282      	uxth	r2, r0
 80034cc:	a901      	add	r1, sp, #4
 80034ce:	4808      	ldr	r0, [pc, #32]	; (80034f0 <print_int+0x4c>)
 80034d0:	f7ff fb62 	bl	8002b98 <HAL_UART_Transmit>
                    10);
  if (new_line)
 80034d4:	b12d      	cbz	r5, 80034e2 <print_int+0x3e>
  {
    HAL_UART_Transmit(&huart2, (uint8_t *) "\r\n", strlen("\r\n"), 10);
 80034d6:	230a      	movs	r3, #10
 80034d8:	2202      	movs	r2, #2
 80034da:	4906      	ldr	r1, [pc, #24]	; (80034f4 <print_int+0x50>)
 80034dc:	4804      	ldr	r0, [pc, #16]	; (80034f0 <print_int+0x4c>)
 80034de:	f7ff fb5b 	bl	8002b98 <HAL_UART_Transmit>
  }
}
 80034e2:	b005      	add	sp, #20
 80034e4:	bd30      	pop	{r4, r5, pc}
 80034e6:	bf00      	nop
 80034e8:	080062bb 	.word	0x080062bb
 80034ec:	08006256 	.word	0x08006256
 80034f0:	200008d4 	.word	0x200008d4
 80034f4:	08006243 	.word	0x08006243

080034f8 <print_int_hex>:

void print_int_hex(int int2print, unsigned char new_line)
{
 80034f8:	b530      	push	{r4, r5, lr}
  unsigned char display[] = "00000000";
 80034fa:	4c10      	ldr	r4, [pc, #64]	; (800353c <print_int_hex+0x44>)
{
 80034fc:	b085      	sub	sp, #20
 80034fe:	4602      	mov	r2, r0
 8003500:	460d      	mov	r5, r1
  unsigned char display[] = "00000000";
 8003502:	6820      	ldr	r0, [r4, #0]
 8003504:	6861      	ldr	r1, [r4, #4]
 8003506:	ab01      	add	r3, sp, #4
 8003508:	c303      	stmia	r3!, {r0, r1}
 800350a:	7a21      	ldrb	r1, [r4, #8]
 800350c:	7019      	strb	r1, [r3, #0]
  sprintf((char*) display, "0x%2x", int2print);
 800350e:	a801      	add	r0, sp, #4
 8003510:	490b      	ldr	r1, [pc, #44]	; (8003540 <print_int_hex+0x48>)
 8003512:	f000 fe65 	bl	80041e0 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *) display, strlen((const char*) display),
 8003516:	a801      	add	r0, sp, #4
 8003518:	f7fc fe5a 	bl	80001d0 <strlen>
 800351c:	230a      	movs	r3, #10
 800351e:	b282      	uxth	r2, r0
 8003520:	a901      	add	r1, sp, #4
 8003522:	4808      	ldr	r0, [pc, #32]	; (8003544 <print_int_hex+0x4c>)
 8003524:	f7ff fb38 	bl	8002b98 <HAL_UART_Transmit>
                    10);
  if (new_line)
 8003528:	b12d      	cbz	r5, 8003536 <print_int_hex+0x3e>
  {
    HAL_UART_Transmit(&huart2, (uint8_t *) "\r\n", strlen("\r\n"), 10);
 800352a:	230a      	movs	r3, #10
 800352c:	2202      	movs	r2, #2
 800352e:	4906      	ldr	r1, [pc, #24]	; (8003548 <print_int_hex+0x50>)
 8003530:	4804      	ldr	r0, [pc, #16]	; (8003544 <print_int_hex+0x4c>)
 8003532:	f7ff fb31 	bl	8002b98 <HAL_UART_Transmit>
  }
}
 8003536:	b005      	add	sp, #20
 8003538:	bd30      	pop	{r4, r5, pc}
 800353a:	bf00      	nop
 800353c:	080062bb 	.word	0x080062bb
 8003540:	080062c4 	.word	0x080062c4
 8003544:	200008d4 	.word	0x200008d4
 8003548:	08006243 	.word	0x08006243

0800354c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800354c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800354e:	4b0e      	ldr	r3, [pc, #56]	; (8003588 <HAL_MspInit+0x3c>)
 8003550:	2100      	movs	r1, #0
 8003552:	9100      	str	r1, [sp, #0]
 8003554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003556:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800355a:	645a      	str	r2, [r3, #68]	; 0x44
 800355c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800355e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003562:	9200      	str	r2, [sp, #0]
 8003564:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003566:	9101      	str	r1, [sp, #4]
 8003568:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800356a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800356e:	641a      	str	r2, [r3, #64]	; 0x40
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003576:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003578:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 800357a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800357c:	f7fe fb1e 	bl	8001bbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003580:	b003      	add	sp, #12
 8003582:	f85d fb04 	ldr.w	pc, [sp], #4
 8003586:	bf00      	nop
 8003588:	40023800 	.word	0x40023800

0800358c <NMI_Handler>:
 800358c:	4770      	bx	lr

0800358e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800358e:	e7fe      	b.n	800358e <HardFault_Handler>

08003590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003590:	e7fe      	b.n	8003590 <MemManage_Handler>

08003592 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003592:	e7fe      	b.n	8003592 <BusFault_Handler>

08003594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003594:	e7fe      	b.n	8003594 <UsageFault_Handler>

08003596 <SVC_Handler>:
 8003596:	4770      	bx	lr

08003598 <DebugMon_Handler>:
 8003598:	4770      	bx	lr

0800359a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800359a:	4770      	bx	lr

0800359c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800359c:	f7fe bae8 	b.w	8001b70 <HAL_IncTick>

080035a0 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80035a0:	2001      	movs	r0, #1
 80035a2:	f7fe bc67 	b.w	8001e74 <HAL_GPIO_EXTI_IRQHandler>

080035a6 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80035a6:	2080      	movs	r0, #128	; 0x80
 80035a8:	f7fe bc64 	b.w	8001e74 <HAL_GPIO_EXTI_IRQHandler>

080035ac <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80035ac:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80035ae:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <_sbrk+0x2c>)
 80035b0:	6819      	ldr	r1, [r3, #0]
{
 80035b2:	4602      	mov	r2, r0
	if (heap_end == 0)
 80035b4:	b909      	cbnz	r1, 80035ba <_sbrk+0xe>
		heap_end = &end;
 80035b6:	4909      	ldr	r1, [pc, #36]	; (80035dc <_sbrk+0x30>)
 80035b8:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80035ba:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80035bc:	4669      	mov	r1, sp
 80035be:	4402      	add	r2, r0
 80035c0:	428a      	cmp	r2, r1
 80035c2:	d906      	bls.n	80035d2 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80035c4:	f000 f96e 	bl	80038a4 <__errno>
 80035c8:	230c      	movs	r3, #12
 80035ca:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80035cc:	f04f 30ff 	mov.w	r0, #4294967295
 80035d0:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80035d2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80035d4:	bd08      	pop	{r3, pc}
 80035d6:	bf00      	nop
 80035d8:	20000824 	.word	0x20000824
 80035dc:	20000918 	.word	0x20000918

080035e0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035e0:	490f      	ldr	r1, [pc, #60]	; (8003620 <SystemInit+0x40>)
 80035e2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80035e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80035ee:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <SystemInit+0x44>)
 80035f0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80035f2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80035f4:	f042 0201 	orr.w	r2, r2, #1
 80035f8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80035fa:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003602:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003606:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003608:	4a07      	ldr	r2, [pc, #28]	; (8003628 <SystemInit+0x48>)
 800360a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003612:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003614:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003616:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800361a:	608b      	str	r3, [r1, #8]
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	e000ed00 	.word	0xe000ed00
 8003624:	40023800 	.word	0x40023800
 8003628:	24003010 	.word	0x24003010

0800362c <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 800362c:	6802      	ldr	r2, [r0, #0]
 800362e:	4b09      	ldr	r3, [pc, #36]	; (8003654 <HAL_TIM_Base_MspInit+0x28>)
 8003630:	429a      	cmp	r2, r3
{
 8003632:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM3)
 8003634:	d10b      	bne.n	800364e <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	9301      	str	r3, [sp, #4]
 800363a:	4b07      	ldr	r3, [pc, #28]	; (8003658 <HAL_TIM_Base_MspInit+0x2c>)
 800363c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800363e:	f042 0202 	orr.w	r2, r2, #2
 8003642:	641a      	str	r2, [r3, #64]	; 0x40
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	9301      	str	r3, [sp, #4]
 800364c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800364e:	b002      	add	sp, #8
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40000400 	.word	0x40000400
 8003658:	40023800 	.word	0x40023800

0800365c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800365c:	b530      	push	{r4, r5, lr}
 800365e:	4604      	mov	r4, r0
 8003660:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003662:	2214      	movs	r2, #20
 8003664:	2100      	movs	r1, #0
 8003666:	a803      	add	r0, sp, #12
 8003668:	f000 f946 	bl	80038f8 <memset>
  if(timHandle->Instance==TIM3)
 800366c:	6822      	ldr	r2, [r4, #0]
 800366e:	4b17      	ldr	r3, [pc, #92]	; (80036cc <HAL_TIM_MspPostInit+0x70>)
 8003670:	429a      	cmp	r2, r3
 8003672:	d129      	bne.n	80036c8 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003674:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 8003678:	2500      	movs	r5, #0
 800367a:	9501      	str	r5, [sp, #4]
 800367c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800367e:	4814      	ldr	r0, [pc, #80]	; (80036d0 <HAL_TIM_MspPostInit+0x74>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003680:	f042 0201 	orr.w	r2, r2, #1
 8003684:	631a      	str	r2, [r3, #48]	; 0x30
 8003686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003688:	f002 0201 	and.w	r2, r2, #1
 800368c:	9201      	str	r2, [sp, #4]
 800368e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003690:	9502      	str	r5, [sp, #8]
 8003692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003694:	f042 0202 	orr.w	r2, r2, #2
 8003698:	631a      	str	r2, [r3, #48]	; 0x30
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a2:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036a4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a6:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036a8:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036aa:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036ae:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b0:	f7fe faee 	bl	8001c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80036b4:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b6:	a903      	add	r1, sp, #12
 80036b8:	4806      	ldr	r0, [pc, #24]	; (80036d4 <HAL_TIM_MspPostInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80036ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036bc:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036be:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036c2:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036c4:	f7fe fae4 	bl	8001c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80036c8:	b009      	add	sp, #36	; 0x24
 80036ca:	bd30      	pop	{r4, r5, pc}
 80036cc:	40000400 	.word	0x40000400
 80036d0:	40020000 	.word	0x40020000
 80036d4:	40020400 	.word	0x40020400

080036d8 <MX_TIM3_Init>:
{
 80036d8:	b510      	push	{r4, lr}
 80036da:	b08e      	sub	sp, #56	; 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036dc:	2210      	movs	r2, #16
 80036de:	2100      	movs	r1, #0
 80036e0:	a803      	add	r0, sp, #12
 80036e2:	f000 f909 	bl	80038f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036e6:	2400      	movs	r4, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036e8:	221c      	movs	r2, #28
 80036ea:	eb0d 0002 	add.w	r0, sp, r2
 80036ee:	4621      	mov	r1, r4
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036f0:	9401      	str	r4, [sp, #4]
 80036f2:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80036f4:	f000 f900 	bl	80038f8 <memset>
  htim3.Instance = TIM3;
 80036f8:	4829      	ldr	r0, [pc, #164]	; (80037a0 <MX_TIM3_Init+0xc8>)
  htim3.Init.Prescaler = 168-1;
 80036fa:	4a2a      	ldr	r2, [pc, #168]	; (80037a4 <MX_TIM3_Init+0xcc>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036fc:	6084      	str	r4, [r0, #8]
  htim3.Init.Prescaler = 168-1;
 80036fe:	23a7      	movs	r3, #167	; 0xa7
 8003700:	e880 000c 	stmia.w	r0, {r2, r3}
  htim3.Init.Period = 1024-1;
 8003704:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8003708:	60c3      	str	r3, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800370a:	6104      	str	r4, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800370c:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800370e:	f7fe ff1d 	bl	800254c <HAL_TIM_Base_Init>
 8003712:	b108      	cbz	r0, 8003718 <MX_TIM3_Init+0x40>
    Error_Handler();
 8003714:	f7ff fe96 	bl	8003444 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800371c:	a903      	add	r1, sp, #12
 800371e:	4820      	ldr	r0, [pc, #128]	; (80037a0 <MX_TIM3_Init+0xc8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003720:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003722:	f7fe ffe9 	bl	80026f8 <HAL_TIM_ConfigClockSource>
 8003726:	b108      	cbz	r0, 800372c <MX_TIM3_Init+0x54>
    Error_Handler();
 8003728:	f7ff fe8c 	bl	8003444 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800372c:	481c      	ldr	r0, [pc, #112]	; (80037a0 <MX_TIM3_Init+0xc8>)
 800372e:	f7fe ff27 	bl	8002580 <HAL_TIM_PWM_Init>
 8003732:	b108      	cbz	r0, 8003738 <MX_TIM3_Init+0x60>
    Error_Handler();
 8003734:	f7ff fe86 	bl	8003444 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003738:	2400      	movs	r4, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800373a:	a901      	add	r1, sp, #4
 800373c:	4818      	ldr	r0, [pc, #96]	; (80037a0 <MX_TIM3_Init+0xc8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800373e:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003740:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003742:	f7ff f89b 	bl	800287c <HAL_TIMEx_MasterConfigSynchronization>
 8003746:	b108      	cbz	r0, 800374c <MX_TIM3_Init+0x74>
    Error_Handler();
 8003748:	f7ff fe7c 	bl	8003444 <Error_Handler>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800374c:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800374e:	2200      	movs	r2, #0
 8003750:	a907      	add	r1, sp, #28
 8003752:	4813      	ldr	r0, [pc, #76]	; (80037a0 <MX_TIM3_Init+0xc8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003754:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = 0;
 8003756:	9408      	str	r4, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003758:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800375a:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800375c:	f7fe ff60 	bl	8002620 <HAL_TIM_PWM_ConfigChannel>
 8003760:	b108      	cbz	r0, 8003766 <MX_TIM3_Init+0x8e>
    Error_Handler();
 8003762:	f7ff fe6f 	bl	8003444 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003766:	2204      	movs	r2, #4
 8003768:	a907      	add	r1, sp, #28
 800376a:	480d      	ldr	r0, [pc, #52]	; (80037a0 <MX_TIM3_Init+0xc8>)
 800376c:	f7fe ff58 	bl	8002620 <HAL_TIM_PWM_ConfigChannel>
 8003770:	b108      	cbz	r0, 8003776 <MX_TIM3_Init+0x9e>
    Error_Handler();
 8003772:	f7ff fe67 	bl	8003444 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003776:	2208      	movs	r2, #8
 8003778:	a907      	add	r1, sp, #28
 800377a:	4809      	ldr	r0, [pc, #36]	; (80037a0 <MX_TIM3_Init+0xc8>)
 800377c:	f7fe ff50 	bl	8002620 <HAL_TIM_PWM_ConfigChannel>
 8003780:	b108      	cbz	r0, 8003786 <MX_TIM3_Init+0xae>
    Error_Handler();
 8003782:	f7ff fe5f 	bl	8003444 <Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003786:	220c      	movs	r2, #12
 8003788:	a907      	add	r1, sp, #28
 800378a:	4805      	ldr	r0, [pc, #20]	; (80037a0 <MX_TIM3_Init+0xc8>)
 800378c:	f7fe ff48 	bl	8002620 <HAL_TIM_PWM_ConfigChannel>
 8003790:	b108      	cbz	r0, 8003796 <MX_TIM3_Init+0xbe>
    Error_Handler();
 8003792:	f7ff fe57 	bl	8003444 <Error_Handler>
  HAL_TIM_MspPostInit(&htim3);
 8003796:	4802      	ldr	r0, [pc, #8]	; (80037a0 <MX_TIM3_Init+0xc8>)
 8003798:	f7ff ff60 	bl	800365c <HAL_TIM_MspPostInit>
}
 800379c:	b00e      	add	sp, #56	; 0x38
 800379e:	bd10      	pop	{r4, pc}
 80037a0:	20000894 	.word	0x20000894
 80037a4:	40000400 	.word	0x40000400

080037a8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80037a8:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 80037aa:	480b      	ldr	r0, [pc, #44]	; (80037d8 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 256000;
 80037ac:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <MX_USART2_UART_Init+0x34>)
 80037ae:	f44f 3e7a 	mov.w	lr, #256000	; 0x3e800
 80037b2:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80037b6:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80037b8:	2300      	movs	r3, #0
 80037ba:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80037bc:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80037be:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80037c0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037c2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80037c4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80037c6:	f7ff f9b9 	bl	8002b3c <HAL_UART_Init>
 80037ca:	b118      	cbz	r0, 80037d4 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 80037cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80037d0:	f7ff be38 	b.w	8003444 <Error_Handler>
 80037d4:	bd08      	pop	{r3, pc}
 80037d6:	bf00      	nop
 80037d8:	200008d4 	.word	0x200008d4
 80037dc:	40004400 	.word	0x40004400

080037e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80037e0:	b510      	push	{r4, lr}
 80037e2:	4604      	mov	r4, r0
 80037e4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e6:	2214      	movs	r2, #20
 80037e8:	2100      	movs	r1, #0
 80037ea:	a803      	add	r0, sp, #12
 80037ec:	f000 f884 	bl	80038f8 <memset>
  if(uartHandle->Instance==USART2)
 80037f0:	6822      	ldr	r2, [r4, #0]
 80037f2:	4b15      	ldr	r3, [pc, #84]	; (8003848 <HAL_UART_MspInit+0x68>)
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d124      	bne.n	8003842 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80037f8:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80037fc:	2100      	movs	r1, #0
 80037fe:	9101      	str	r1, [sp, #4]
 8003800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003802:	4812      	ldr	r0, [pc, #72]	; (800384c <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003804:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003808:	641a      	str	r2, [r3, #64]	; 0x40
 800380a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800380c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003810:	9201      	str	r2, [sp, #4]
 8003812:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003814:	9102      	str	r1, [sp, #8]
 8003816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003818:	f042 0201 	orr.w	r2, r2, #1
 800381c:	631a      	str	r2, [r3, #48]	; 0x30
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	9302      	str	r3, [sp, #8]
 8003826:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003828:	230c      	movs	r3, #12
 800382a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800382c:	2302      	movs	r3, #2
 800382e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003830:	2301      	movs	r3, #1
 8003832:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003834:	2303      	movs	r3, #3
 8003836:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003838:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800383a:	2307      	movs	r3, #7
 800383c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800383e:	f7fe fa27 	bl	8001c90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003842:	b008      	add	sp, #32
 8003844:	bd10      	pop	{r4, pc}
 8003846:	bf00      	nop
 8003848:	40004400 	.word	0x40004400
 800384c:	40020000 	.word	0x40020000

08003850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003888 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003854:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003856:	e003      	b.n	8003860 <LoopCopyDataInit>

08003858 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003858:	4b0c      	ldr	r3, [pc, #48]	; (800388c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800385a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800385c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800385e:	3104      	adds	r1, #4

08003860 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003860:	480b      	ldr	r0, [pc, #44]	; (8003890 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003862:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003864:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003866:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003868:	d3f6      	bcc.n	8003858 <CopyDataInit>
  ldr  r2, =_sbss
 800386a:	4a0b      	ldr	r2, [pc, #44]	; (8003898 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800386c:	e002      	b.n	8003874 <LoopFillZerobss>

0800386e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800386e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003870:	f842 3b04 	str.w	r3, [r2], #4

08003874 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003874:	4b09      	ldr	r3, [pc, #36]	; (800389c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003876:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003878:	d3f9      	bcc.n	800386e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800387a:	f7ff feb1 	bl	80035e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800387e:	f000 f817 	bl	80038b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003882:	f7ff fc93 	bl	80031ac <main>
  bx  lr    
 8003886:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003888:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800388c:	08006550 	.word	0x08006550
  ldr  r0, =_sdata
 8003890:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003894:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8003898:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 800389c:	20000918 	.word	0x20000918

080038a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038a0:	e7fe      	b.n	80038a0 <ADC_IRQHandler>
	...

080038a4 <__errno>:
 80038a4:	4b01      	ldr	r3, [pc, #4]	; (80038ac <__errno+0x8>)
 80038a6:	6818      	ldr	r0, [r3, #0]
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	20000014 	.word	0x20000014

080038b0 <__libc_init_array>:
 80038b0:	b570      	push	{r4, r5, r6, lr}
 80038b2:	4e0d      	ldr	r6, [pc, #52]	; (80038e8 <__libc_init_array+0x38>)
 80038b4:	4c0d      	ldr	r4, [pc, #52]	; (80038ec <__libc_init_array+0x3c>)
 80038b6:	1ba4      	subs	r4, r4, r6
 80038b8:	10a4      	asrs	r4, r4, #2
 80038ba:	2500      	movs	r5, #0
 80038bc:	42a5      	cmp	r5, r4
 80038be:	d109      	bne.n	80038d4 <__libc_init_array+0x24>
 80038c0:	4e0b      	ldr	r6, [pc, #44]	; (80038f0 <__libc_init_array+0x40>)
 80038c2:	4c0c      	ldr	r4, [pc, #48]	; (80038f4 <__libc_init_array+0x44>)
 80038c4:	f002 f880 	bl	80059c8 <_init>
 80038c8:	1ba4      	subs	r4, r4, r6
 80038ca:	10a4      	asrs	r4, r4, #2
 80038cc:	2500      	movs	r5, #0
 80038ce:	42a5      	cmp	r5, r4
 80038d0:	d105      	bne.n	80038de <__libc_init_array+0x2e>
 80038d2:	bd70      	pop	{r4, r5, r6, pc}
 80038d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038d8:	4798      	blx	r3
 80038da:	3501      	adds	r5, #1
 80038dc:	e7ee      	b.n	80038bc <__libc_init_array+0xc>
 80038de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038e2:	4798      	blx	r3
 80038e4:	3501      	adds	r5, #1
 80038e6:	e7f2      	b.n	80038ce <__libc_init_array+0x1e>
 80038e8:	08006548 	.word	0x08006548
 80038ec:	08006548 	.word	0x08006548
 80038f0:	08006548 	.word	0x08006548
 80038f4:	0800654c 	.word	0x0800654c

080038f8 <memset>:
 80038f8:	4402      	add	r2, r0
 80038fa:	4603      	mov	r3, r0
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d100      	bne.n	8003902 <memset+0xa>
 8003900:	4770      	bx	lr
 8003902:	f803 1b01 	strb.w	r1, [r3], #1
 8003906:	e7f9      	b.n	80038fc <memset+0x4>

08003908 <__cvt>:
 8003908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800390c:	ec55 4b10 	vmov	r4, r5, d0
 8003910:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003912:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003916:	2d00      	cmp	r5, #0
 8003918:	460e      	mov	r6, r1
 800391a:	4691      	mov	r9, r2
 800391c:	4619      	mov	r1, r3
 800391e:	bfb8      	it	lt
 8003920:	4622      	movlt	r2, r4
 8003922:	462b      	mov	r3, r5
 8003924:	f027 0720 	bic.w	r7, r7, #32
 8003928:	bfbb      	ittet	lt
 800392a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800392e:	461d      	movlt	r5, r3
 8003930:	2300      	movge	r3, #0
 8003932:	232d      	movlt	r3, #45	; 0x2d
 8003934:	bfb8      	it	lt
 8003936:	4614      	movlt	r4, r2
 8003938:	2f46      	cmp	r7, #70	; 0x46
 800393a:	700b      	strb	r3, [r1, #0]
 800393c:	d004      	beq.n	8003948 <__cvt+0x40>
 800393e:	2f45      	cmp	r7, #69	; 0x45
 8003940:	d100      	bne.n	8003944 <__cvt+0x3c>
 8003942:	3601      	adds	r6, #1
 8003944:	2102      	movs	r1, #2
 8003946:	e000      	b.n	800394a <__cvt+0x42>
 8003948:	2103      	movs	r1, #3
 800394a:	ab03      	add	r3, sp, #12
 800394c:	9301      	str	r3, [sp, #4]
 800394e:	ab02      	add	r3, sp, #8
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	4632      	mov	r2, r6
 8003954:	4653      	mov	r3, sl
 8003956:	ec45 4b10 	vmov	d0, r4, r5
 800395a:	f000 fcf1 	bl	8004340 <_dtoa_r>
 800395e:	2f47      	cmp	r7, #71	; 0x47
 8003960:	4680      	mov	r8, r0
 8003962:	d102      	bne.n	800396a <__cvt+0x62>
 8003964:	f019 0f01 	tst.w	r9, #1
 8003968:	d026      	beq.n	80039b8 <__cvt+0xb0>
 800396a:	2f46      	cmp	r7, #70	; 0x46
 800396c:	eb08 0906 	add.w	r9, r8, r6
 8003970:	d111      	bne.n	8003996 <__cvt+0x8e>
 8003972:	f898 3000 	ldrb.w	r3, [r8]
 8003976:	2b30      	cmp	r3, #48	; 0x30
 8003978:	d10a      	bne.n	8003990 <__cvt+0x88>
 800397a:	2200      	movs	r2, #0
 800397c:	2300      	movs	r3, #0
 800397e:	4620      	mov	r0, r4
 8003980:	4629      	mov	r1, r5
 8003982:	f7fd f89d 	bl	8000ac0 <__aeabi_dcmpeq>
 8003986:	b918      	cbnz	r0, 8003990 <__cvt+0x88>
 8003988:	f1c6 0601 	rsb	r6, r6, #1
 800398c:	f8ca 6000 	str.w	r6, [sl]
 8003990:	f8da 3000 	ldr.w	r3, [sl]
 8003994:	4499      	add	r9, r3
 8003996:	2200      	movs	r2, #0
 8003998:	2300      	movs	r3, #0
 800399a:	4620      	mov	r0, r4
 800399c:	4629      	mov	r1, r5
 800399e:	f7fd f88f 	bl	8000ac0 <__aeabi_dcmpeq>
 80039a2:	b938      	cbnz	r0, 80039b4 <__cvt+0xac>
 80039a4:	2230      	movs	r2, #48	; 0x30
 80039a6:	9b03      	ldr	r3, [sp, #12]
 80039a8:	4599      	cmp	r9, r3
 80039aa:	d905      	bls.n	80039b8 <__cvt+0xb0>
 80039ac:	1c59      	adds	r1, r3, #1
 80039ae:	9103      	str	r1, [sp, #12]
 80039b0:	701a      	strb	r2, [r3, #0]
 80039b2:	e7f8      	b.n	80039a6 <__cvt+0x9e>
 80039b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80039b8:	9b03      	ldr	r3, [sp, #12]
 80039ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80039bc:	eba3 0308 	sub.w	r3, r3, r8
 80039c0:	4640      	mov	r0, r8
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	b004      	add	sp, #16
 80039c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080039ca <__exponent>:
 80039ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039cc:	4603      	mov	r3, r0
 80039ce:	2900      	cmp	r1, #0
 80039d0:	bfb8      	it	lt
 80039d2:	4249      	neglt	r1, r1
 80039d4:	f803 2b02 	strb.w	r2, [r3], #2
 80039d8:	bfb4      	ite	lt
 80039da:	222d      	movlt	r2, #45	; 0x2d
 80039dc:	222b      	movge	r2, #43	; 0x2b
 80039de:	2909      	cmp	r1, #9
 80039e0:	7042      	strb	r2, [r0, #1]
 80039e2:	dd20      	ble.n	8003a26 <__exponent+0x5c>
 80039e4:	f10d 0207 	add.w	r2, sp, #7
 80039e8:	4617      	mov	r7, r2
 80039ea:	260a      	movs	r6, #10
 80039ec:	fb91 f5f6 	sdiv	r5, r1, r6
 80039f0:	fb06 1115 	mls	r1, r6, r5, r1
 80039f4:	3130      	adds	r1, #48	; 0x30
 80039f6:	2d09      	cmp	r5, #9
 80039f8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80039fc:	f102 34ff 	add.w	r4, r2, #4294967295
 8003a00:	4629      	mov	r1, r5
 8003a02:	dc09      	bgt.n	8003a18 <__exponent+0x4e>
 8003a04:	3130      	adds	r1, #48	; 0x30
 8003a06:	3a02      	subs	r2, #2
 8003a08:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003a0c:	42ba      	cmp	r2, r7
 8003a0e:	461c      	mov	r4, r3
 8003a10:	d304      	bcc.n	8003a1c <__exponent+0x52>
 8003a12:	1a20      	subs	r0, r4, r0
 8003a14:	b003      	add	sp, #12
 8003a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a18:	4622      	mov	r2, r4
 8003a1a:	e7e7      	b.n	80039ec <__exponent+0x22>
 8003a1c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003a20:	f803 1b01 	strb.w	r1, [r3], #1
 8003a24:	e7f2      	b.n	8003a0c <__exponent+0x42>
 8003a26:	2230      	movs	r2, #48	; 0x30
 8003a28:	461c      	mov	r4, r3
 8003a2a:	4411      	add	r1, r2
 8003a2c:	f804 2b02 	strb.w	r2, [r4], #2
 8003a30:	7059      	strb	r1, [r3, #1]
 8003a32:	e7ee      	b.n	8003a12 <__exponent+0x48>

08003a34 <_printf_float>:
 8003a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a38:	b08d      	sub	sp, #52	; 0x34
 8003a3a:	460c      	mov	r4, r1
 8003a3c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003a40:	4616      	mov	r6, r2
 8003a42:	461f      	mov	r7, r3
 8003a44:	4605      	mov	r5, r0
 8003a46:	f001 fa49 	bl	8004edc <_localeconv_r>
 8003a4a:	6803      	ldr	r3, [r0, #0]
 8003a4c:	9304      	str	r3, [sp, #16]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fc fbbe 	bl	80001d0 <strlen>
 8003a54:	2300      	movs	r3, #0
 8003a56:	930a      	str	r3, [sp, #40]	; 0x28
 8003a58:	f8d8 3000 	ldr.w	r3, [r8]
 8003a5c:	9005      	str	r0, [sp, #20]
 8003a5e:	3307      	adds	r3, #7
 8003a60:	f023 0307 	bic.w	r3, r3, #7
 8003a64:	f103 0208 	add.w	r2, r3, #8
 8003a68:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003a6c:	f8d4 b000 	ldr.w	fp, [r4]
 8003a70:	f8c8 2000 	str.w	r2, [r8]
 8003a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a78:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003a7c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003a80:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003a84:	9307      	str	r3, [sp, #28]
 8003a86:	f8cd 8018 	str.w	r8, [sp, #24]
 8003a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a8e:	4ba5      	ldr	r3, [pc, #660]	; (8003d24 <_printf_float+0x2f0>)
 8003a90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a94:	f7fd f846 	bl	8000b24 <__aeabi_dcmpun>
 8003a98:	2800      	cmp	r0, #0
 8003a9a:	f040 81fb 	bne.w	8003e94 <_printf_float+0x460>
 8003a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa2:	4ba0      	ldr	r3, [pc, #640]	; (8003d24 <_printf_float+0x2f0>)
 8003aa4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003aa8:	f7fd f81e 	bl	8000ae8 <__aeabi_dcmple>
 8003aac:	2800      	cmp	r0, #0
 8003aae:	f040 81f1 	bne.w	8003e94 <_printf_float+0x460>
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	4640      	mov	r0, r8
 8003ab8:	4649      	mov	r1, r9
 8003aba:	f7fd f80b 	bl	8000ad4 <__aeabi_dcmplt>
 8003abe:	b110      	cbz	r0, 8003ac6 <_printf_float+0x92>
 8003ac0:	232d      	movs	r3, #45	; 0x2d
 8003ac2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ac6:	4b98      	ldr	r3, [pc, #608]	; (8003d28 <_printf_float+0x2f4>)
 8003ac8:	4a98      	ldr	r2, [pc, #608]	; (8003d2c <_printf_float+0x2f8>)
 8003aca:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003ace:	bf8c      	ite	hi
 8003ad0:	4690      	movhi	r8, r2
 8003ad2:	4698      	movls	r8, r3
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	f02b 0204 	bic.w	r2, fp, #4
 8003ada:	6123      	str	r3, [r4, #16]
 8003adc:	6022      	str	r2, [r4, #0]
 8003ade:	f04f 0900 	mov.w	r9, #0
 8003ae2:	9700      	str	r7, [sp, #0]
 8003ae4:	4633      	mov	r3, r6
 8003ae6:	aa0b      	add	r2, sp, #44	; 0x2c
 8003ae8:	4621      	mov	r1, r4
 8003aea:	4628      	mov	r0, r5
 8003aec:	f000 f9e2 	bl	8003eb4 <_printf_common>
 8003af0:	3001      	adds	r0, #1
 8003af2:	f040 8093 	bne.w	8003c1c <_printf_float+0x1e8>
 8003af6:	f04f 30ff 	mov.w	r0, #4294967295
 8003afa:	b00d      	add	sp, #52	; 0x34
 8003afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b00:	6861      	ldr	r1, [r4, #4]
 8003b02:	1c4b      	adds	r3, r1, #1
 8003b04:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003b08:	d13f      	bne.n	8003b8a <_printf_float+0x156>
 8003b0a:	2306      	movs	r3, #6
 8003b0c:	6063      	str	r3, [r4, #4]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	9303      	str	r3, [sp, #12]
 8003b12:	ab0a      	add	r3, sp, #40	; 0x28
 8003b14:	9302      	str	r3, [sp, #8]
 8003b16:	ab09      	add	r3, sp, #36	; 0x24
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	ec49 8b10 	vmov	d0, r8, r9
 8003b1e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003b22:	6022      	str	r2, [r4, #0]
 8003b24:	f8cd a004 	str.w	sl, [sp, #4]
 8003b28:	6861      	ldr	r1, [r4, #4]
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	f7ff feec 	bl	8003908 <__cvt>
 8003b30:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003b34:	2b47      	cmp	r3, #71	; 0x47
 8003b36:	4680      	mov	r8, r0
 8003b38:	d109      	bne.n	8003b4e <_printf_float+0x11a>
 8003b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b3c:	1cd8      	adds	r0, r3, #3
 8003b3e:	db02      	blt.n	8003b46 <_printf_float+0x112>
 8003b40:	6862      	ldr	r2, [r4, #4]
 8003b42:	4293      	cmp	r3, r2
 8003b44:	dd57      	ble.n	8003bf6 <_printf_float+0x1c2>
 8003b46:	f1aa 0a02 	sub.w	sl, sl, #2
 8003b4a:	fa5f fa8a 	uxtb.w	sl, sl
 8003b4e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003b52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b54:	d834      	bhi.n	8003bc0 <_printf_float+0x18c>
 8003b56:	3901      	subs	r1, #1
 8003b58:	4652      	mov	r2, sl
 8003b5a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003b5e:	9109      	str	r1, [sp, #36]	; 0x24
 8003b60:	f7ff ff33 	bl	80039ca <__exponent>
 8003b64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b66:	1883      	adds	r3, r0, r2
 8003b68:	2a01      	cmp	r2, #1
 8003b6a:	4681      	mov	r9, r0
 8003b6c:	6123      	str	r3, [r4, #16]
 8003b6e:	dc02      	bgt.n	8003b76 <_printf_float+0x142>
 8003b70:	6822      	ldr	r2, [r4, #0]
 8003b72:	07d1      	lsls	r1, r2, #31
 8003b74:	d501      	bpl.n	8003b7a <_printf_float+0x146>
 8003b76:	3301      	adds	r3, #1
 8003b78:	6123      	str	r3, [r4, #16]
 8003b7a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0af      	beq.n	8003ae2 <_printf_float+0xae>
 8003b82:	232d      	movs	r3, #45	; 0x2d
 8003b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b88:	e7ab      	b.n	8003ae2 <_printf_float+0xae>
 8003b8a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003b8e:	d002      	beq.n	8003b96 <_printf_float+0x162>
 8003b90:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003b94:	d1bb      	bne.n	8003b0e <_printf_float+0xda>
 8003b96:	b189      	cbz	r1, 8003bbc <_printf_float+0x188>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	9303      	str	r3, [sp, #12]
 8003b9c:	ab0a      	add	r3, sp, #40	; 0x28
 8003b9e:	9302      	str	r3, [sp, #8]
 8003ba0:	ab09      	add	r3, sp, #36	; 0x24
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	ec49 8b10 	vmov	d0, r8, r9
 8003ba8:	6022      	str	r2, [r4, #0]
 8003baa:	f8cd a004 	str.w	sl, [sp, #4]
 8003bae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	f7ff fea8 	bl	8003908 <__cvt>
 8003bb8:	4680      	mov	r8, r0
 8003bba:	e7be      	b.n	8003b3a <_printf_float+0x106>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e7a5      	b.n	8003b0c <_printf_float+0xd8>
 8003bc0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003bc4:	d119      	bne.n	8003bfa <_printf_float+0x1c6>
 8003bc6:	2900      	cmp	r1, #0
 8003bc8:	6863      	ldr	r3, [r4, #4]
 8003bca:	dd0c      	ble.n	8003be6 <_printf_float+0x1b2>
 8003bcc:	6121      	str	r1, [r4, #16]
 8003bce:	b913      	cbnz	r3, 8003bd6 <_printf_float+0x1a2>
 8003bd0:	6822      	ldr	r2, [r4, #0]
 8003bd2:	07d2      	lsls	r2, r2, #31
 8003bd4:	d502      	bpl.n	8003bdc <_printf_float+0x1a8>
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	440b      	add	r3, r1
 8003bda:	6123      	str	r3, [r4, #16]
 8003bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bde:	65a3      	str	r3, [r4, #88]	; 0x58
 8003be0:	f04f 0900 	mov.w	r9, #0
 8003be4:	e7c9      	b.n	8003b7a <_printf_float+0x146>
 8003be6:	b913      	cbnz	r3, 8003bee <_printf_float+0x1ba>
 8003be8:	6822      	ldr	r2, [r4, #0]
 8003bea:	07d0      	lsls	r0, r2, #31
 8003bec:	d501      	bpl.n	8003bf2 <_printf_float+0x1be>
 8003bee:	3302      	adds	r3, #2
 8003bf0:	e7f3      	b.n	8003bda <_printf_float+0x1a6>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e7f1      	b.n	8003bda <_printf_float+0x1a6>
 8003bf6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8003bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	db05      	blt.n	8003c0e <_printf_float+0x1da>
 8003c02:	6822      	ldr	r2, [r4, #0]
 8003c04:	6123      	str	r3, [r4, #16]
 8003c06:	07d1      	lsls	r1, r2, #31
 8003c08:	d5e8      	bpl.n	8003bdc <_printf_float+0x1a8>
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	e7e5      	b.n	8003bda <_printf_float+0x1a6>
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	bfd4      	ite	le
 8003c12:	f1c3 0302 	rsble	r3, r3, #2
 8003c16:	2301      	movgt	r3, #1
 8003c18:	4413      	add	r3, r2
 8003c1a:	e7de      	b.n	8003bda <_printf_float+0x1a6>
 8003c1c:	6823      	ldr	r3, [r4, #0]
 8003c1e:	055a      	lsls	r2, r3, #21
 8003c20:	d407      	bmi.n	8003c32 <_printf_float+0x1fe>
 8003c22:	6923      	ldr	r3, [r4, #16]
 8003c24:	4642      	mov	r2, r8
 8003c26:	4631      	mov	r1, r6
 8003c28:	4628      	mov	r0, r5
 8003c2a:	47b8      	blx	r7
 8003c2c:	3001      	adds	r0, #1
 8003c2e:	d12b      	bne.n	8003c88 <_printf_float+0x254>
 8003c30:	e761      	b.n	8003af6 <_printf_float+0xc2>
 8003c32:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003c36:	f240 80e2 	bls.w	8003dfe <_printf_float+0x3ca>
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c42:	f7fc ff3d 	bl	8000ac0 <__aeabi_dcmpeq>
 8003c46:	2800      	cmp	r0, #0
 8003c48:	d03c      	beq.n	8003cc4 <_printf_float+0x290>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	4a38      	ldr	r2, [pc, #224]	; (8003d30 <_printf_float+0x2fc>)
 8003c4e:	4631      	mov	r1, r6
 8003c50:	4628      	mov	r0, r5
 8003c52:	47b8      	blx	r7
 8003c54:	3001      	adds	r0, #1
 8003c56:	f43f af4e 	beq.w	8003af6 <_printf_float+0xc2>
 8003c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	db02      	blt.n	8003c68 <_printf_float+0x234>
 8003c62:	6823      	ldr	r3, [r4, #0]
 8003c64:	07d8      	lsls	r0, r3, #31
 8003c66:	d50f      	bpl.n	8003c88 <_printf_float+0x254>
 8003c68:	9b05      	ldr	r3, [sp, #20]
 8003c6a:	9a04      	ldr	r2, [sp, #16]
 8003c6c:	4631      	mov	r1, r6
 8003c6e:	4628      	mov	r0, r5
 8003c70:	47b8      	blx	r7
 8003c72:	3001      	adds	r0, #1
 8003c74:	f43f af3f 	beq.w	8003af6 <_printf_float+0xc2>
 8003c78:	f04f 0800 	mov.w	r8, #0
 8003c7c:	f104 091a 	add.w	r9, r4, #26
 8003c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c82:	3b01      	subs	r3, #1
 8003c84:	4598      	cmp	r8, r3
 8003c86:	db12      	blt.n	8003cae <_printf_float+0x27a>
 8003c88:	6823      	ldr	r3, [r4, #0]
 8003c8a:	079b      	lsls	r3, r3, #30
 8003c8c:	d509      	bpl.n	8003ca2 <_printf_float+0x26e>
 8003c8e:	f04f 0800 	mov.w	r8, #0
 8003c92:	f104 0919 	add.w	r9, r4, #25
 8003c96:	68e3      	ldr	r3, [r4, #12]
 8003c98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	4598      	cmp	r8, r3
 8003c9e:	f2c0 80ee 	blt.w	8003e7e <_printf_float+0x44a>
 8003ca2:	68e0      	ldr	r0, [r4, #12]
 8003ca4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ca6:	4298      	cmp	r0, r3
 8003ca8:	bfb8      	it	lt
 8003caa:	4618      	movlt	r0, r3
 8003cac:	e725      	b.n	8003afa <_printf_float+0xc6>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	464a      	mov	r2, r9
 8003cb2:	4631      	mov	r1, r6
 8003cb4:	4628      	mov	r0, r5
 8003cb6:	47b8      	blx	r7
 8003cb8:	3001      	adds	r0, #1
 8003cba:	f43f af1c 	beq.w	8003af6 <_printf_float+0xc2>
 8003cbe:	f108 0801 	add.w	r8, r8, #1
 8003cc2:	e7dd      	b.n	8003c80 <_printf_float+0x24c>
 8003cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	dc34      	bgt.n	8003d34 <_printf_float+0x300>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	4a18      	ldr	r2, [pc, #96]	; (8003d30 <_printf_float+0x2fc>)
 8003cce:	4631      	mov	r1, r6
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	47b8      	blx	r7
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	f43f af0e 	beq.w	8003af6 <_printf_float+0xc2>
 8003cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cdc:	b923      	cbnz	r3, 8003ce8 <_printf_float+0x2b4>
 8003cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ce0:	b913      	cbnz	r3, 8003ce8 <_printf_float+0x2b4>
 8003ce2:	6823      	ldr	r3, [r4, #0]
 8003ce4:	07d9      	lsls	r1, r3, #31
 8003ce6:	d5cf      	bpl.n	8003c88 <_printf_float+0x254>
 8003ce8:	9b05      	ldr	r3, [sp, #20]
 8003cea:	9a04      	ldr	r2, [sp, #16]
 8003cec:	4631      	mov	r1, r6
 8003cee:	4628      	mov	r0, r5
 8003cf0:	47b8      	blx	r7
 8003cf2:	3001      	adds	r0, #1
 8003cf4:	f43f aeff 	beq.w	8003af6 <_printf_float+0xc2>
 8003cf8:	f04f 0900 	mov.w	r9, #0
 8003cfc:	f104 0a1a 	add.w	sl, r4, #26
 8003d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d02:	425b      	negs	r3, r3
 8003d04:	4599      	cmp	r9, r3
 8003d06:	db01      	blt.n	8003d0c <_printf_float+0x2d8>
 8003d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d0a:	e78b      	b.n	8003c24 <_printf_float+0x1f0>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	4652      	mov	r2, sl
 8003d10:	4631      	mov	r1, r6
 8003d12:	4628      	mov	r0, r5
 8003d14:	47b8      	blx	r7
 8003d16:	3001      	adds	r0, #1
 8003d18:	f43f aeed 	beq.w	8003af6 <_printf_float+0xc2>
 8003d1c:	f109 0901 	add.w	r9, r9, #1
 8003d20:	e7ee      	b.n	8003d00 <_printf_float+0x2cc>
 8003d22:	bf00      	nop
 8003d24:	7fefffff 	.word	0x7fefffff
 8003d28:	080062e2 	.word	0x080062e2
 8003d2c:	080062e6 	.word	0x080062e6
 8003d30:	080062c2 	.word	0x080062c2
 8003d34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	bfa8      	it	ge
 8003d3c:	461a      	movge	r2, r3
 8003d3e:	2a00      	cmp	r2, #0
 8003d40:	4691      	mov	r9, r2
 8003d42:	dc38      	bgt.n	8003db6 <_printf_float+0x382>
 8003d44:	f104 031a 	add.w	r3, r4, #26
 8003d48:	f04f 0b00 	mov.w	fp, #0
 8003d4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d50:	9306      	str	r3, [sp, #24]
 8003d52:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003d56:	ebaa 0309 	sub.w	r3, sl, r9
 8003d5a:	459b      	cmp	fp, r3
 8003d5c:	db33      	blt.n	8003dc6 <_printf_float+0x392>
 8003d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d62:	429a      	cmp	r2, r3
 8003d64:	db3a      	blt.n	8003ddc <_printf_float+0x3a8>
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	07da      	lsls	r2, r3, #31
 8003d6a:	d437      	bmi.n	8003ddc <_printf_float+0x3a8>
 8003d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d70:	eba3 020a 	sub.w	r2, r3, sl
 8003d74:	eba3 0901 	sub.w	r9, r3, r1
 8003d78:	4591      	cmp	r9, r2
 8003d7a:	bfa8      	it	ge
 8003d7c:	4691      	movge	r9, r2
 8003d7e:	f1b9 0f00 	cmp.w	r9, #0
 8003d82:	dc33      	bgt.n	8003dec <_printf_float+0x3b8>
 8003d84:	f04f 0800 	mov.w	r8, #0
 8003d88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d8c:	f104 0a1a 	add.w	sl, r4, #26
 8003d90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	eba3 0309 	sub.w	r3, r3, r9
 8003d9a:	4598      	cmp	r8, r3
 8003d9c:	f6bf af74 	bge.w	8003c88 <_printf_float+0x254>
 8003da0:	2301      	movs	r3, #1
 8003da2:	4652      	mov	r2, sl
 8003da4:	4631      	mov	r1, r6
 8003da6:	4628      	mov	r0, r5
 8003da8:	47b8      	blx	r7
 8003daa:	3001      	adds	r0, #1
 8003dac:	f43f aea3 	beq.w	8003af6 <_printf_float+0xc2>
 8003db0:	f108 0801 	add.w	r8, r8, #1
 8003db4:	e7ec      	b.n	8003d90 <_printf_float+0x35c>
 8003db6:	4613      	mov	r3, r2
 8003db8:	4631      	mov	r1, r6
 8003dba:	4642      	mov	r2, r8
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	47b8      	blx	r7
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	d1bf      	bne.n	8003d44 <_printf_float+0x310>
 8003dc4:	e697      	b.n	8003af6 <_printf_float+0xc2>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	9a06      	ldr	r2, [sp, #24]
 8003dca:	4631      	mov	r1, r6
 8003dcc:	4628      	mov	r0, r5
 8003dce:	47b8      	blx	r7
 8003dd0:	3001      	adds	r0, #1
 8003dd2:	f43f ae90 	beq.w	8003af6 <_printf_float+0xc2>
 8003dd6:	f10b 0b01 	add.w	fp, fp, #1
 8003dda:	e7ba      	b.n	8003d52 <_printf_float+0x31e>
 8003ddc:	9b05      	ldr	r3, [sp, #20]
 8003dde:	9a04      	ldr	r2, [sp, #16]
 8003de0:	4631      	mov	r1, r6
 8003de2:	4628      	mov	r0, r5
 8003de4:	47b8      	blx	r7
 8003de6:	3001      	adds	r0, #1
 8003de8:	d1c0      	bne.n	8003d6c <_printf_float+0x338>
 8003dea:	e684      	b.n	8003af6 <_printf_float+0xc2>
 8003dec:	464b      	mov	r3, r9
 8003dee:	eb08 020a 	add.w	r2, r8, sl
 8003df2:	4631      	mov	r1, r6
 8003df4:	4628      	mov	r0, r5
 8003df6:	47b8      	blx	r7
 8003df8:	3001      	adds	r0, #1
 8003dfa:	d1c3      	bne.n	8003d84 <_printf_float+0x350>
 8003dfc:	e67b      	b.n	8003af6 <_printf_float+0xc2>
 8003dfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e00:	2a01      	cmp	r2, #1
 8003e02:	dc01      	bgt.n	8003e08 <_printf_float+0x3d4>
 8003e04:	07db      	lsls	r3, r3, #31
 8003e06:	d537      	bpl.n	8003e78 <_printf_float+0x444>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	4642      	mov	r2, r8
 8003e0c:	4631      	mov	r1, r6
 8003e0e:	4628      	mov	r0, r5
 8003e10:	47b8      	blx	r7
 8003e12:	3001      	adds	r0, #1
 8003e14:	f43f ae6f 	beq.w	8003af6 <_printf_float+0xc2>
 8003e18:	9b05      	ldr	r3, [sp, #20]
 8003e1a:	9a04      	ldr	r2, [sp, #16]
 8003e1c:	4631      	mov	r1, r6
 8003e1e:	4628      	mov	r0, r5
 8003e20:	47b8      	blx	r7
 8003e22:	3001      	adds	r0, #1
 8003e24:	f43f ae67 	beq.w	8003af6 <_printf_float+0xc2>
 8003e28:	2200      	movs	r2, #0
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e30:	f7fc fe46 	bl	8000ac0 <__aeabi_dcmpeq>
 8003e34:	b158      	cbz	r0, 8003e4e <_printf_float+0x41a>
 8003e36:	f04f 0800 	mov.w	r8, #0
 8003e3a:	f104 0a1a 	add.w	sl, r4, #26
 8003e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e40:	3b01      	subs	r3, #1
 8003e42:	4598      	cmp	r8, r3
 8003e44:	db0d      	blt.n	8003e62 <_printf_float+0x42e>
 8003e46:	464b      	mov	r3, r9
 8003e48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003e4c:	e6eb      	b.n	8003c26 <_printf_float+0x1f2>
 8003e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e50:	f108 0201 	add.w	r2, r8, #1
 8003e54:	3b01      	subs	r3, #1
 8003e56:	4631      	mov	r1, r6
 8003e58:	4628      	mov	r0, r5
 8003e5a:	47b8      	blx	r7
 8003e5c:	3001      	adds	r0, #1
 8003e5e:	d1f2      	bne.n	8003e46 <_printf_float+0x412>
 8003e60:	e649      	b.n	8003af6 <_printf_float+0xc2>
 8003e62:	2301      	movs	r3, #1
 8003e64:	4652      	mov	r2, sl
 8003e66:	4631      	mov	r1, r6
 8003e68:	4628      	mov	r0, r5
 8003e6a:	47b8      	blx	r7
 8003e6c:	3001      	adds	r0, #1
 8003e6e:	f43f ae42 	beq.w	8003af6 <_printf_float+0xc2>
 8003e72:	f108 0801 	add.w	r8, r8, #1
 8003e76:	e7e2      	b.n	8003e3e <_printf_float+0x40a>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	4642      	mov	r2, r8
 8003e7c:	e7eb      	b.n	8003e56 <_printf_float+0x422>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	464a      	mov	r2, r9
 8003e82:	4631      	mov	r1, r6
 8003e84:	4628      	mov	r0, r5
 8003e86:	47b8      	blx	r7
 8003e88:	3001      	adds	r0, #1
 8003e8a:	f43f ae34 	beq.w	8003af6 <_printf_float+0xc2>
 8003e8e:	f108 0801 	add.w	r8, r8, #1
 8003e92:	e700      	b.n	8003c96 <_printf_float+0x262>
 8003e94:	4642      	mov	r2, r8
 8003e96:	464b      	mov	r3, r9
 8003e98:	4640      	mov	r0, r8
 8003e9a:	4649      	mov	r1, r9
 8003e9c:	f7fc fe42 	bl	8000b24 <__aeabi_dcmpun>
 8003ea0:	2800      	cmp	r0, #0
 8003ea2:	f43f ae2d 	beq.w	8003b00 <_printf_float+0xcc>
 8003ea6:	4b01      	ldr	r3, [pc, #4]	; (8003eac <_printf_float+0x478>)
 8003ea8:	4a01      	ldr	r2, [pc, #4]	; (8003eb0 <_printf_float+0x47c>)
 8003eaa:	e60e      	b.n	8003aca <_printf_float+0x96>
 8003eac:	080062ea 	.word	0x080062ea
 8003eb0:	080062ee 	.word	0x080062ee

08003eb4 <_printf_common>:
 8003eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eb8:	4691      	mov	r9, r2
 8003eba:	461f      	mov	r7, r3
 8003ebc:	688a      	ldr	r2, [r1, #8]
 8003ebe:	690b      	ldr	r3, [r1, #16]
 8003ec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	bfb8      	it	lt
 8003ec8:	4613      	movlt	r3, r2
 8003eca:	f8c9 3000 	str.w	r3, [r9]
 8003ece:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ed2:	4606      	mov	r6, r0
 8003ed4:	460c      	mov	r4, r1
 8003ed6:	b112      	cbz	r2, 8003ede <_printf_common+0x2a>
 8003ed8:	3301      	adds	r3, #1
 8003eda:	f8c9 3000 	str.w	r3, [r9]
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	0699      	lsls	r1, r3, #26
 8003ee2:	bf42      	ittt	mi
 8003ee4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ee8:	3302      	addmi	r3, #2
 8003eea:	f8c9 3000 	strmi.w	r3, [r9]
 8003eee:	6825      	ldr	r5, [r4, #0]
 8003ef0:	f015 0506 	ands.w	r5, r5, #6
 8003ef4:	d107      	bne.n	8003f06 <_printf_common+0x52>
 8003ef6:	f104 0a19 	add.w	sl, r4, #25
 8003efa:	68e3      	ldr	r3, [r4, #12]
 8003efc:	f8d9 2000 	ldr.w	r2, [r9]
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	429d      	cmp	r5, r3
 8003f04:	db29      	blt.n	8003f5a <_printf_common+0xa6>
 8003f06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003f0a:	6822      	ldr	r2, [r4, #0]
 8003f0c:	3300      	adds	r3, #0
 8003f0e:	bf18      	it	ne
 8003f10:	2301      	movne	r3, #1
 8003f12:	0692      	lsls	r2, r2, #26
 8003f14:	d42e      	bmi.n	8003f74 <_printf_common+0xc0>
 8003f16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f1a:	4639      	mov	r1, r7
 8003f1c:	4630      	mov	r0, r6
 8003f1e:	47c0      	blx	r8
 8003f20:	3001      	adds	r0, #1
 8003f22:	d021      	beq.n	8003f68 <_printf_common+0xb4>
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	68e5      	ldr	r5, [r4, #12]
 8003f28:	f8d9 2000 	ldr.w	r2, [r9]
 8003f2c:	f003 0306 	and.w	r3, r3, #6
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	bf08      	it	eq
 8003f34:	1aad      	subeq	r5, r5, r2
 8003f36:	68a3      	ldr	r3, [r4, #8]
 8003f38:	6922      	ldr	r2, [r4, #16]
 8003f3a:	bf0c      	ite	eq
 8003f3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f40:	2500      	movne	r5, #0
 8003f42:	4293      	cmp	r3, r2
 8003f44:	bfc4      	itt	gt
 8003f46:	1a9b      	subgt	r3, r3, r2
 8003f48:	18ed      	addgt	r5, r5, r3
 8003f4a:	f04f 0900 	mov.w	r9, #0
 8003f4e:	341a      	adds	r4, #26
 8003f50:	454d      	cmp	r5, r9
 8003f52:	d11b      	bne.n	8003f8c <_printf_common+0xd8>
 8003f54:	2000      	movs	r0, #0
 8003f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	4652      	mov	r2, sl
 8003f5e:	4639      	mov	r1, r7
 8003f60:	4630      	mov	r0, r6
 8003f62:	47c0      	blx	r8
 8003f64:	3001      	adds	r0, #1
 8003f66:	d103      	bne.n	8003f70 <_printf_common+0xbc>
 8003f68:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f70:	3501      	adds	r5, #1
 8003f72:	e7c2      	b.n	8003efa <_printf_common+0x46>
 8003f74:	18e1      	adds	r1, r4, r3
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	2030      	movs	r0, #48	; 0x30
 8003f7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f7e:	4422      	add	r2, r4
 8003f80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f88:	3302      	adds	r3, #2
 8003f8a:	e7c4      	b.n	8003f16 <_printf_common+0x62>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	4622      	mov	r2, r4
 8003f90:	4639      	mov	r1, r7
 8003f92:	4630      	mov	r0, r6
 8003f94:	47c0      	blx	r8
 8003f96:	3001      	adds	r0, #1
 8003f98:	d0e6      	beq.n	8003f68 <_printf_common+0xb4>
 8003f9a:	f109 0901 	add.w	r9, r9, #1
 8003f9e:	e7d7      	b.n	8003f50 <_printf_common+0x9c>

08003fa0 <_printf_i>:
 8003fa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003fa4:	4617      	mov	r7, r2
 8003fa6:	7e0a      	ldrb	r2, [r1, #24]
 8003fa8:	b085      	sub	sp, #20
 8003faa:	2a6e      	cmp	r2, #110	; 0x6e
 8003fac:	4698      	mov	r8, r3
 8003fae:	4606      	mov	r6, r0
 8003fb0:	460c      	mov	r4, r1
 8003fb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003fb4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003fb8:	f000 80bc 	beq.w	8004134 <_printf_i+0x194>
 8003fbc:	d81a      	bhi.n	8003ff4 <_printf_i+0x54>
 8003fbe:	2a63      	cmp	r2, #99	; 0x63
 8003fc0:	d02e      	beq.n	8004020 <_printf_i+0x80>
 8003fc2:	d80a      	bhi.n	8003fda <_printf_i+0x3a>
 8003fc4:	2a00      	cmp	r2, #0
 8003fc6:	f000 80c8 	beq.w	800415a <_printf_i+0x1ba>
 8003fca:	2a58      	cmp	r2, #88	; 0x58
 8003fcc:	f000 808a 	beq.w	80040e4 <_printf_i+0x144>
 8003fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fd4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003fd8:	e02a      	b.n	8004030 <_printf_i+0x90>
 8003fda:	2a64      	cmp	r2, #100	; 0x64
 8003fdc:	d001      	beq.n	8003fe2 <_printf_i+0x42>
 8003fde:	2a69      	cmp	r2, #105	; 0x69
 8003fe0:	d1f6      	bne.n	8003fd0 <_printf_i+0x30>
 8003fe2:	6821      	ldr	r1, [r4, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003fea:	d023      	beq.n	8004034 <_printf_i+0x94>
 8003fec:	1d11      	adds	r1, r2, #4
 8003fee:	6019      	str	r1, [r3, #0]
 8003ff0:	6813      	ldr	r3, [r2, #0]
 8003ff2:	e027      	b.n	8004044 <_printf_i+0xa4>
 8003ff4:	2a73      	cmp	r2, #115	; 0x73
 8003ff6:	f000 80b4 	beq.w	8004162 <_printf_i+0x1c2>
 8003ffa:	d808      	bhi.n	800400e <_printf_i+0x6e>
 8003ffc:	2a6f      	cmp	r2, #111	; 0x6f
 8003ffe:	d02a      	beq.n	8004056 <_printf_i+0xb6>
 8004000:	2a70      	cmp	r2, #112	; 0x70
 8004002:	d1e5      	bne.n	8003fd0 <_printf_i+0x30>
 8004004:	680a      	ldr	r2, [r1, #0]
 8004006:	f042 0220 	orr.w	r2, r2, #32
 800400a:	600a      	str	r2, [r1, #0]
 800400c:	e003      	b.n	8004016 <_printf_i+0x76>
 800400e:	2a75      	cmp	r2, #117	; 0x75
 8004010:	d021      	beq.n	8004056 <_printf_i+0xb6>
 8004012:	2a78      	cmp	r2, #120	; 0x78
 8004014:	d1dc      	bne.n	8003fd0 <_printf_i+0x30>
 8004016:	2278      	movs	r2, #120	; 0x78
 8004018:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800401c:	496e      	ldr	r1, [pc, #440]	; (80041d8 <_printf_i+0x238>)
 800401e:	e064      	b.n	80040ea <_printf_i+0x14a>
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8004026:	1d11      	adds	r1, r2, #4
 8004028:	6019      	str	r1, [r3, #0]
 800402a:	6813      	ldr	r3, [r2, #0]
 800402c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004030:	2301      	movs	r3, #1
 8004032:	e0a3      	b.n	800417c <_printf_i+0x1dc>
 8004034:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004038:	f102 0104 	add.w	r1, r2, #4
 800403c:	6019      	str	r1, [r3, #0]
 800403e:	d0d7      	beq.n	8003ff0 <_printf_i+0x50>
 8004040:	f9b2 3000 	ldrsh.w	r3, [r2]
 8004044:	2b00      	cmp	r3, #0
 8004046:	da03      	bge.n	8004050 <_printf_i+0xb0>
 8004048:	222d      	movs	r2, #45	; 0x2d
 800404a:	425b      	negs	r3, r3
 800404c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004050:	4962      	ldr	r1, [pc, #392]	; (80041dc <_printf_i+0x23c>)
 8004052:	220a      	movs	r2, #10
 8004054:	e017      	b.n	8004086 <_printf_i+0xe6>
 8004056:	6820      	ldr	r0, [r4, #0]
 8004058:	6819      	ldr	r1, [r3, #0]
 800405a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800405e:	d003      	beq.n	8004068 <_printf_i+0xc8>
 8004060:	1d08      	adds	r0, r1, #4
 8004062:	6018      	str	r0, [r3, #0]
 8004064:	680b      	ldr	r3, [r1, #0]
 8004066:	e006      	b.n	8004076 <_printf_i+0xd6>
 8004068:	f010 0f40 	tst.w	r0, #64	; 0x40
 800406c:	f101 0004 	add.w	r0, r1, #4
 8004070:	6018      	str	r0, [r3, #0]
 8004072:	d0f7      	beq.n	8004064 <_printf_i+0xc4>
 8004074:	880b      	ldrh	r3, [r1, #0]
 8004076:	4959      	ldr	r1, [pc, #356]	; (80041dc <_printf_i+0x23c>)
 8004078:	2a6f      	cmp	r2, #111	; 0x6f
 800407a:	bf14      	ite	ne
 800407c:	220a      	movne	r2, #10
 800407e:	2208      	moveq	r2, #8
 8004080:	2000      	movs	r0, #0
 8004082:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004086:	6865      	ldr	r5, [r4, #4]
 8004088:	60a5      	str	r5, [r4, #8]
 800408a:	2d00      	cmp	r5, #0
 800408c:	f2c0 809c 	blt.w	80041c8 <_printf_i+0x228>
 8004090:	6820      	ldr	r0, [r4, #0]
 8004092:	f020 0004 	bic.w	r0, r0, #4
 8004096:	6020      	str	r0, [r4, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d13f      	bne.n	800411c <_printf_i+0x17c>
 800409c:	2d00      	cmp	r5, #0
 800409e:	f040 8095 	bne.w	80041cc <_printf_i+0x22c>
 80040a2:	4675      	mov	r5, lr
 80040a4:	2a08      	cmp	r2, #8
 80040a6:	d10b      	bne.n	80040c0 <_printf_i+0x120>
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	07da      	lsls	r2, r3, #31
 80040ac:	d508      	bpl.n	80040c0 <_printf_i+0x120>
 80040ae:	6923      	ldr	r3, [r4, #16]
 80040b0:	6862      	ldr	r2, [r4, #4]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	bfde      	ittt	le
 80040b6:	2330      	movle	r3, #48	; 0x30
 80040b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80040bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80040c0:	ebae 0305 	sub.w	r3, lr, r5
 80040c4:	6123      	str	r3, [r4, #16]
 80040c6:	f8cd 8000 	str.w	r8, [sp]
 80040ca:	463b      	mov	r3, r7
 80040cc:	aa03      	add	r2, sp, #12
 80040ce:	4621      	mov	r1, r4
 80040d0:	4630      	mov	r0, r6
 80040d2:	f7ff feef 	bl	8003eb4 <_printf_common>
 80040d6:	3001      	adds	r0, #1
 80040d8:	d155      	bne.n	8004186 <_printf_i+0x1e6>
 80040da:	f04f 30ff 	mov.w	r0, #4294967295
 80040de:	b005      	add	sp, #20
 80040e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040e4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80040e8:	493c      	ldr	r1, [pc, #240]	; (80041dc <_printf_i+0x23c>)
 80040ea:	6822      	ldr	r2, [r4, #0]
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	f012 0f80 	tst.w	r2, #128	; 0x80
 80040f2:	f100 0504 	add.w	r5, r0, #4
 80040f6:	601d      	str	r5, [r3, #0]
 80040f8:	d001      	beq.n	80040fe <_printf_i+0x15e>
 80040fa:	6803      	ldr	r3, [r0, #0]
 80040fc:	e002      	b.n	8004104 <_printf_i+0x164>
 80040fe:	0655      	lsls	r5, r2, #25
 8004100:	d5fb      	bpl.n	80040fa <_printf_i+0x15a>
 8004102:	8803      	ldrh	r3, [r0, #0]
 8004104:	07d0      	lsls	r0, r2, #31
 8004106:	bf44      	itt	mi
 8004108:	f042 0220 	orrmi.w	r2, r2, #32
 800410c:	6022      	strmi	r2, [r4, #0]
 800410e:	b91b      	cbnz	r3, 8004118 <_printf_i+0x178>
 8004110:	6822      	ldr	r2, [r4, #0]
 8004112:	f022 0220 	bic.w	r2, r2, #32
 8004116:	6022      	str	r2, [r4, #0]
 8004118:	2210      	movs	r2, #16
 800411a:	e7b1      	b.n	8004080 <_printf_i+0xe0>
 800411c:	4675      	mov	r5, lr
 800411e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004122:	fb02 3310 	mls	r3, r2, r0, r3
 8004126:	5ccb      	ldrb	r3, [r1, r3]
 8004128:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800412c:	4603      	mov	r3, r0
 800412e:	2800      	cmp	r0, #0
 8004130:	d1f5      	bne.n	800411e <_printf_i+0x17e>
 8004132:	e7b7      	b.n	80040a4 <_printf_i+0x104>
 8004134:	6808      	ldr	r0, [r1, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	6949      	ldr	r1, [r1, #20]
 800413a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800413e:	d004      	beq.n	800414a <_printf_i+0x1aa>
 8004140:	1d10      	adds	r0, r2, #4
 8004142:	6018      	str	r0, [r3, #0]
 8004144:	6813      	ldr	r3, [r2, #0]
 8004146:	6019      	str	r1, [r3, #0]
 8004148:	e007      	b.n	800415a <_printf_i+0x1ba>
 800414a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800414e:	f102 0004 	add.w	r0, r2, #4
 8004152:	6018      	str	r0, [r3, #0]
 8004154:	6813      	ldr	r3, [r2, #0]
 8004156:	d0f6      	beq.n	8004146 <_printf_i+0x1a6>
 8004158:	8019      	strh	r1, [r3, #0]
 800415a:	2300      	movs	r3, #0
 800415c:	6123      	str	r3, [r4, #16]
 800415e:	4675      	mov	r5, lr
 8004160:	e7b1      	b.n	80040c6 <_printf_i+0x126>
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	1d11      	adds	r1, r2, #4
 8004166:	6019      	str	r1, [r3, #0]
 8004168:	6815      	ldr	r5, [r2, #0]
 800416a:	6862      	ldr	r2, [r4, #4]
 800416c:	2100      	movs	r1, #0
 800416e:	4628      	mov	r0, r5
 8004170:	f7fc f836 	bl	80001e0 <memchr>
 8004174:	b108      	cbz	r0, 800417a <_printf_i+0x1da>
 8004176:	1b40      	subs	r0, r0, r5
 8004178:	6060      	str	r0, [r4, #4]
 800417a:	6863      	ldr	r3, [r4, #4]
 800417c:	6123      	str	r3, [r4, #16]
 800417e:	2300      	movs	r3, #0
 8004180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004184:	e79f      	b.n	80040c6 <_printf_i+0x126>
 8004186:	6923      	ldr	r3, [r4, #16]
 8004188:	462a      	mov	r2, r5
 800418a:	4639      	mov	r1, r7
 800418c:	4630      	mov	r0, r6
 800418e:	47c0      	blx	r8
 8004190:	3001      	adds	r0, #1
 8004192:	d0a2      	beq.n	80040da <_printf_i+0x13a>
 8004194:	6823      	ldr	r3, [r4, #0]
 8004196:	079b      	lsls	r3, r3, #30
 8004198:	d507      	bpl.n	80041aa <_printf_i+0x20a>
 800419a:	2500      	movs	r5, #0
 800419c:	f104 0919 	add.w	r9, r4, #25
 80041a0:	68e3      	ldr	r3, [r4, #12]
 80041a2:	9a03      	ldr	r2, [sp, #12]
 80041a4:	1a9b      	subs	r3, r3, r2
 80041a6:	429d      	cmp	r5, r3
 80041a8:	db05      	blt.n	80041b6 <_printf_i+0x216>
 80041aa:	68e0      	ldr	r0, [r4, #12]
 80041ac:	9b03      	ldr	r3, [sp, #12]
 80041ae:	4298      	cmp	r0, r3
 80041b0:	bfb8      	it	lt
 80041b2:	4618      	movlt	r0, r3
 80041b4:	e793      	b.n	80040de <_printf_i+0x13e>
 80041b6:	2301      	movs	r3, #1
 80041b8:	464a      	mov	r2, r9
 80041ba:	4639      	mov	r1, r7
 80041bc:	4630      	mov	r0, r6
 80041be:	47c0      	blx	r8
 80041c0:	3001      	adds	r0, #1
 80041c2:	d08a      	beq.n	80040da <_printf_i+0x13a>
 80041c4:	3501      	adds	r5, #1
 80041c6:	e7eb      	b.n	80041a0 <_printf_i+0x200>
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1a7      	bne.n	800411c <_printf_i+0x17c>
 80041cc:	780b      	ldrb	r3, [r1, #0]
 80041ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041d6:	e765      	b.n	80040a4 <_printf_i+0x104>
 80041d8:	08006303 	.word	0x08006303
 80041dc:	080062f2 	.word	0x080062f2

080041e0 <siprintf>:
 80041e0:	b40e      	push	{r1, r2, r3}
 80041e2:	b500      	push	{lr}
 80041e4:	b09c      	sub	sp, #112	; 0x70
 80041e6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80041ea:	ab1d      	add	r3, sp, #116	; 0x74
 80041ec:	f8ad 1014 	strh.w	r1, [sp, #20]
 80041f0:	9002      	str	r0, [sp, #8]
 80041f2:	9006      	str	r0, [sp, #24]
 80041f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80041f8:	480a      	ldr	r0, [pc, #40]	; (8004224 <siprintf+0x44>)
 80041fa:	9104      	str	r1, [sp, #16]
 80041fc:	9107      	str	r1, [sp, #28]
 80041fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004202:	f853 2b04 	ldr.w	r2, [r3], #4
 8004206:	f8ad 1016 	strh.w	r1, [sp, #22]
 800420a:	6800      	ldr	r0, [r0, #0]
 800420c:	9301      	str	r3, [sp, #4]
 800420e:	a902      	add	r1, sp, #8
 8004210:	f001 fa6c 	bl	80056ec <_svfiprintf_r>
 8004214:	9b02      	ldr	r3, [sp, #8]
 8004216:	2200      	movs	r2, #0
 8004218:	701a      	strb	r2, [r3, #0]
 800421a:	b01c      	add	sp, #112	; 0x70
 800421c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004220:	b003      	add	sp, #12
 8004222:	4770      	bx	lr
 8004224:	20000014 	.word	0x20000014

08004228 <quorem>:
 8004228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800422c:	6903      	ldr	r3, [r0, #16]
 800422e:	690c      	ldr	r4, [r1, #16]
 8004230:	429c      	cmp	r4, r3
 8004232:	4680      	mov	r8, r0
 8004234:	f300 8082 	bgt.w	800433c <quorem+0x114>
 8004238:	3c01      	subs	r4, #1
 800423a:	f101 0714 	add.w	r7, r1, #20
 800423e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004242:	f100 0614 	add.w	r6, r0, #20
 8004246:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800424a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800424e:	eb06 030e 	add.w	r3, r6, lr
 8004252:	3501      	adds	r5, #1
 8004254:	eb07 090e 	add.w	r9, r7, lr
 8004258:	9301      	str	r3, [sp, #4]
 800425a:	fbb0 f5f5 	udiv	r5, r0, r5
 800425e:	b395      	cbz	r5, 80042c6 <quorem+0x9e>
 8004260:	f04f 0a00 	mov.w	sl, #0
 8004264:	4638      	mov	r0, r7
 8004266:	46b4      	mov	ip, r6
 8004268:	46d3      	mov	fp, sl
 800426a:	f850 2b04 	ldr.w	r2, [r0], #4
 800426e:	b293      	uxth	r3, r2
 8004270:	fb05 a303 	mla	r3, r5, r3, sl
 8004274:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004278:	b29b      	uxth	r3, r3
 800427a:	ebab 0303 	sub.w	r3, fp, r3
 800427e:	0c12      	lsrs	r2, r2, #16
 8004280:	f8bc b000 	ldrh.w	fp, [ip]
 8004284:	fb05 a202 	mla	r2, r5, r2, sl
 8004288:	fa13 f38b 	uxtah	r3, r3, fp
 800428c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004290:	fa1f fb82 	uxth.w	fp, r2
 8004294:	f8dc 2000 	ldr.w	r2, [ip]
 8004298:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800429c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042a6:	4581      	cmp	r9, r0
 80042a8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80042ac:	f84c 3b04 	str.w	r3, [ip], #4
 80042b0:	d2db      	bcs.n	800426a <quorem+0x42>
 80042b2:	f856 300e 	ldr.w	r3, [r6, lr]
 80042b6:	b933      	cbnz	r3, 80042c6 <quorem+0x9e>
 80042b8:	9b01      	ldr	r3, [sp, #4]
 80042ba:	3b04      	subs	r3, #4
 80042bc:	429e      	cmp	r6, r3
 80042be:	461a      	mov	r2, r3
 80042c0:	d330      	bcc.n	8004324 <quorem+0xfc>
 80042c2:	f8c8 4010 	str.w	r4, [r8, #16]
 80042c6:	4640      	mov	r0, r8
 80042c8:	f001 f833 	bl	8005332 <__mcmp>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	db25      	blt.n	800431c <quorem+0xf4>
 80042d0:	3501      	adds	r5, #1
 80042d2:	4630      	mov	r0, r6
 80042d4:	f04f 0e00 	mov.w	lr, #0
 80042d8:	f857 2b04 	ldr.w	r2, [r7], #4
 80042dc:	f8d0 c000 	ldr.w	ip, [r0]
 80042e0:	b293      	uxth	r3, r2
 80042e2:	ebae 0303 	sub.w	r3, lr, r3
 80042e6:	0c12      	lsrs	r2, r2, #16
 80042e8:	fa13 f38c 	uxtah	r3, r3, ip
 80042ec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80042f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042fa:	45b9      	cmp	r9, r7
 80042fc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004300:	f840 3b04 	str.w	r3, [r0], #4
 8004304:	d2e8      	bcs.n	80042d8 <quorem+0xb0>
 8004306:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800430a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800430e:	b92a      	cbnz	r2, 800431c <quorem+0xf4>
 8004310:	3b04      	subs	r3, #4
 8004312:	429e      	cmp	r6, r3
 8004314:	461a      	mov	r2, r3
 8004316:	d30b      	bcc.n	8004330 <quorem+0x108>
 8004318:	f8c8 4010 	str.w	r4, [r8, #16]
 800431c:	4628      	mov	r0, r5
 800431e:	b003      	add	sp, #12
 8004320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	3b04      	subs	r3, #4
 8004328:	2a00      	cmp	r2, #0
 800432a:	d1ca      	bne.n	80042c2 <quorem+0x9a>
 800432c:	3c01      	subs	r4, #1
 800432e:	e7c5      	b.n	80042bc <quorem+0x94>
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	3b04      	subs	r3, #4
 8004334:	2a00      	cmp	r2, #0
 8004336:	d1ef      	bne.n	8004318 <quorem+0xf0>
 8004338:	3c01      	subs	r4, #1
 800433a:	e7ea      	b.n	8004312 <quorem+0xea>
 800433c:	2000      	movs	r0, #0
 800433e:	e7ee      	b.n	800431e <quorem+0xf6>

08004340 <_dtoa_r>:
 8004340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004344:	ec57 6b10 	vmov	r6, r7, d0
 8004348:	b097      	sub	sp, #92	; 0x5c
 800434a:	e9cd 6700 	strd	r6, r7, [sp]
 800434e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004350:	9107      	str	r1, [sp, #28]
 8004352:	4604      	mov	r4, r0
 8004354:	920a      	str	r2, [sp, #40]	; 0x28
 8004356:	930f      	str	r3, [sp, #60]	; 0x3c
 8004358:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800435a:	b93e      	cbnz	r6, 800436c <_dtoa_r+0x2c>
 800435c:	2010      	movs	r0, #16
 800435e:	f000 fdcb 	bl	8004ef8 <malloc>
 8004362:	6260      	str	r0, [r4, #36]	; 0x24
 8004364:	6046      	str	r6, [r0, #4]
 8004366:	6086      	str	r6, [r0, #8]
 8004368:	6006      	str	r6, [r0, #0]
 800436a:	60c6      	str	r6, [r0, #12]
 800436c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800436e:	6819      	ldr	r1, [r3, #0]
 8004370:	b151      	cbz	r1, 8004388 <_dtoa_r+0x48>
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	604a      	str	r2, [r1, #4]
 8004376:	2301      	movs	r3, #1
 8004378:	4093      	lsls	r3, r2
 800437a:	608b      	str	r3, [r1, #8]
 800437c:	4620      	mov	r0, r4
 800437e:	f000 fe02 	bl	8004f86 <_Bfree>
 8004382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	9b01      	ldr	r3, [sp, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	bfbf      	itttt	lt
 800438e:	2301      	movlt	r3, #1
 8004390:	602b      	strlt	r3, [r5, #0]
 8004392:	9b01      	ldrlt	r3, [sp, #4]
 8004394:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004398:	bfb2      	itee	lt
 800439a:	9301      	strlt	r3, [sp, #4]
 800439c:	2300      	movge	r3, #0
 800439e:	602b      	strge	r3, [r5, #0]
 80043a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80043a4:	4ba8      	ldr	r3, [pc, #672]	; (8004648 <_dtoa_r+0x308>)
 80043a6:	ea33 0308 	bics.w	r3, r3, r8
 80043aa:	d11b      	bne.n	80043e4 <_dtoa_r+0xa4>
 80043ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80043ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80043b2:	6013      	str	r3, [r2, #0]
 80043b4:	9b00      	ldr	r3, [sp, #0]
 80043b6:	b923      	cbnz	r3, 80043c2 <_dtoa_r+0x82>
 80043b8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80043bc:	2800      	cmp	r0, #0
 80043be:	f000 8578 	beq.w	8004eb2 <_dtoa_r+0xb72>
 80043c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043c4:	b953      	cbnz	r3, 80043dc <_dtoa_r+0x9c>
 80043c6:	4ba1      	ldr	r3, [pc, #644]	; (800464c <_dtoa_r+0x30c>)
 80043c8:	e021      	b.n	800440e <_dtoa_r+0xce>
 80043ca:	4ba1      	ldr	r3, [pc, #644]	; (8004650 <_dtoa_r+0x310>)
 80043cc:	9302      	str	r3, [sp, #8]
 80043ce:	3308      	adds	r3, #8
 80043d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	9802      	ldr	r0, [sp, #8]
 80043d6:	b017      	add	sp, #92	; 0x5c
 80043d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043dc:	4b9b      	ldr	r3, [pc, #620]	; (800464c <_dtoa_r+0x30c>)
 80043de:	9302      	str	r3, [sp, #8]
 80043e0:	3303      	adds	r3, #3
 80043e2:	e7f5      	b.n	80043d0 <_dtoa_r+0x90>
 80043e4:	e9dd 6700 	ldrd	r6, r7, [sp]
 80043e8:	2200      	movs	r2, #0
 80043ea:	2300      	movs	r3, #0
 80043ec:	4630      	mov	r0, r6
 80043ee:	4639      	mov	r1, r7
 80043f0:	f7fc fb66 	bl	8000ac0 <__aeabi_dcmpeq>
 80043f4:	4681      	mov	r9, r0
 80043f6:	b160      	cbz	r0, 8004412 <_dtoa_r+0xd2>
 80043f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80043fa:	2301      	movs	r3, #1
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 8553 	beq.w	8004eac <_dtoa_r+0xb6c>
 8004406:	4b93      	ldr	r3, [pc, #588]	; (8004654 <_dtoa_r+0x314>)
 8004408:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	3b01      	subs	r3, #1
 800440e:	9302      	str	r3, [sp, #8]
 8004410:	e7e0      	b.n	80043d4 <_dtoa_r+0x94>
 8004412:	aa14      	add	r2, sp, #80	; 0x50
 8004414:	a915      	add	r1, sp, #84	; 0x54
 8004416:	ec47 6b10 	vmov	d0, r6, r7
 800441a:	4620      	mov	r0, r4
 800441c:	f001 f801 	bl	8005422 <__d2b>
 8004420:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004424:	4682      	mov	sl, r0
 8004426:	2d00      	cmp	r5, #0
 8004428:	d07e      	beq.n	8004528 <_dtoa_r+0x1e8>
 800442a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800442e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004432:	4630      	mov	r0, r6
 8004434:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004438:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800443c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8004440:	2200      	movs	r2, #0
 8004442:	4b85      	ldr	r3, [pc, #532]	; (8004658 <_dtoa_r+0x318>)
 8004444:	f7fb ff20 	bl	8000288 <__aeabi_dsub>
 8004448:	a379      	add	r3, pc, #484	; (adr r3, 8004630 <_dtoa_r+0x2f0>)
 800444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444e:	f7fc f8cf 	bl	80005f0 <__aeabi_dmul>
 8004452:	a379      	add	r3, pc, #484	; (adr r3, 8004638 <_dtoa_r+0x2f8>)
 8004454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004458:	f7fb ff18 	bl	800028c <__adddf3>
 800445c:	4606      	mov	r6, r0
 800445e:	4628      	mov	r0, r5
 8004460:	460f      	mov	r7, r1
 8004462:	f7fc f85f 	bl	8000524 <__aeabi_i2d>
 8004466:	a376      	add	r3, pc, #472	; (adr r3, 8004640 <_dtoa_r+0x300>)
 8004468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446c:	f7fc f8c0 	bl	80005f0 <__aeabi_dmul>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	4630      	mov	r0, r6
 8004476:	4639      	mov	r1, r7
 8004478:	f7fb ff08 	bl	800028c <__adddf3>
 800447c:	4606      	mov	r6, r0
 800447e:	460f      	mov	r7, r1
 8004480:	f7fc fb66 	bl	8000b50 <__aeabi_d2iz>
 8004484:	2200      	movs	r2, #0
 8004486:	4683      	mov	fp, r0
 8004488:	2300      	movs	r3, #0
 800448a:	4630      	mov	r0, r6
 800448c:	4639      	mov	r1, r7
 800448e:	f7fc fb21 	bl	8000ad4 <__aeabi_dcmplt>
 8004492:	b158      	cbz	r0, 80044ac <_dtoa_r+0x16c>
 8004494:	4658      	mov	r0, fp
 8004496:	f7fc f845 	bl	8000524 <__aeabi_i2d>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	4630      	mov	r0, r6
 80044a0:	4639      	mov	r1, r7
 80044a2:	f7fc fb0d 	bl	8000ac0 <__aeabi_dcmpeq>
 80044a6:	b908      	cbnz	r0, 80044ac <_dtoa_r+0x16c>
 80044a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80044ac:	f1bb 0f16 	cmp.w	fp, #22
 80044b0:	d859      	bhi.n	8004566 <_dtoa_r+0x226>
 80044b2:	496a      	ldr	r1, [pc, #424]	; (800465c <_dtoa_r+0x31c>)
 80044b4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80044b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80044bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044c0:	f7fc fb26 	bl	8000b10 <__aeabi_dcmpgt>
 80044c4:	2800      	cmp	r0, #0
 80044c6:	d050      	beq.n	800456a <_dtoa_r+0x22a>
 80044c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80044cc:	2300      	movs	r3, #0
 80044ce:	930e      	str	r3, [sp, #56]	; 0x38
 80044d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80044d2:	1b5d      	subs	r5, r3, r5
 80044d4:	1e6b      	subs	r3, r5, #1
 80044d6:	9306      	str	r3, [sp, #24]
 80044d8:	bf45      	ittet	mi
 80044da:	f1c5 0301 	rsbmi	r3, r5, #1
 80044de:	9305      	strmi	r3, [sp, #20]
 80044e0:	2300      	movpl	r3, #0
 80044e2:	2300      	movmi	r3, #0
 80044e4:	bf4c      	ite	mi
 80044e6:	9306      	strmi	r3, [sp, #24]
 80044e8:	9305      	strpl	r3, [sp, #20]
 80044ea:	f1bb 0f00 	cmp.w	fp, #0
 80044ee:	db3e      	blt.n	800456e <_dtoa_r+0x22e>
 80044f0:	9b06      	ldr	r3, [sp, #24]
 80044f2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80044f6:	445b      	add	r3, fp
 80044f8:	9306      	str	r3, [sp, #24]
 80044fa:	2300      	movs	r3, #0
 80044fc:	9308      	str	r3, [sp, #32]
 80044fe:	9b07      	ldr	r3, [sp, #28]
 8004500:	2b09      	cmp	r3, #9
 8004502:	f200 80af 	bhi.w	8004664 <_dtoa_r+0x324>
 8004506:	2b05      	cmp	r3, #5
 8004508:	bfc4      	itt	gt
 800450a:	3b04      	subgt	r3, #4
 800450c:	9307      	strgt	r3, [sp, #28]
 800450e:	9b07      	ldr	r3, [sp, #28]
 8004510:	f1a3 0302 	sub.w	r3, r3, #2
 8004514:	bfcc      	ite	gt
 8004516:	2600      	movgt	r6, #0
 8004518:	2601      	movle	r6, #1
 800451a:	2b03      	cmp	r3, #3
 800451c:	f200 80ae 	bhi.w	800467c <_dtoa_r+0x33c>
 8004520:	e8df f003 	tbb	[pc, r3]
 8004524:	772f8482 	.word	0x772f8482
 8004528:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800452a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800452c:	441d      	add	r5, r3
 800452e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004532:	2b20      	cmp	r3, #32
 8004534:	dd11      	ble.n	800455a <_dtoa_r+0x21a>
 8004536:	9a00      	ldr	r2, [sp, #0]
 8004538:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800453c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004540:	fa22 f000 	lsr.w	r0, r2, r0
 8004544:	fa08 f303 	lsl.w	r3, r8, r3
 8004548:	4318      	orrs	r0, r3
 800454a:	f7fb ffdb 	bl	8000504 <__aeabi_ui2d>
 800454e:	2301      	movs	r3, #1
 8004550:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004554:	3d01      	subs	r5, #1
 8004556:	9312      	str	r3, [sp, #72]	; 0x48
 8004558:	e772      	b.n	8004440 <_dtoa_r+0x100>
 800455a:	f1c3 0020 	rsb	r0, r3, #32
 800455e:	9b00      	ldr	r3, [sp, #0]
 8004560:	fa03 f000 	lsl.w	r0, r3, r0
 8004564:	e7f1      	b.n	800454a <_dtoa_r+0x20a>
 8004566:	2301      	movs	r3, #1
 8004568:	e7b1      	b.n	80044ce <_dtoa_r+0x18e>
 800456a:	900e      	str	r0, [sp, #56]	; 0x38
 800456c:	e7b0      	b.n	80044d0 <_dtoa_r+0x190>
 800456e:	9b05      	ldr	r3, [sp, #20]
 8004570:	eba3 030b 	sub.w	r3, r3, fp
 8004574:	9305      	str	r3, [sp, #20]
 8004576:	f1cb 0300 	rsb	r3, fp, #0
 800457a:	9308      	str	r3, [sp, #32]
 800457c:	2300      	movs	r3, #0
 800457e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004580:	e7bd      	b.n	80044fe <_dtoa_r+0x1be>
 8004582:	2301      	movs	r3, #1
 8004584:	9309      	str	r3, [sp, #36]	; 0x24
 8004586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004588:	2b00      	cmp	r3, #0
 800458a:	dd7a      	ble.n	8004682 <_dtoa_r+0x342>
 800458c:	9304      	str	r3, [sp, #16]
 800458e:	9303      	str	r3, [sp, #12]
 8004590:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004592:	2200      	movs	r2, #0
 8004594:	606a      	str	r2, [r5, #4]
 8004596:	2104      	movs	r1, #4
 8004598:	f101 0214 	add.w	r2, r1, #20
 800459c:	429a      	cmp	r2, r3
 800459e:	d975      	bls.n	800468c <_dtoa_r+0x34c>
 80045a0:	6869      	ldr	r1, [r5, #4]
 80045a2:	4620      	mov	r0, r4
 80045a4:	f000 fcbb 	bl	8004f1e <_Balloc>
 80045a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045aa:	6028      	str	r0, [r5, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	9302      	str	r3, [sp, #8]
 80045b0:	9b03      	ldr	r3, [sp, #12]
 80045b2:	2b0e      	cmp	r3, #14
 80045b4:	f200 80e5 	bhi.w	8004782 <_dtoa_r+0x442>
 80045b8:	2e00      	cmp	r6, #0
 80045ba:	f000 80e2 	beq.w	8004782 <_dtoa_r+0x442>
 80045be:	ed9d 7b00 	vldr	d7, [sp]
 80045c2:	f1bb 0f00 	cmp.w	fp, #0
 80045c6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80045ca:	dd74      	ble.n	80046b6 <_dtoa_r+0x376>
 80045cc:	4a23      	ldr	r2, [pc, #140]	; (800465c <_dtoa_r+0x31c>)
 80045ce:	f00b 030f 	and.w	r3, fp, #15
 80045d2:	ea4f 162b 	mov.w	r6, fp, asr #4
 80045d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80045da:	06f0      	lsls	r0, r6, #27
 80045dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80045e0:	d559      	bpl.n	8004696 <_dtoa_r+0x356>
 80045e2:	4b1f      	ldr	r3, [pc, #124]	; (8004660 <_dtoa_r+0x320>)
 80045e4:	ec51 0b17 	vmov	r0, r1, d7
 80045e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80045ec:	f7fc f92a 	bl	8000844 <__aeabi_ddiv>
 80045f0:	e9cd 0100 	strd	r0, r1, [sp]
 80045f4:	f006 060f 	and.w	r6, r6, #15
 80045f8:	2503      	movs	r5, #3
 80045fa:	4f19      	ldr	r7, [pc, #100]	; (8004660 <_dtoa_r+0x320>)
 80045fc:	2e00      	cmp	r6, #0
 80045fe:	d14c      	bne.n	800469a <_dtoa_r+0x35a>
 8004600:	4642      	mov	r2, r8
 8004602:	464b      	mov	r3, r9
 8004604:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004608:	f7fc f91c 	bl	8000844 <__aeabi_ddiv>
 800460c:	e9cd 0100 	strd	r0, r1, [sp]
 8004610:	e06a      	b.n	80046e8 <_dtoa_r+0x3a8>
 8004612:	2301      	movs	r3, #1
 8004614:	9309      	str	r3, [sp, #36]	; 0x24
 8004616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004618:	445b      	add	r3, fp
 800461a:	9304      	str	r3, [sp, #16]
 800461c:	3301      	adds	r3, #1
 800461e:	2b01      	cmp	r3, #1
 8004620:	9303      	str	r3, [sp, #12]
 8004622:	bfb8      	it	lt
 8004624:	2301      	movlt	r3, #1
 8004626:	e7b3      	b.n	8004590 <_dtoa_r+0x250>
 8004628:	2300      	movs	r3, #0
 800462a:	e7ab      	b.n	8004584 <_dtoa_r+0x244>
 800462c:	2300      	movs	r3, #0
 800462e:	e7f1      	b.n	8004614 <_dtoa_r+0x2d4>
 8004630:	636f4361 	.word	0x636f4361
 8004634:	3fd287a7 	.word	0x3fd287a7
 8004638:	8b60c8b3 	.word	0x8b60c8b3
 800463c:	3fc68a28 	.word	0x3fc68a28
 8004640:	509f79fb 	.word	0x509f79fb
 8004644:	3fd34413 	.word	0x3fd34413
 8004648:	7ff00000 	.word	0x7ff00000
 800464c:	0800631d 	.word	0x0800631d
 8004650:	08006314 	.word	0x08006314
 8004654:	080062c3 	.word	0x080062c3
 8004658:	3ff80000 	.word	0x3ff80000
 800465c:	08006350 	.word	0x08006350
 8004660:	08006328 	.word	0x08006328
 8004664:	2601      	movs	r6, #1
 8004666:	2300      	movs	r3, #0
 8004668:	9307      	str	r3, [sp, #28]
 800466a:	9609      	str	r6, [sp, #36]	; 0x24
 800466c:	f04f 33ff 	mov.w	r3, #4294967295
 8004670:	9304      	str	r3, [sp, #16]
 8004672:	9303      	str	r3, [sp, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	2312      	movs	r3, #18
 8004678:	920a      	str	r2, [sp, #40]	; 0x28
 800467a:	e789      	b.n	8004590 <_dtoa_r+0x250>
 800467c:	2301      	movs	r3, #1
 800467e:	9309      	str	r3, [sp, #36]	; 0x24
 8004680:	e7f4      	b.n	800466c <_dtoa_r+0x32c>
 8004682:	2301      	movs	r3, #1
 8004684:	9304      	str	r3, [sp, #16]
 8004686:	9303      	str	r3, [sp, #12]
 8004688:	461a      	mov	r2, r3
 800468a:	e7f5      	b.n	8004678 <_dtoa_r+0x338>
 800468c:	686a      	ldr	r2, [r5, #4]
 800468e:	3201      	adds	r2, #1
 8004690:	606a      	str	r2, [r5, #4]
 8004692:	0049      	lsls	r1, r1, #1
 8004694:	e780      	b.n	8004598 <_dtoa_r+0x258>
 8004696:	2502      	movs	r5, #2
 8004698:	e7af      	b.n	80045fa <_dtoa_r+0x2ba>
 800469a:	07f1      	lsls	r1, r6, #31
 800469c:	d508      	bpl.n	80046b0 <_dtoa_r+0x370>
 800469e:	4640      	mov	r0, r8
 80046a0:	4649      	mov	r1, r9
 80046a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046a6:	f7fb ffa3 	bl	80005f0 <__aeabi_dmul>
 80046aa:	3501      	adds	r5, #1
 80046ac:	4680      	mov	r8, r0
 80046ae:	4689      	mov	r9, r1
 80046b0:	1076      	asrs	r6, r6, #1
 80046b2:	3708      	adds	r7, #8
 80046b4:	e7a2      	b.n	80045fc <_dtoa_r+0x2bc>
 80046b6:	f000 809d 	beq.w	80047f4 <_dtoa_r+0x4b4>
 80046ba:	f1cb 0600 	rsb	r6, fp, #0
 80046be:	4b9f      	ldr	r3, [pc, #636]	; (800493c <_dtoa_r+0x5fc>)
 80046c0:	4f9f      	ldr	r7, [pc, #636]	; (8004940 <_dtoa_r+0x600>)
 80046c2:	f006 020f 	and.w	r2, r6, #15
 80046c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80046d2:	f7fb ff8d 	bl	80005f0 <__aeabi_dmul>
 80046d6:	e9cd 0100 	strd	r0, r1, [sp]
 80046da:	1136      	asrs	r6, r6, #4
 80046dc:	2300      	movs	r3, #0
 80046de:	2502      	movs	r5, #2
 80046e0:	2e00      	cmp	r6, #0
 80046e2:	d17c      	bne.n	80047de <_dtoa_r+0x49e>
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d191      	bne.n	800460c <_dtoa_r+0x2cc>
 80046e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 8084 	beq.w	80047f8 <_dtoa_r+0x4b8>
 80046f0:	e9dd 8900 	ldrd	r8, r9, [sp]
 80046f4:	2200      	movs	r2, #0
 80046f6:	4b93      	ldr	r3, [pc, #588]	; (8004944 <_dtoa_r+0x604>)
 80046f8:	4640      	mov	r0, r8
 80046fa:	4649      	mov	r1, r9
 80046fc:	f7fc f9ea 	bl	8000ad4 <__aeabi_dcmplt>
 8004700:	2800      	cmp	r0, #0
 8004702:	d079      	beq.n	80047f8 <_dtoa_r+0x4b8>
 8004704:	9b03      	ldr	r3, [sp, #12]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d076      	beq.n	80047f8 <_dtoa_r+0x4b8>
 800470a:	9b04      	ldr	r3, [sp, #16]
 800470c:	2b00      	cmp	r3, #0
 800470e:	dd34      	ble.n	800477a <_dtoa_r+0x43a>
 8004710:	2200      	movs	r2, #0
 8004712:	4b8d      	ldr	r3, [pc, #564]	; (8004948 <_dtoa_r+0x608>)
 8004714:	4640      	mov	r0, r8
 8004716:	4649      	mov	r1, r9
 8004718:	f7fb ff6a 	bl	80005f0 <__aeabi_dmul>
 800471c:	e9cd 0100 	strd	r0, r1, [sp]
 8004720:	9e04      	ldr	r6, [sp, #16]
 8004722:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004726:	3501      	adds	r5, #1
 8004728:	4628      	mov	r0, r5
 800472a:	f7fb fefb 	bl	8000524 <__aeabi_i2d>
 800472e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004732:	f7fb ff5d 	bl	80005f0 <__aeabi_dmul>
 8004736:	2200      	movs	r2, #0
 8004738:	4b84      	ldr	r3, [pc, #528]	; (800494c <_dtoa_r+0x60c>)
 800473a:	f7fb fda7 	bl	800028c <__adddf3>
 800473e:	4680      	mov	r8, r0
 8004740:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8004744:	2e00      	cmp	r6, #0
 8004746:	d15a      	bne.n	80047fe <_dtoa_r+0x4be>
 8004748:	2200      	movs	r2, #0
 800474a:	4b81      	ldr	r3, [pc, #516]	; (8004950 <_dtoa_r+0x610>)
 800474c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004750:	f7fb fd9a 	bl	8000288 <__aeabi_dsub>
 8004754:	4642      	mov	r2, r8
 8004756:	464b      	mov	r3, r9
 8004758:	e9cd 0100 	strd	r0, r1, [sp]
 800475c:	f7fc f9d8 	bl	8000b10 <__aeabi_dcmpgt>
 8004760:	2800      	cmp	r0, #0
 8004762:	f040 829b 	bne.w	8004c9c <_dtoa_r+0x95c>
 8004766:	4642      	mov	r2, r8
 8004768:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800476c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004770:	f7fc f9b0 	bl	8000ad4 <__aeabi_dcmplt>
 8004774:	2800      	cmp	r0, #0
 8004776:	f040 828f 	bne.w	8004c98 <_dtoa_r+0x958>
 800477a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800477e:	e9cd 2300 	strd	r2, r3, [sp]
 8004782:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004784:	2b00      	cmp	r3, #0
 8004786:	f2c0 8150 	blt.w	8004a2a <_dtoa_r+0x6ea>
 800478a:	f1bb 0f0e 	cmp.w	fp, #14
 800478e:	f300 814c 	bgt.w	8004a2a <_dtoa_r+0x6ea>
 8004792:	4b6a      	ldr	r3, [pc, #424]	; (800493c <_dtoa_r+0x5fc>)
 8004794:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004798:	e9d3 8900 	ldrd	r8, r9, [r3]
 800479c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f280 80da 	bge.w	8004958 <_dtoa_r+0x618>
 80047a4:	9b03      	ldr	r3, [sp, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f300 80d6 	bgt.w	8004958 <_dtoa_r+0x618>
 80047ac:	f040 8273 	bne.w	8004c96 <_dtoa_r+0x956>
 80047b0:	2200      	movs	r2, #0
 80047b2:	4b67      	ldr	r3, [pc, #412]	; (8004950 <_dtoa_r+0x610>)
 80047b4:	4640      	mov	r0, r8
 80047b6:	4649      	mov	r1, r9
 80047b8:	f7fb ff1a 	bl	80005f0 <__aeabi_dmul>
 80047bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80047c0:	f7fc f99c 	bl	8000afc <__aeabi_dcmpge>
 80047c4:	9e03      	ldr	r6, [sp, #12]
 80047c6:	4637      	mov	r7, r6
 80047c8:	2800      	cmp	r0, #0
 80047ca:	f040 824a 	bne.w	8004c62 <_dtoa_r+0x922>
 80047ce:	9b02      	ldr	r3, [sp, #8]
 80047d0:	9a02      	ldr	r2, [sp, #8]
 80047d2:	1c5d      	adds	r5, r3, #1
 80047d4:	2331      	movs	r3, #49	; 0x31
 80047d6:	7013      	strb	r3, [r2, #0]
 80047d8:	f10b 0b01 	add.w	fp, fp, #1
 80047dc:	e245      	b.n	8004c6a <_dtoa_r+0x92a>
 80047de:	07f2      	lsls	r2, r6, #31
 80047e0:	d505      	bpl.n	80047ee <_dtoa_r+0x4ae>
 80047e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047e6:	f7fb ff03 	bl	80005f0 <__aeabi_dmul>
 80047ea:	3501      	adds	r5, #1
 80047ec:	2301      	movs	r3, #1
 80047ee:	1076      	asrs	r6, r6, #1
 80047f0:	3708      	adds	r7, #8
 80047f2:	e775      	b.n	80046e0 <_dtoa_r+0x3a0>
 80047f4:	2502      	movs	r5, #2
 80047f6:	e777      	b.n	80046e8 <_dtoa_r+0x3a8>
 80047f8:	465f      	mov	r7, fp
 80047fa:	9e03      	ldr	r6, [sp, #12]
 80047fc:	e794      	b.n	8004728 <_dtoa_r+0x3e8>
 80047fe:	9a02      	ldr	r2, [sp, #8]
 8004800:	4b4e      	ldr	r3, [pc, #312]	; (800493c <_dtoa_r+0x5fc>)
 8004802:	4432      	add	r2, r6
 8004804:	9213      	str	r2, [sp, #76]	; 0x4c
 8004806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004808:	1e71      	subs	r1, r6, #1
 800480a:	2a00      	cmp	r2, #0
 800480c:	d048      	beq.n	80048a0 <_dtoa_r+0x560>
 800480e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8004812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004816:	2000      	movs	r0, #0
 8004818:	494e      	ldr	r1, [pc, #312]	; (8004954 <_dtoa_r+0x614>)
 800481a:	f7fc f813 	bl	8000844 <__aeabi_ddiv>
 800481e:	4642      	mov	r2, r8
 8004820:	464b      	mov	r3, r9
 8004822:	f7fb fd31 	bl	8000288 <__aeabi_dsub>
 8004826:	9d02      	ldr	r5, [sp, #8]
 8004828:	4680      	mov	r8, r0
 800482a:	4689      	mov	r9, r1
 800482c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004830:	f7fc f98e 	bl	8000b50 <__aeabi_d2iz>
 8004834:	4606      	mov	r6, r0
 8004836:	f7fb fe75 	bl	8000524 <__aeabi_i2d>
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004842:	f7fb fd21 	bl	8000288 <__aeabi_dsub>
 8004846:	3630      	adds	r6, #48	; 0x30
 8004848:	f805 6b01 	strb.w	r6, [r5], #1
 800484c:	4642      	mov	r2, r8
 800484e:	464b      	mov	r3, r9
 8004850:	e9cd 0100 	strd	r0, r1, [sp]
 8004854:	f7fc f93e 	bl	8000ad4 <__aeabi_dcmplt>
 8004858:	2800      	cmp	r0, #0
 800485a:	d165      	bne.n	8004928 <_dtoa_r+0x5e8>
 800485c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004860:	2000      	movs	r0, #0
 8004862:	4938      	ldr	r1, [pc, #224]	; (8004944 <_dtoa_r+0x604>)
 8004864:	f7fb fd10 	bl	8000288 <__aeabi_dsub>
 8004868:	4642      	mov	r2, r8
 800486a:	464b      	mov	r3, r9
 800486c:	f7fc f932 	bl	8000ad4 <__aeabi_dcmplt>
 8004870:	2800      	cmp	r0, #0
 8004872:	f040 80ba 	bne.w	80049ea <_dtoa_r+0x6aa>
 8004876:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004878:	429d      	cmp	r5, r3
 800487a:	f43f af7e 	beq.w	800477a <_dtoa_r+0x43a>
 800487e:	2200      	movs	r2, #0
 8004880:	4b31      	ldr	r3, [pc, #196]	; (8004948 <_dtoa_r+0x608>)
 8004882:	4640      	mov	r0, r8
 8004884:	4649      	mov	r1, r9
 8004886:	f7fb feb3 	bl	80005f0 <__aeabi_dmul>
 800488a:	2200      	movs	r2, #0
 800488c:	4680      	mov	r8, r0
 800488e:	4689      	mov	r9, r1
 8004890:	4b2d      	ldr	r3, [pc, #180]	; (8004948 <_dtoa_r+0x608>)
 8004892:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004896:	f7fb feab 	bl	80005f0 <__aeabi_dmul>
 800489a:	e9cd 0100 	strd	r0, r1, [sp]
 800489e:	e7c5      	b.n	800482c <_dtoa_r+0x4ec>
 80048a0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80048a4:	4642      	mov	r2, r8
 80048a6:	464b      	mov	r3, r9
 80048a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048ac:	f7fb fea0 	bl	80005f0 <__aeabi_dmul>
 80048b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80048b4:	9d02      	ldr	r5, [sp, #8]
 80048b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048ba:	f7fc f949 	bl	8000b50 <__aeabi_d2iz>
 80048be:	4606      	mov	r6, r0
 80048c0:	f7fb fe30 	bl	8000524 <__aeabi_i2d>
 80048c4:	3630      	adds	r6, #48	; 0x30
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048ce:	f7fb fcdb 	bl	8000288 <__aeabi_dsub>
 80048d2:	f805 6b01 	strb.w	r6, [r5], #1
 80048d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80048d8:	42ab      	cmp	r3, r5
 80048da:	4680      	mov	r8, r0
 80048dc:	4689      	mov	r9, r1
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	d125      	bne.n	8004930 <_dtoa_r+0x5f0>
 80048e4:	4b1b      	ldr	r3, [pc, #108]	; (8004954 <_dtoa_r+0x614>)
 80048e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80048ea:	f7fb fccf 	bl	800028c <__adddf3>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4640      	mov	r0, r8
 80048f4:	4649      	mov	r1, r9
 80048f6:	f7fc f90b 	bl	8000b10 <__aeabi_dcmpgt>
 80048fa:	2800      	cmp	r0, #0
 80048fc:	d175      	bne.n	80049ea <_dtoa_r+0x6aa>
 80048fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004902:	2000      	movs	r0, #0
 8004904:	4913      	ldr	r1, [pc, #76]	; (8004954 <_dtoa_r+0x614>)
 8004906:	f7fb fcbf 	bl	8000288 <__aeabi_dsub>
 800490a:	4602      	mov	r2, r0
 800490c:	460b      	mov	r3, r1
 800490e:	4640      	mov	r0, r8
 8004910:	4649      	mov	r1, r9
 8004912:	f7fc f8df 	bl	8000ad4 <__aeabi_dcmplt>
 8004916:	2800      	cmp	r0, #0
 8004918:	f43f af2f 	beq.w	800477a <_dtoa_r+0x43a>
 800491c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004920:	2b30      	cmp	r3, #48	; 0x30
 8004922:	f105 32ff 	add.w	r2, r5, #4294967295
 8004926:	d001      	beq.n	800492c <_dtoa_r+0x5ec>
 8004928:	46bb      	mov	fp, r7
 800492a:	e04d      	b.n	80049c8 <_dtoa_r+0x688>
 800492c:	4615      	mov	r5, r2
 800492e:	e7f5      	b.n	800491c <_dtoa_r+0x5dc>
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <_dtoa_r+0x608>)
 8004932:	f7fb fe5d 	bl	80005f0 <__aeabi_dmul>
 8004936:	e9cd 0100 	strd	r0, r1, [sp]
 800493a:	e7bc      	b.n	80048b6 <_dtoa_r+0x576>
 800493c:	08006350 	.word	0x08006350
 8004940:	08006328 	.word	0x08006328
 8004944:	3ff00000 	.word	0x3ff00000
 8004948:	40240000 	.word	0x40240000
 800494c:	401c0000 	.word	0x401c0000
 8004950:	40140000 	.word	0x40140000
 8004954:	3fe00000 	.word	0x3fe00000
 8004958:	e9dd 6700 	ldrd	r6, r7, [sp]
 800495c:	9d02      	ldr	r5, [sp, #8]
 800495e:	4642      	mov	r2, r8
 8004960:	464b      	mov	r3, r9
 8004962:	4630      	mov	r0, r6
 8004964:	4639      	mov	r1, r7
 8004966:	f7fb ff6d 	bl	8000844 <__aeabi_ddiv>
 800496a:	f7fc f8f1 	bl	8000b50 <__aeabi_d2iz>
 800496e:	9000      	str	r0, [sp, #0]
 8004970:	f7fb fdd8 	bl	8000524 <__aeabi_i2d>
 8004974:	4642      	mov	r2, r8
 8004976:	464b      	mov	r3, r9
 8004978:	f7fb fe3a 	bl	80005f0 <__aeabi_dmul>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4630      	mov	r0, r6
 8004982:	4639      	mov	r1, r7
 8004984:	f7fb fc80 	bl	8000288 <__aeabi_dsub>
 8004988:	9e00      	ldr	r6, [sp, #0]
 800498a:	9f03      	ldr	r7, [sp, #12]
 800498c:	3630      	adds	r6, #48	; 0x30
 800498e:	f805 6b01 	strb.w	r6, [r5], #1
 8004992:	9e02      	ldr	r6, [sp, #8]
 8004994:	1bae      	subs	r6, r5, r6
 8004996:	42b7      	cmp	r7, r6
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	d138      	bne.n	8004a10 <_dtoa_r+0x6d0>
 800499e:	f7fb fc75 	bl	800028c <__adddf3>
 80049a2:	4606      	mov	r6, r0
 80049a4:	460f      	mov	r7, r1
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	4640      	mov	r0, r8
 80049ac:	4649      	mov	r1, r9
 80049ae:	f7fc f891 	bl	8000ad4 <__aeabi_dcmplt>
 80049b2:	b9c8      	cbnz	r0, 80049e8 <_dtoa_r+0x6a8>
 80049b4:	4632      	mov	r2, r6
 80049b6:	463b      	mov	r3, r7
 80049b8:	4640      	mov	r0, r8
 80049ba:	4649      	mov	r1, r9
 80049bc:	f7fc f880 	bl	8000ac0 <__aeabi_dcmpeq>
 80049c0:	b110      	cbz	r0, 80049c8 <_dtoa_r+0x688>
 80049c2:	9b00      	ldr	r3, [sp, #0]
 80049c4:	07db      	lsls	r3, r3, #31
 80049c6:	d40f      	bmi.n	80049e8 <_dtoa_r+0x6a8>
 80049c8:	4651      	mov	r1, sl
 80049ca:	4620      	mov	r0, r4
 80049cc:	f000 fadb 	bl	8004f86 <_Bfree>
 80049d0:	2300      	movs	r3, #0
 80049d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80049d4:	702b      	strb	r3, [r5, #0]
 80049d6:	f10b 0301 	add.w	r3, fp, #1
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f43f acf8 	beq.w	80043d4 <_dtoa_r+0x94>
 80049e4:	601d      	str	r5, [r3, #0]
 80049e6:	e4f5      	b.n	80043d4 <_dtoa_r+0x94>
 80049e8:	465f      	mov	r7, fp
 80049ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80049ee:	2a39      	cmp	r2, #57	; 0x39
 80049f0:	f105 33ff 	add.w	r3, r5, #4294967295
 80049f4:	d106      	bne.n	8004a04 <_dtoa_r+0x6c4>
 80049f6:	9a02      	ldr	r2, [sp, #8]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d107      	bne.n	8004a0c <_dtoa_r+0x6cc>
 80049fc:	2330      	movs	r3, #48	; 0x30
 80049fe:	7013      	strb	r3, [r2, #0]
 8004a00:	3701      	adds	r7, #1
 8004a02:	4613      	mov	r3, r2
 8004a04:	781a      	ldrb	r2, [r3, #0]
 8004a06:	3201      	adds	r2, #1
 8004a08:	701a      	strb	r2, [r3, #0]
 8004a0a:	e78d      	b.n	8004928 <_dtoa_r+0x5e8>
 8004a0c:	461d      	mov	r5, r3
 8004a0e:	e7ec      	b.n	80049ea <_dtoa_r+0x6aa>
 8004a10:	2200      	movs	r2, #0
 8004a12:	4ba4      	ldr	r3, [pc, #656]	; (8004ca4 <_dtoa_r+0x964>)
 8004a14:	f7fb fdec 	bl	80005f0 <__aeabi_dmul>
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	4606      	mov	r6, r0
 8004a1e:	460f      	mov	r7, r1
 8004a20:	f7fc f84e 	bl	8000ac0 <__aeabi_dcmpeq>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	d09a      	beq.n	800495e <_dtoa_r+0x61e>
 8004a28:	e7ce      	b.n	80049c8 <_dtoa_r+0x688>
 8004a2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a2c:	2a00      	cmp	r2, #0
 8004a2e:	f000 80cd 	beq.w	8004bcc <_dtoa_r+0x88c>
 8004a32:	9a07      	ldr	r2, [sp, #28]
 8004a34:	2a01      	cmp	r2, #1
 8004a36:	f300 80af 	bgt.w	8004b98 <_dtoa_r+0x858>
 8004a3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a3c:	2a00      	cmp	r2, #0
 8004a3e:	f000 80a7 	beq.w	8004b90 <_dtoa_r+0x850>
 8004a42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004a46:	9e08      	ldr	r6, [sp, #32]
 8004a48:	9d05      	ldr	r5, [sp, #20]
 8004a4a:	9a05      	ldr	r2, [sp, #20]
 8004a4c:	441a      	add	r2, r3
 8004a4e:	9205      	str	r2, [sp, #20]
 8004a50:	9a06      	ldr	r2, [sp, #24]
 8004a52:	2101      	movs	r1, #1
 8004a54:	441a      	add	r2, r3
 8004a56:	4620      	mov	r0, r4
 8004a58:	9206      	str	r2, [sp, #24]
 8004a5a:	f000 fb34 	bl	80050c6 <__i2b>
 8004a5e:	4607      	mov	r7, r0
 8004a60:	2d00      	cmp	r5, #0
 8004a62:	dd0c      	ble.n	8004a7e <_dtoa_r+0x73e>
 8004a64:	9b06      	ldr	r3, [sp, #24]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	dd09      	ble.n	8004a7e <_dtoa_r+0x73e>
 8004a6a:	42ab      	cmp	r3, r5
 8004a6c:	9a05      	ldr	r2, [sp, #20]
 8004a6e:	bfa8      	it	ge
 8004a70:	462b      	movge	r3, r5
 8004a72:	1ad2      	subs	r2, r2, r3
 8004a74:	9205      	str	r2, [sp, #20]
 8004a76:	9a06      	ldr	r2, [sp, #24]
 8004a78:	1aed      	subs	r5, r5, r3
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	9306      	str	r3, [sp, #24]
 8004a7e:	9b08      	ldr	r3, [sp, #32]
 8004a80:	b1f3      	cbz	r3, 8004ac0 <_dtoa_r+0x780>
 8004a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 80a5 	beq.w	8004bd4 <_dtoa_r+0x894>
 8004a8a:	2e00      	cmp	r6, #0
 8004a8c:	dd10      	ble.n	8004ab0 <_dtoa_r+0x770>
 8004a8e:	4639      	mov	r1, r7
 8004a90:	4632      	mov	r2, r6
 8004a92:	4620      	mov	r0, r4
 8004a94:	f000 fbae 	bl	80051f4 <__pow5mult>
 8004a98:	4652      	mov	r2, sl
 8004a9a:	4601      	mov	r1, r0
 8004a9c:	4607      	mov	r7, r0
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f000 fb1a 	bl	80050d8 <__multiply>
 8004aa4:	4651      	mov	r1, sl
 8004aa6:	4680      	mov	r8, r0
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f000 fa6c 	bl	8004f86 <_Bfree>
 8004aae:	46c2      	mov	sl, r8
 8004ab0:	9b08      	ldr	r3, [sp, #32]
 8004ab2:	1b9a      	subs	r2, r3, r6
 8004ab4:	d004      	beq.n	8004ac0 <_dtoa_r+0x780>
 8004ab6:	4651      	mov	r1, sl
 8004ab8:	4620      	mov	r0, r4
 8004aba:	f000 fb9b 	bl	80051f4 <__pow5mult>
 8004abe:	4682      	mov	sl, r0
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	f000 faff 	bl	80050c6 <__i2b>
 8004ac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	4606      	mov	r6, r0
 8004ace:	f340 8083 	ble.w	8004bd8 <_dtoa_r+0x898>
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	4601      	mov	r1, r0
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f000 fb8c 	bl	80051f4 <__pow5mult>
 8004adc:	9b07      	ldr	r3, [sp, #28]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	4606      	mov	r6, r0
 8004ae2:	dd7c      	ble.n	8004bde <_dtoa_r+0x89e>
 8004ae4:	f04f 0800 	mov.w	r8, #0
 8004ae8:	6933      	ldr	r3, [r6, #16]
 8004aea:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004aee:	6918      	ldr	r0, [r3, #16]
 8004af0:	f000 fa9b 	bl	800502a <__hi0bits>
 8004af4:	f1c0 0020 	rsb	r0, r0, #32
 8004af8:	9b06      	ldr	r3, [sp, #24]
 8004afa:	4418      	add	r0, r3
 8004afc:	f010 001f 	ands.w	r0, r0, #31
 8004b00:	f000 8096 	beq.w	8004c30 <_dtoa_r+0x8f0>
 8004b04:	f1c0 0320 	rsb	r3, r0, #32
 8004b08:	2b04      	cmp	r3, #4
 8004b0a:	f340 8087 	ble.w	8004c1c <_dtoa_r+0x8dc>
 8004b0e:	9b05      	ldr	r3, [sp, #20]
 8004b10:	f1c0 001c 	rsb	r0, r0, #28
 8004b14:	4403      	add	r3, r0
 8004b16:	9305      	str	r3, [sp, #20]
 8004b18:	9b06      	ldr	r3, [sp, #24]
 8004b1a:	4405      	add	r5, r0
 8004b1c:	4403      	add	r3, r0
 8004b1e:	9306      	str	r3, [sp, #24]
 8004b20:	9b05      	ldr	r3, [sp, #20]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	dd05      	ble.n	8004b32 <_dtoa_r+0x7f2>
 8004b26:	4651      	mov	r1, sl
 8004b28:	461a      	mov	r2, r3
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	f000 fbb0 	bl	8005290 <__lshift>
 8004b30:	4682      	mov	sl, r0
 8004b32:	9b06      	ldr	r3, [sp, #24]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	dd05      	ble.n	8004b44 <_dtoa_r+0x804>
 8004b38:	4631      	mov	r1, r6
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f000 fba7 	bl	8005290 <__lshift>
 8004b42:	4606      	mov	r6, r0
 8004b44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d074      	beq.n	8004c34 <_dtoa_r+0x8f4>
 8004b4a:	4631      	mov	r1, r6
 8004b4c:	4650      	mov	r0, sl
 8004b4e:	f000 fbf0 	bl	8005332 <__mcmp>
 8004b52:	2800      	cmp	r0, #0
 8004b54:	da6e      	bge.n	8004c34 <_dtoa_r+0x8f4>
 8004b56:	2300      	movs	r3, #0
 8004b58:	4651      	mov	r1, sl
 8004b5a:	220a      	movs	r2, #10
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	f000 fa29 	bl	8004fb4 <__multadd>
 8004b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004b68:	4682      	mov	sl, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 81a8 	beq.w	8004ec0 <_dtoa_r+0xb80>
 8004b70:	2300      	movs	r3, #0
 8004b72:	4639      	mov	r1, r7
 8004b74:	220a      	movs	r2, #10
 8004b76:	4620      	mov	r0, r4
 8004b78:	f000 fa1c 	bl	8004fb4 <__multadd>
 8004b7c:	9b04      	ldr	r3, [sp, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	4607      	mov	r7, r0
 8004b82:	f300 80c8 	bgt.w	8004d16 <_dtoa_r+0x9d6>
 8004b86:	9b07      	ldr	r3, [sp, #28]
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	f340 80c4 	ble.w	8004d16 <_dtoa_r+0x9d6>
 8004b8e:	e059      	b.n	8004c44 <_dtoa_r+0x904>
 8004b90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004b92:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004b96:	e756      	b.n	8004a46 <_dtoa_r+0x706>
 8004b98:	9b03      	ldr	r3, [sp, #12]
 8004b9a:	1e5e      	subs	r6, r3, #1
 8004b9c:	9b08      	ldr	r3, [sp, #32]
 8004b9e:	42b3      	cmp	r3, r6
 8004ba0:	bfbf      	itttt	lt
 8004ba2:	9b08      	ldrlt	r3, [sp, #32]
 8004ba4:	9608      	strlt	r6, [sp, #32]
 8004ba6:	1af2      	sublt	r2, r6, r3
 8004ba8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8004baa:	bfb6      	itet	lt
 8004bac:	189b      	addlt	r3, r3, r2
 8004bae:	1b9e      	subge	r6, r3, r6
 8004bb0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8004bb2:	9b03      	ldr	r3, [sp, #12]
 8004bb4:	bfb8      	it	lt
 8004bb6:	2600      	movlt	r6, #0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	bfb9      	ittee	lt
 8004bbc:	9b05      	ldrlt	r3, [sp, #20]
 8004bbe:	9a03      	ldrlt	r2, [sp, #12]
 8004bc0:	9d05      	ldrge	r5, [sp, #20]
 8004bc2:	9b03      	ldrge	r3, [sp, #12]
 8004bc4:	bfbc      	itt	lt
 8004bc6:	1a9d      	sublt	r5, r3, r2
 8004bc8:	2300      	movlt	r3, #0
 8004bca:	e73e      	b.n	8004a4a <_dtoa_r+0x70a>
 8004bcc:	9e08      	ldr	r6, [sp, #32]
 8004bce:	9d05      	ldr	r5, [sp, #20]
 8004bd0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004bd2:	e745      	b.n	8004a60 <_dtoa_r+0x720>
 8004bd4:	9a08      	ldr	r2, [sp, #32]
 8004bd6:	e76e      	b.n	8004ab6 <_dtoa_r+0x776>
 8004bd8:	9b07      	ldr	r3, [sp, #28]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	dc19      	bgt.n	8004c12 <_dtoa_r+0x8d2>
 8004bde:	9b00      	ldr	r3, [sp, #0]
 8004be0:	b9bb      	cbnz	r3, 8004c12 <_dtoa_r+0x8d2>
 8004be2:	9b01      	ldr	r3, [sp, #4]
 8004be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004be8:	b99b      	cbnz	r3, 8004c12 <_dtoa_r+0x8d2>
 8004bea:	9b01      	ldr	r3, [sp, #4]
 8004bec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bf0:	0d1b      	lsrs	r3, r3, #20
 8004bf2:	051b      	lsls	r3, r3, #20
 8004bf4:	b183      	cbz	r3, 8004c18 <_dtoa_r+0x8d8>
 8004bf6:	9b05      	ldr	r3, [sp, #20]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	9305      	str	r3, [sp, #20]
 8004bfc:	9b06      	ldr	r3, [sp, #24]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	9306      	str	r3, [sp, #24]
 8004c02:	f04f 0801 	mov.w	r8, #1
 8004c06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f47f af6d 	bne.w	8004ae8 <_dtoa_r+0x7a8>
 8004c0e:	2001      	movs	r0, #1
 8004c10:	e772      	b.n	8004af8 <_dtoa_r+0x7b8>
 8004c12:	f04f 0800 	mov.w	r8, #0
 8004c16:	e7f6      	b.n	8004c06 <_dtoa_r+0x8c6>
 8004c18:	4698      	mov	r8, r3
 8004c1a:	e7f4      	b.n	8004c06 <_dtoa_r+0x8c6>
 8004c1c:	d080      	beq.n	8004b20 <_dtoa_r+0x7e0>
 8004c1e:	9a05      	ldr	r2, [sp, #20]
 8004c20:	331c      	adds	r3, #28
 8004c22:	441a      	add	r2, r3
 8004c24:	9205      	str	r2, [sp, #20]
 8004c26:	9a06      	ldr	r2, [sp, #24]
 8004c28:	441a      	add	r2, r3
 8004c2a:	441d      	add	r5, r3
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	e776      	b.n	8004b1e <_dtoa_r+0x7de>
 8004c30:	4603      	mov	r3, r0
 8004c32:	e7f4      	b.n	8004c1e <_dtoa_r+0x8de>
 8004c34:	9b03      	ldr	r3, [sp, #12]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	dc36      	bgt.n	8004ca8 <_dtoa_r+0x968>
 8004c3a:	9b07      	ldr	r3, [sp, #28]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	dd33      	ble.n	8004ca8 <_dtoa_r+0x968>
 8004c40:	9b03      	ldr	r3, [sp, #12]
 8004c42:	9304      	str	r3, [sp, #16]
 8004c44:	9b04      	ldr	r3, [sp, #16]
 8004c46:	b963      	cbnz	r3, 8004c62 <_dtoa_r+0x922>
 8004c48:	4631      	mov	r1, r6
 8004c4a:	2205      	movs	r2, #5
 8004c4c:	4620      	mov	r0, r4
 8004c4e:	f000 f9b1 	bl	8004fb4 <__multadd>
 8004c52:	4601      	mov	r1, r0
 8004c54:	4606      	mov	r6, r0
 8004c56:	4650      	mov	r0, sl
 8004c58:	f000 fb6b 	bl	8005332 <__mcmp>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	f73f adb6 	bgt.w	80047ce <_dtoa_r+0x48e>
 8004c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c64:	9d02      	ldr	r5, [sp, #8]
 8004c66:	ea6f 0b03 	mvn.w	fp, r3
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	9303      	str	r3, [sp, #12]
 8004c6e:	4631      	mov	r1, r6
 8004c70:	4620      	mov	r0, r4
 8004c72:	f000 f988 	bl	8004f86 <_Bfree>
 8004c76:	2f00      	cmp	r7, #0
 8004c78:	f43f aea6 	beq.w	80049c8 <_dtoa_r+0x688>
 8004c7c:	9b03      	ldr	r3, [sp, #12]
 8004c7e:	b12b      	cbz	r3, 8004c8c <_dtoa_r+0x94c>
 8004c80:	42bb      	cmp	r3, r7
 8004c82:	d003      	beq.n	8004c8c <_dtoa_r+0x94c>
 8004c84:	4619      	mov	r1, r3
 8004c86:	4620      	mov	r0, r4
 8004c88:	f000 f97d 	bl	8004f86 <_Bfree>
 8004c8c:	4639      	mov	r1, r7
 8004c8e:	4620      	mov	r0, r4
 8004c90:	f000 f979 	bl	8004f86 <_Bfree>
 8004c94:	e698      	b.n	80049c8 <_dtoa_r+0x688>
 8004c96:	2600      	movs	r6, #0
 8004c98:	4637      	mov	r7, r6
 8004c9a:	e7e2      	b.n	8004c62 <_dtoa_r+0x922>
 8004c9c:	46bb      	mov	fp, r7
 8004c9e:	4637      	mov	r7, r6
 8004ca0:	e595      	b.n	80047ce <_dtoa_r+0x48e>
 8004ca2:	bf00      	nop
 8004ca4:	40240000 	.word	0x40240000
 8004ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004caa:	bb93      	cbnz	r3, 8004d12 <_dtoa_r+0x9d2>
 8004cac:	9b03      	ldr	r3, [sp, #12]
 8004cae:	9304      	str	r3, [sp, #16]
 8004cb0:	9d02      	ldr	r5, [sp, #8]
 8004cb2:	4631      	mov	r1, r6
 8004cb4:	4650      	mov	r0, sl
 8004cb6:	f7ff fab7 	bl	8004228 <quorem>
 8004cba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004cbe:	f805 9b01 	strb.w	r9, [r5], #1
 8004cc2:	9b02      	ldr	r3, [sp, #8]
 8004cc4:	9a04      	ldr	r2, [sp, #16]
 8004cc6:	1aeb      	subs	r3, r5, r3
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	f300 80dc 	bgt.w	8004e86 <_dtoa_r+0xb46>
 8004cce:	9b02      	ldr	r3, [sp, #8]
 8004cd0:	2a01      	cmp	r2, #1
 8004cd2:	bfac      	ite	ge
 8004cd4:	189b      	addge	r3, r3, r2
 8004cd6:	3301      	addlt	r3, #1
 8004cd8:	4698      	mov	r8, r3
 8004cda:	2300      	movs	r3, #0
 8004cdc:	9303      	str	r3, [sp, #12]
 8004cde:	4651      	mov	r1, sl
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	f000 fad4 	bl	8005290 <__lshift>
 8004ce8:	4631      	mov	r1, r6
 8004cea:	4682      	mov	sl, r0
 8004cec:	f000 fb21 	bl	8005332 <__mcmp>
 8004cf0:	2800      	cmp	r0, #0
 8004cf2:	f300 808d 	bgt.w	8004e10 <_dtoa_r+0xad0>
 8004cf6:	d103      	bne.n	8004d00 <_dtoa_r+0x9c0>
 8004cf8:	f019 0f01 	tst.w	r9, #1
 8004cfc:	f040 8088 	bne.w	8004e10 <_dtoa_r+0xad0>
 8004d00:	4645      	mov	r5, r8
 8004d02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004d06:	2b30      	cmp	r3, #48	; 0x30
 8004d08:	f105 32ff 	add.w	r2, r5, #4294967295
 8004d0c:	d1af      	bne.n	8004c6e <_dtoa_r+0x92e>
 8004d0e:	4615      	mov	r5, r2
 8004d10:	e7f7      	b.n	8004d02 <_dtoa_r+0x9c2>
 8004d12:	9b03      	ldr	r3, [sp, #12]
 8004d14:	9304      	str	r3, [sp, #16]
 8004d16:	2d00      	cmp	r5, #0
 8004d18:	dd05      	ble.n	8004d26 <_dtoa_r+0x9e6>
 8004d1a:	4639      	mov	r1, r7
 8004d1c:	462a      	mov	r2, r5
 8004d1e:	4620      	mov	r0, r4
 8004d20:	f000 fab6 	bl	8005290 <__lshift>
 8004d24:	4607      	mov	r7, r0
 8004d26:	f1b8 0f00 	cmp.w	r8, #0
 8004d2a:	d04c      	beq.n	8004dc6 <_dtoa_r+0xa86>
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	4620      	mov	r0, r4
 8004d30:	f000 f8f5 	bl	8004f1e <_Balloc>
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	3202      	adds	r2, #2
 8004d38:	4605      	mov	r5, r0
 8004d3a:	0092      	lsls	r2, r2, #2
 8004d3c:	f107 010c 	add.w	r1, r7, #12
 8004d40:	300c      	adds	r0, #12
 8004d42:	f000 f8e1 	bl	8004f08 <memcpy>
 8004d46:	2201      	movs	r2, #1
 8004d48:	4629      	mov	r1, r5
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	f000 faa0 	bl	8005290 <__lshift>
 8004d50:	9b00      	ldr	r3, [sp, #0]
 8004d52:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004d56:	9703      	str	r7, [sp, #12]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	4607      	mov	r7, r0
 8004d5e:	9305      	str	r3, [sp, #20]
 8004d60:	4631      	mov	r1, r6
 8004d62:	4650      	mov	r0, sl
 8004d64:	f7ff fa60 	bl	8004228 <quorem>
 8004d68:	9903      	ldr	r1, [sp, #12]
 8004d6a:	4605      	mov	r5, r0
 8004d6c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004d70:	4650      	mov	r0, sl
 8004d72:	f000 fade 	bl	8005332 <__mcmp>
 8004d76:	463a      	mov	r2, r7
 8004d78:	9000      	str	r0, [sp, #0]
 8004d7a:	4631      	mov	r1, r6
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	f000 faf2 	bl	8005366 <__mdiff>
 8004d82:	68c3      	ldr	r3, [r0, #12]
 8004d84:	4602      	mov	r2, r0
 8004d86:	bb03      	cbnz	r3, 8004dca <_dtoa_r+0xa8a>
 8004d88:	4601      	mov	r1, r0
 8004d8a:	9006      	str	r0, [sp, #24]
 8004d8c:	4650      	mov	r0, sl
 8004d8e:	f000 fad0 	bl	8005332 <__mcmp>
 8004d92:	9a06      	ldr	r2, [sp, #24]
 8004d94:	4603      	mov	r3, r0
 8004d96:	4611      	mov	r1, r2
 8004d98:	4620      	mov	r0, r4
 8004d9a:	9306      	str	r3, [sp, #24]
 8004d9c:	f000 f8f3 	bl	8004f86 <_Bfree>
 8004da0:	9b06      	ldr	r3, [sp, #24]
 8004da2:	b9a3      	cbnz	r3, 8004dce <_dtoa_r+0xa8e>
 8004da4:	9a07      	ldr	r2, [sp, #28]
 8004da6:	b992      	cbnz	r2, 8004dce <_dtoa_r+0xa8e>
 8004da8:	9a05      	ldr	r2, [sp, #20]
 8004daa:	b982      	cbnz	r2, 8004dce <_dtoa_r+0xa8e>
 8004dac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004db0:	d029      	beq.n	8004e06 <_dtoa_r+0xac6>
 8004db2:	9b00      	ldr	r3, [sp, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	dd01      	ble.n	8004dbc <_dtoa_r+0xa7c>
 8004db8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8004dbc:	f108 0501 	add.w	r5, r8, #1
 8004dc0:	f888 9000 	strb.w	r9, [r8]
 8004dc4:	e753      	b.n	8004c6e <_dtoa_r+0x92e>
 8004dc6:	4638      	mov	r0, r7
 8004dc8:	e7c2      	b.n	8004d50 <_dtoa_r+0xa10>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e7e3      	b.n	8004d96 <_dtoa_r+0xa56>
 8004dce:	9a00      	ldr	r2, [sp, #0]
 8004dd0:	2a00      	cmp	r2, #0
 8004dd2:	db04      	blt.n	8004dde <_dtoa_r+0xa9e>
 8004dd4:	d125      	bne.n	8004e22 <_dtoa_r+0xae2>
 8004dd6:	9a07      	ldr	r2, [sp, #28]
 8004dd8:	bb1a      	cbnz	r2, 8004e22 <_dtoa_r+0xae2>
 8004dda:	9a05      	ldr	r2, [sp, #20]
 8004ddc:	bb0a      	cbnz	r2, 8004e22 <_dtoa_r+0xae2>
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	ddec      	ble.n	8004dbc <_dtoa_r+0xa7c>
 8004de2:	4651      	mov	r1, sl
 8004de4:	2201      	movs	r2, #1
 8004de6:	4620      	mov	r0, r4
 8004de8:	f000 fa52 	bl	8005290 <__lshift>
 8004dec:	4631      	mov	r1, r6
 8004dee:	4682      	mov	sl, r0
 8004df0:	f000 fa9f 	bl	8005332 <__mcmp>
 8004df4:	2800      	cmp	r0, #0
 8004df6:	dc03      	bgt.n	8004e00 <_dtoa_r+0xac0>
 8004df8:	d1e0      	bne.n	8004dbc <_dtoa_r+0xa7c>
 8004dfa:	f019 0f01 	tst.w	r9, #1
 8004dfe:	d0dd      	beq.n	8004dbc <_dtoa_r+0xa7c>
 8004e00:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004e04:	d1d8      	bne.n	8004db8 <_dtoa_r+0xa78>
 8004e06:	2339      	movs	r3, #57	; 0x39
 8004e08:	f888 3000 	strb.w	r3, [r8]
 8004e0c:	f108 0801 	add.w	r8, r8, #1
 8004e10:	4645      	mov	r5, r8
 8004e12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004e16:	2b39      	cmp	r3, #57	; 0x39
 8004e18:	f105 32ff 	add.w	r2, r5, #4294967295
 8004e1c:	d03b      	beq.n	8004e96 <_dtoa_r+0xb56>
 8004e1e:	3301      	adds	r3, #1
 8004e20:	e040      	b.n	8004ea4 <_dtoa_r+0xb64>
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f108 0501 	add.w	r5, r8, #1
 8004e28:	dd05      	ble.n	8004e36 <_dtoa_r+0xaf6>
 8004e2a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004e2e:	d0ea      	beq.n	8004e06 <_dtoa_r+0xac6>
 8004e30:	f109 0901 	add.w	r9, r9, #1
 8004e34:	e7c4      	b.n	8004dc0 <_dtoa_r+0xa80>
 8004e36:	9b02      	ldr	r3, [sp, #8]
 8004e38:	9a04      	ldr	r2, [sp, #16]
 8004e3a:	f805 9c01 	strb.w	r9, [r5, #-1]
 8004e3e:	1aeb      	subs	r3, r5, r3
 8004e40:	4293      	cmp	r3, r2
 8004e42:	46a8      	mov	r8, r5
 8004e44:	f43f af4b 	beq.w	8004cde <_dtoa_r+0x99e>
 8004e48:	4651      	mov	r1, sl
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	220a      	movs	r2, #10
 8004e4e:	4620      	mov	r0, r4
 8004e50:	f000 f8b0 	bl	8004fb4 <__multadd>
 8004e54:	9b03      	ldr	r3, [sp, #12]
 8004e56:	9903      	ldr	r1, [sp, #12]
 8004e58:	42bb      	cmp	r3, r7
 8004e5a:	4682      	mov	sl, r0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	f04f 020a 	mov.w	r2, #10
 8004e64:	4620      	mov	r0, r4
 8004e66:	d104      	bne.n	8004e72 <_dtoa_r+0xb32>
 8004e68:	f000 f8a4 	bl	8004fb4 <__multadd>
 8004e6c:	9003      	str	r0, [sp, #12]
 8004e6e:	4607      	mov	r7, r0
 8004e70:	e776      	b.n	8004d60 <_dtoa_r+0xa20>
 8004e72:	f000 f89f 	bl	8004fb4 <__multadd>
 8004e76:	2300      	movs	r3, #0
 8004e78:	9003      	str	r0, [sp, #12]
 8004e7a:	220a      	movs	r2, #10
 8004e7c:	4639      	mov	r1, r7
 8004e7e:	4620      	mov	r0, r4
 8004e80:	f000 f898 	bl	8004fb4 <__multadd>
 8004e84:	e7f3      	b.n	8004e6e <_dtoa_r+0xb2e>
 8004e86:	4651      	mov	r1, sl
 8004e88:	2300      	movs	r3, #0
 8004e8a:	220a      	movs	r2, #10
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	f000 f891 	bl	8004fb4 <__multadd>
 8004e92:	4682      	mov	sl, r0
 8004e94:	e70d      	b.n	8004cb2 <_dtoa_r+0x972>
 8004e96:	9b02      	ldr	r3, [sp, #8]
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d105      	bne.n	8004ea8 <_dtoa_r+0xb68>
 8004e9c:	9a02      	ldr	r2, [sp, #8]
 8004e9e:	f10b 0b01 	add.w	fp, fp, #1
 8004ea2:	2331      	movs	r3, #49	; 0x31
 8004ea4:	7013      	strb	r3, [r2, #0]
 8004ea6:	e6e2      	b.n	8004c6e <_dtoa_r+0x92e>
 8004ea8:	4615      	mov	r5, r2
 8004eaa:	e7b2      	b.n	8004e12 <_dtoa_r+0xad2>
 8004eac:	4b09      	ldr	r3, [pc, #36]	; (8004ed4 <_dtoa_r+0xb94>)
 8004eae:	f7ff baae 	b.w	800440e <_dtoa_r+0xce>
 8004eb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f47f aa88 	bne.w	80043ca <_dtoa_r+0x8a>
 8004eba:	4b07      	ldr	r3, [pc, #28]	; (8004ed8 <_dtoa_r+0xb98>)
 8004ebc:	f7ff baa7 	b.w	800440e <_dtoa_r+0xce>
 8004ec0:	9b04      	ldr	r3, [sp, #16]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f73f aef4 	bgt.w	8004cb0 <_dtoa_r+0x970>
 8004ec8:	9b07      	ldr	r3, [sp, #28]
 8004eca:	2b02      	cmp	r3, #2
 8004ecc:	f77f aef0 	ble.w	8004cb0 <_dtoa_r+0x970>
 8004ed0:	e6b8      	b.n	8004c44 <_dtoa_r+0x904>
 8004ed2:	bf00      	nop
 8004ed4:	080062c2 	.word	0x080062c2
 8004ed8:	08006314 	.word	0x08006314

08004edc <_localeconv_r>:
 8004edc:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <_localeconv_r+0x14>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6a18      	ldr	r0, [r3, #32]
 8004ee2:	4b04      	ldr	r3, [pc, #16]	; (8004ef4 <_localeconv_r+0x18>)
 8004ee4:	2800      	cmp	r0, #0
 8004ee6:	bf08      	it	eq
 8004ee8:	4618      	moveq	r0, r3
 8004eea:	30f0      	adds	r0, #240	; 0xf0
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	20000014 	.word	0x20000014
 8004ef4:	20000078 	.word	0x20000078

08004ef8 <malloc>:
 8004ef8:	4b02      	ldr	r3, [pc, #8]	; (8004f04 <malloc+0xc>)
 8004efa:	4601      	mov	r1, r0
 8004efc:	6818      	ldr	r0, [r3, #0]
 8004efe:	f000 bb3b 	b.w	8005578 <_malloc_r>
 8004f02:	bf00      	nop
 8004f04:	20000014 	.word	0x20000014

08004f08 <memcpy>:
 8004f08:	b510      	push	{r4, lr}
 8004f0a:	1e43      	subs	r3, r0, #1
 8004f0c:	440a      	add	r2, r1
 8004f0e:	4291      	cmp	r1, r2
 8004f10:	d100      	bne.n	8004f14 <memcpy+0xc>
 8004f12:	bd10      	pop	{r4, pc}
 8004f14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f1c:	e7f7      	b.n	8004f0e <memcpy+0x6>

08004f1e <_Balloc>:
 8004f1e:	b570      	push	{r4, r5, r6, lr}
 8004f20:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f22:	4604      	mov	r4, r0
 8004f24:	460e      	mov	r6, r1
 8004f26:	b93d      	cbnz	r5, 8004f38 <_Balloc+0x1a>
 8004f28:	2010      	movs	r0, #16
 8004f2a:	f7ff ffe5 	bl	8004ef8 <malloc>
 8004f2e:	6260      	str	r0, [r4, #36]	; 0x24
 8004f30:	6045      	str	r5, [r0, #4]
 8004f32:	6085      	str	r5, [r0, #8]
 8004f34:	6005      	str	r5, [r0, #0]
 8004f36:	60c5      	str	r5, [r0, #12]
 8004f38:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004f3a:	68eb      	ldr	r3, [r5, #12]
 8004f3c:	b183      	cbz	r3, 8004f60 <_Balloc+0x42>
 8004f3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004f46:	b9b8      	cbnz	r0, 8004f78 <_Balloc+0x5a>
 8004f48:	2101      	movs	r1, #1
 8004f4a:	fa01 f506 	lsl.w	r5, r1, r6
 8004f4e:	1d6a      	adds	r2, r5, #5
 8004f50:	0092      	lsls	r2, r2, #2
 8004f52:	4620      	mov	r0, r4
 8004f54:	f000 fab4 	bl	80054c0 <_calloc_r>
 8004f58:	b160      	cbz	r0, 8004f74 <_Balloc+0x56>
 8004f5a:	6046      	str	r6, [r0, #4]
 8004f5c:	6085      	str	r5, [r0, #8]
 8004f5e:	e00e      	b.n	8004f7e <_Balloc+0x60>
 8004f60:	2221      	movs	r2, #33	; 0x21
 8004f62:	2104      	movs	r1, #4
 8004f64:	4620      	mov	r0, r4
 8004f66:	f000 faab 	bl	80054c0 <_calloc_r>
 8004f6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f6c:	60e8      	str	r0, [r5, #12]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e4      	bne.n	8004f3e <_Balloc+0x20>
 8004f74:	2000      	movs	r0, #0
 8004f76:	bd70      	pop	{r4, r5, r6, pc}
 8004f78:	6802      	ldr	r2, [r0, #0]
 8004f7a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	6103      	str	r3, [r0, #16]
 8004f82:	60c3      	str	r3, [r0, #12]
 8004f84:	bd70      	pop	{r4, r5, r6, pc}

08004f86 <_Bfree>:
 8004f86:	b570      	push	{r4, r5, r6, lr}
 8004f88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004f8a:	4606      	mov	r6, r0
 8004f8c:	460d      	mov	r5, r1
 8004f8e:	b93c      	cbnz	r4, 8004fa0 <_Bfree+0x1a>
 8004f90:	2010      	movs	r0, #16
 8004f92:	f7ff ffb1 	bl	8004ef8 <malloc>
 8004f96:	6270      	str	r0, [r6, #36]	; 0x24
 8004f98:	6044      	str	r4, [r0, #4]
 8004f9a:	6084      	str	r4, [r0, #8]
 8004f9c:	6004      	str	r4, [r0, #0]
 8004f9e:	60c4      	str	r4, [r0, #12]
 8004fa0:	b13d      	cbz	r5, 8004fb2 <_Bfree+0x2c>
 8004fa2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004fa4:	686a      	ldr	r2, [r5, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004fac:	6029      	str	r1, [r5, #0]
 8004fae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004fb2:	bd70      	pop	{r4, r5, r6, pc}

08004fb4 <__multadd>:
 8004fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb8:	690d      	ldr	r5, [r1, #16]
 8004fba:	461f      	mov	r7, r3
 8004fbc:	4606      	mov	r6, r0
 8004fbe:	460c      	mov	r4, r1
 8004fc0:	f101 0e14 	add.w	lr, r1, #20
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f8de 0000 	ldr.w	r0, [lr]
 8004fca:	b281      	uxth	r1, r0
 8004fcc:	fb02 7101 	mla	r1, r2, r1, r7
 8004fd0:	0c0f      	lsrs	r7, r1, #16
 8004fd2:	0c00      	lsrs	r0, r0, #16
 8004fd4:	fb02 7000 	mla	r0, r2, r0, r7
 8004fd8:	b289      	uxth	r1, r1
 8004fda:	3301      	adds	r3, #1
 8004fdc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004fe0:	429d      	cmp	r5, r3
 8004fe2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004fe6:	f84e 1b04 	str.w	r1, [lr], #4
 8004fea:	dcec      	bgt.n	8004fc6 <__multadd+0x12>
 8004fec:	b1d7      	cbz	r7, 8005024 <__multadd+0x70>
 8004fee:	68a3      	ldr	r3, [r4, #8]
 8004ff0:	429d      	cmp	r5, r3
 8004ff2:	db12      	blt.n	800501a <__multadd+0x66>
 8004ff4:	6861      	ldr	r1, [r4, #4]
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	3101      	adds	r1, #1
 8004ffa:	f7ff ff90 	bl	8004f1e <_Balloc>
 8004ffe:	6922      	ldr	r2, [r4, #16]
 8005000:	3202      	adds	r2, #2
 8005002:	f104 010c 	add.w	r1, r4, #12
 8005006:	4680      	mov	r8, r0
 8005008:	0092      	lsls	r2, r2, #2
 800500a:	300c      	adds	r0, #12
 800500c:	f7ff ff7c 	bl	8004f08 <memcpy>
 8005010:	4621      	mov	r1, r4
 8005012:	4630      	mov	r0, r6
 8005014:	f7ff ffb7 	bl	8004f86 <_Bfree>
 8005018:	4644      	mov	r4, r8
 800501a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800501e:	3501      	adds	r5, #1
 8005020:	615f      	str	r7, [r3, #20]
 8005022:	6125      	str	r5, [r4, #16]
 8005024:	4620      	mov	r0, r4
 8005026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800502a <__hi0bits>:
 800502a:	0c02      	lsrs	r2, r0, #16
 800502c:	0412      	lsls	r2, r2, #16
 800502e:	4603      	mov	r3, r0
 8005030:	b9b2      	cbnz	r2, 8005060 <__hi0bits+0x36>
 8005032:	0403      	lsls	r3, r0, #16
 8005034:	2010      	movs	r0, #16
 8005036:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800503a:	bf04      	itt	eq
 800503c:	021b      	lsleq	r3, r3, #8
 800503e:	3008      	addeq	r0, #8
 8005040:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005044:	bf04      	itt	eq
 8005046:	011b      	lsleq	r3, r3, #4
 8005048:	3004      	addeq	r0, #4
 800504a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800504e:	bf04      	itt	eq
 8005050:	009b      	lsleq	r3, r3, #2
 8005052:	3002      	addeq	r0, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	db06      	blt.n	8005066 <__hi0bits+0x3c>
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	d503      	bpl.n	8005064 <__hi0bits+0x3a>
 800505c:	3001      	adds	r0, #1
 800505e:	4770      	bx	lr
 8005060:	2000      	movs	r0, #0
 8005062:	e7e8      	b.n	8005036 <__hi0bits+0xc>
 8005064:	2020      	movs	r0, #32
 8005066:	4770      	bx	lr

08005068 <__lo0bits>:
 8005068:	6803      	ldr	r3, [r0, #0]
 800506a:	f013 0207 	ands.w	r2, r3, #7
 800506e:	4601      	mov	r1, r0
 8005070:	d00b      	beq.n	800508a <__lo0bits+0x22>
 8005072:	07da      	lsls	r2, r3, #31
 8005074:	d423      	bmi.n	80050be <__lo0bits+0x56>
 8005076:	0798      	lsls	r0, r3, #30
 8005078:	bf49      	itett	mi
 800507a:	085b      	lsrmi	r3, r3, #1
 800507c:	089b      	lsrpl	r3, r3, #2
 800507e:	2001      	movmi	r0, #1
 8005080:	600b      	strmi	r3, [r1, #0]
 8005082:	bf5c      	itt	pl
 8005084:	600b      	strpl	r3, [r1, #0]
 8005086:	2002      	movpl	r0, #2
 8005088:	4770      	bx	lr
 800508a:	b298      	uxth	r0, r3
 800508c:	b9a8      	cbnz	r0, 80050ba <__lo0bits+0x52>
 800508e:	0c1b      	lsrs	r3, r3, #16
 8005090:	2010      	movs	r0, #16
 8005092:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005096:	bf04      	itt	eq
 8005098:	0a1b      	lsreq	r3, r3, #8
 800509a:	3008      	addeq	r0, #8
 800509c:	071a      	lsls	r2, r3, #28
 800509e:	bf04      	itt	eq
 80050a0:	091b      	lsreq	r3, r3, #4
 80050a2:	3004      	addeq	r0, #4
 80050a4:	079a      	lsls	r2, r3, #30
 80050a6:	bf04      	itt	eq
 80050a8:	089b      	lsreq	r3, r3, #2
 80050aa:	3002      	addeq	r0, #2
 80050ac:	07da      	lsls	r2, r3, #31
 80050ae:	d402      	bmi.n	80050b6 <__lo0bits+0x4e>
 80050b0:	085b      	lsrs	r3, r3, #1
 80050b2:	d006      	beq.n	80050c2 <__lo0bits+0x5a>
 80050b4:	3001      	adds	r0, #1
 80050b6:	600b      	str	r3, [r1, #0]
 80050b8:	4770      	bx	lr
 80050ba:	4610      	mov	r0, r2
 80050bc:	e7e9      	b.n	8005092 <__lo0bits+0x2a>
 80050be:	2000      	movs	r0, #0
 80050c0:	4770      	bx	lr
 80050c2:	2020      	movs	r0, #32
 80050c4:	4770      	bx	lr

080050c6 <__i2b>:
 80050c6:	b510      	push	{r4, lr}
 80050c8:	460c      	mov	r4, r1
 80050ca:	2101      	movs	r1, #1
 80050cc:	f7ff ff27 	bl	8004f1e <_Balloc>
 80050d0:	2201      	movs	r2, #1
 80050d2:	6144      	str	r4, [r0, #20]
 80050d4:	6102      	str	r2, [r0, #16]
 80050d6:	bd10      	pop	{r4, pc}

080050d8 <__multiply>:
 80050d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050dc:	4614      	mov	r4, r2
 80050de:	690a      	ldr	r2, [r1, #16]
 80050e0:	6923      	ldr	r3, [r4, #16]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	bfb8      	it	lt
 80050e6:	460b      	movlt	r3, r1
 80050e8:	4689      	mov	r9, r1
 80050ea:	bfbc      	itt	lt
 80050ec:	46a1      	movlt	r9, r4
 80050ee:	461c      	movlt	r4, r3
 80050f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80050f4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80050f8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80050fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005100:	eb07 060a 	add.w	r6, r7, sl
 8005104:	429e      	cmp	r6, r3
 8005106:	bfc8      	it	gt
 8005108:	3101      	addgt	r1, #1
 800510a:	f7ff ff08 	bl	8004f1e <_Balloc>
 800510e:	f100 0514 	add.w	r5, r0, #20
 8005112:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005116:	462b      	mov	r3, r5
 8005118:	2200      	movs	r2, #0
 800511a:	4543      	cmp	r3, r8
 800511c:	d316      	bcc.n	800514c <__multiply+0x74>
 800511e:	f104 0214 	add.w	r2, r4, #20
 8005122:	f109 0114 	add.w	r1, r9, #20
 8005126:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800512a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800512e:	9301      	str	r3, [sp, #4]
 8005130:	9c01      	ldr	r4, [sp, #4]
 8005132:	4294      	cmp	r4, r2
 8005134:	4613      	mov	r3, r2
 8005136:	d80c      	bhi.n	8005152 <__multiply+0x7a>
 8005138:	2e00      	cmp	r6, #0
 800513a:	dd03      	ble.n	8005144 <__multiply+0x6c>
 800513c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005140:	2b00      	cmp	r3, #0
 8005142:	d054      	beq.n	80051ee <__multiply+0x116>
 8005144:	6106      	str	r6, [r0, #16]
 8005146:	b003      	add	sp, #12
 8005148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800514c:	f843 2b04 	str.w	r2, [r3], #4
 8005150:	e7e3      	b.n	800511a <__multiply+0x42>
 8005152:	f8b3 a000 	ldrh.w	sl, [r3]
 8005156:	3204      	adds	r2, #4
 8005158:	f1ba 0f00 	cmp.w	sl, #0
 800515c:	d020      	beq.n	80051a0 <__multiply+0xc8>
 800515e:	46ae      	mov	lr, r5
 8005160:	4689      	mov	r9, r1
 8005162:	f04f 0c00 	mov.w	ip, #0
 8005166:	f859 4b04 	ldr.w	r4, [r9], #4
 800516a:	f8be b000 	ldrh.w	fp, [lr]
 800516e:	b2a3      	uxth	r3, r4
 8005170:	fb0a b303 	mla	r3, sl, r3, fp
 8005174:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8005178:	f8de 4000 	ldr.w	r4, [lr]
 800517c:	4463      	add	r3, ip
 800517e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005182:	fb0a c40b 	mla	r4, sl, fp, ip
 8005186:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800518a:	b29b      	uxth	r3, r3
 800518c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005190:	454f      	cmp	r7, r9
 8005192:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005196:	f84e 3b04 	str.w	r3, [lr], #4
 800519a:	d8e4      	bhi.n	8005166 <__multiply+0x8e>
 800519c:	f8ce c000 	str.w	ip, [lr]
 80051a0:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 80051a4:	f1b9 0f00 	cmp.w	r9, #0
 80051a8:	d01f      	beq.n	80051ea <__multiply+0x112>
 80051aa:	682b      	ldr	r3, [r5, #0]
 80051ac:	46ae      	mov	lr, r5
 80051ae:	468c      	mov	ip, r1
 80051b0:	f04f 0a00 	mov.w	sl, #0
 80051b4:	f8bc 4000 	ldrh.w	r4, [ip]
 80051b8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80051bc:	fb09 b404 	mla	r4, r9, r4, fp
 80051c0:	44a2      	add	sl, r4
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80051c8:	f84e 3b04 	str.w	r3, [lr], #4
 80051cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80051d0:	f8be 4000 	ldrh.w	r4, [lr]
 80051d4:	0c1b      	lsrs	r3, r3, #16
 80051d6:	fb09 4303 	mla	r3, r9, r3, r4
 80051da:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80051de:	4567      	cmp	r7, ip
 80051e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80051e4:	d8e6      	bhi.n	80051b4 <__multiply+0xdc>
 80051e6:	f8ce 3000 	str.w	r3, [lr]
 80051ea:	3504      	adds	r5, #4
 80051ec:	e7a0      	b.n	8005130 <__multiply+0x58>
 80051ee:	3e01      	subs	r6, #1
 80051f0:	e7a2      	b.n	8005138 <__multiply+0x60>
	...

080051f4 <__pow5mult>:
 80051f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051f8:	4615      	mov	r5, r2
 80051fa:	f012 0203 	ands.w	r2, r2, #3
 80051fe:	4606      	mov	r6, r0
 8005200:	460f      	mov	r7, r1
 8005202:	d007      	beq.n	8005214 <__pow5mult+0x20>
 8005204:	3a01      	subs	r2, #1
 8005206:	4c21      	ldr	r4, [pc, #132]	; (800528c <__pow5mult+0x98>)
 8005208:	2300      	movs	r3, #0
 800520a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800520e:	f7ff fed1 	bl	8004fb4 <__multadd>
 8005212:	4607      	mov	r7, r0
 8005214:	10ad      	asrs	r5, r5, #2
 8005216:	d035      	beq.n	8005284 <__pow5mult+0x90>
 8005218:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800521a:	b93c      	cbnz	r4, 800522c <__pow5mult+0x38>
 800521c:	2010      	movs	r0, #16
 800521e:	f7ff fe6b 	bl	8004ef8 <malloc>
 8005222:	6270      	str	r0, [r6, #36]	; 0x24
 8005224:	6044      	str	r4, [r0, #4]
 8005226:	6084      	str	r4, [r0, #8]
 8005228:	6004      	str	r4, [r0, #0]
 800522a:	60c4      	str	r4, [r0, #12]
 800522c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005230:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005234:	b94c      	cbnz	r4, 800524a <__pow5mult+0x56>
 8005236:	f240 2171 	movw	r1, #625	; 0x271
 800523a:	4630      	mov	r0, r6
 800523c:	f7ff ff43 	bl	80050c6 <__i2b>
 8005240:	2300      	movs	r3, #0
 8005242:	f8c8 0008 	str.w	r0, [r8, #8]
 8005246:	4604      	mov	r4, r0
 8005248:	6003      	str	r3, [r0, #0]
 800524a:	f04f 0800 	mov.w	r8, #0
 800524e:	07eb      	lsls	r3, r5, #31
 8005250:	d50a      	bpl.n	8005268 <__pow5mult+0x74>
 8005252:	4639      	mov	r1, r7
 8005254:	4622      	mov	r2, r4
 8005256:	4630      	mov	r0, r6
 8005258:	f7ff ff3e 	bl	80050d8 <__multiply>
 800525c:	4639      	mov	r1, r7
 800525e:	4681      	mov	r9, r0
 8005260:	4630      	mov	r0, r6
 8005262:	f7ff fe90 	bl	8004f86 <_Bfree>
 8005266:	464f      	mov	r7, r9
 8005268:	106d      	asrs	r5, r5, #1
 800526a:	d00b      	beq.n	8005284 <__pow5mult+0x90>
 800526c:	6820      	ldr	r0, [r4, #0]
 800526e:	b938      	cbnz	r0, 8005280 <__pow5mult+0x8c>
 8005270:	4622      	mov	r2, r4
 8005272:	4621      	mov	r1, r4
 8005274:	4630      	mov	r0, r6
 8005276:	f7ff ff2f 	bl	80050d8 <__multiply>
 800527a:	6020      	str	r0, [r4, #0]
 800527c:	f8c0 8000 	str.w	r8, [r0]
 8005280:	4604      	mov	r4, r0
 8005282:	e7e4      	b.n	800524e <__pow5mult+0x5a>
 8005284:	4638      	mov	r0, r7
 8005286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800528a:	bf00      	nop
 800528c:	08006418 	.word	0x08006418

08005290 <__lshift>:
 8005290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005294:	460c      	mov	r4, r1
 8005296:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800529a:	6923      	ldr	r3, [r4, #16]
 800529c:	6849      	ldr	r1, [r1, #4]
 800529e:	eb0a 0903 	add.w	r9, sl, r3
 80052a2:	68a3      	ldr	r3, [r4, #8]
 80052a4:	4607      	mov	r7, r0
 80052a6:	4616      	mov	r6, r2
 80052a8:	f109 0501 	add.w	r5, r9, #1
 80052ac:	42ab      	cmp	r3, r5
 80052ae:	db31      	blt.n	8005314 <__lshift+0x84>
 80052b0:	4638      	mov	r0, r7
 80052b2:	f7ff fe34 	bl	8004f1e <_Balloc>
 80052b6:	2200      	movs	r2, #0
 80052b8:	4680      	mov	r8, r0
 80052ba:	f100 0314 	add.w	r3, r0, #20
 80052be:	4611      	mov	r1, r2
 80052c0:	4552      	cmp	r2, sl
 80052c2:	db2a      	blt.n	800531a <__lshift+0x8a>
 80052c4:	6920      	ldr	r0, [r4, #16]
 80052c6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80052ca:	f104 0114 	add.w	r1, r4, #20
 80052ce:	f016 021f 	ands.w	r2, r6, #31
 80052d2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80052d6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80052da:	d022      	beq.n	8005322 <__lshift+0x92>
 80052dc:	f1c2 0c20 	rsb	ip, r2, #32
 80052e0:	2000      	movs	r0, #0
 80052e2:	680e      	ldr	r6, [r1, #0]
 80052e4:	4096      	lsls	r6, r2
 80052e6:	4330      	orrs	r0, r6
 80052e8:	f843 0b04 	str.w	r0, [r3], #4
 80052ec:	f851 0b04 	ldr.w	r0, [r1], #4
 80052f0:	458e      	cmp	lr, r1
 80052f2:	fa20 f00c 	lsr.w	r0, r0, ip
 80052f6:	d8f4      	bhi.n	80052e2 <__lshift+0x52>
 80052f8:	6018      	str	r0, [r3, #0]
 80052fa:	b108      	cbz	r0, 8005300 <__lshift+0x70>
 80052fc:	f109 0502 	add.w	r5, r9, #2
 8005300:	3d01      	subs	r5, #1
 8005302:	4638      	mov	r0, r7
 8005304:	f8c8 5010 	str.w	r5, [r8, #16]
 8005308:	4621      	mov	r1, r4
 800530a:	f7ff fe3c 	bl	8004f86 <_Bfree>
 800530e:	4640      	mov	r0, r8
 8005310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005314:	3101      	adds	r1, #1
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	e7c8      	b.n	80052ac <__lshift+0x1c>
 800531a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800531e:	3201      	adds	r2, #1
 8005320:	e7ce      	b.n	80052c0 <__lshift+0x30>
 8005322:	3b04      	subs	r3, #4
 8005324:	f851 2b04 	ldr.w	r2, [r1], #4
 8005328:	f843 2f04 	str.w	r2, [r3, #4]!
 800532c:	458e      	cmp	lr, r1
 800532e:	d8f9      	bhi.n	8005324 <__lshift+0x94>
 8005330:	e7e6      	b.n	8005300 <__lshift+0x70>

08005332 <__mcmp>:
 8005332:	6903      	ldr	r3, [r0, #16]
 8005334:	690a      	ldr	r2, [r1, #16]
 8005336:	1a9b      	subs	r3, r3, r2
 8005338:	b530      	push	{r4, r5, lr}
 800533a:	d10c      	bne.n	8005356 <__mcmp+0x24>
 800533c:	0092      	lsls	r2, r2, #2
 800533e:	3014      	adds	r0, #20
 8005340:	3114      	adds	r1, #20
 8005342:	1884      	adds	r4, r0, r2
 8005344:	4411      	add	r1, r2
 8005346:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800534a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800534e:	4295      	cmp	r5, r2
 8005350:	d003      	beq.n	800535a <__mcmp+0x28>
 8005352:	d305      	bcc.n	8005360 <__mcmp+0x2e>
 8005354:	2301      	movs	r3, #1
 8005356:	4618      	mov	r0, r3
 8005358:	bd30      	pop	{r4, r5, pc}
 800535a:	42a0      	cmp	r0, r4
 800535c:	d3f3      	bcc.n	8005346 <__mcmp+0x14>
 800535e:	e7fa      	b.n	8005356 <__mcmp+0x24>
 8005360:	f04f 33ff 	mov.w	r3, #4294967295
 8005364:	e7f7      	b.n	8005356 <__mcmp+0x24>

08005366 <__mdiff>:
 8005366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800536a:	460d      	mov	r5, r1
 800536c:	4607      	mov	r7, r0
 800536e:	4611      	mov	r1, r2
 8005370:	4628      	mov	r0, r5
 8005372:	4614      	mov	r4, r2
 8005374:	f7ff ffdd 	bl	8005332 <__mcmp>
 8005378:	1e06      	subs	r6, r0, #0
 800537a:	d108      	bne.n	800538e <__mdiff+0x28>
 800537c:	4631      	mov	r1, r6
 800537e:	4638      	mov	r0, r7
 8005380:	f7ff fdcd 	bl	8004f1e <_Balloc>
 8005384:	2301      	movs	r3, #1
 8005386:	6103      	str	r3, [r0, #16]
 8005388:	6146      	str	r6, [r0, #20]
 800538a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800538e:	bfa4      	itt	ge
 8005390:	4623      	movge	r3, r4
 8005392:	462c      	movge	r4, r5
 8005394:	4638      	mov	r0, r7
 8005396:	6861      	ldr	r1, [r4, #4]
 8005398:	bfa6      	itte	ge
 800539a:	461d      	movge	r5, r3
 800539c:	2600      	movge	r6, #0
 800539e:	2601      	movlt	r6, #1
 80053a0:	f7ff fdbd 	bl	8004f1e <_Balloc>
 80053a4:	692b      	ldr	r3, [r5, #16]
 80053a6:	60c6      	str	r6, [r0, #12]
 80053a8:	6926      	ldr	r6, [r4, #16]
 80053aa:	f105 0914 	add.w	r9, r5, #20
 80053ae:	f104 0214 	add.w	r2, r4, #20
 80053b2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80053b6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80053ba:	f100 0514 	add.w	r5, r0, #20
 80053be:	f04f 0c00 	mov.w	ip, #0
 80053c2:	f852 ab04 	ldr.w	sl, [r2], #4
 80053c6:	f859 4b04 	ldr.w	r4, [r9], #4
 80053ca:	fa1c f18a 	uxtah	r1, ip, sl
 80053ce:	b2a3      	uxth	r3, r4
 80053d0:	1ac9      	subs	r1, r1, r3
 80053d2:	0c23      	lsrs	r3, r4, #16
 80053d4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80053d8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80053dc:	b289      	uxth	r1, r1
 80053de:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80053e2:	45c8      	cmp	r8, r9
 80053e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80053e8:	4696      	mov	lr, r2
 80053ea:	f845 3b04 	str.w	r3, [r5], #4
 80053ee:	d8e8      	bhi.n	80053c2 <__mdiff+0x5c>
 80053f0:	45be      	cmp	lr, r7
 80053f2:	d305      	bcc.n	8005400 <__mdiff+0x9a>
 80053f4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80053f8:	b18b      	cbz	r3, 800541e <__mdiff+0xb8>
 80053fa:	6106      	str	r6, [r0, #16]
 80053fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005400:	f85e 1b04 	ldr.w	r1, [lr], #4
 8005404:	fa1c f381 	uxtah	r3, ip, r1
 8005408:	141a      	asrs	r2, r3, #16
 800540a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800540e:	b29b      	uxth	r3, r3
 8005410:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005414:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005418:	f845 3b04 	str.w	r3, [r5], #4
 800541c:	e7e8      	b.n	80053f0 <__mdiff+0x8a>
 800541e:	3e01      	subs	r6, #1
 8005420:	e7e8      	b.n	80053f4 <__mdiff+0x8e>

08005422 <__d2b>:
 8005422:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005426:	460e      	mov	r6, r1
 8005428:	2101      	movs	r1, #1
 800542a:	ec59 8b10 	vmov	r8, r9, d0
 800542e:	4615      	mov	r5, r2
 8005430:	f7ff fd75 	bl	8004f1e <_Balloc>
 8005434:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005438:	4607      	mov	r7, r0
 800543a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800543e:	bb34      	cbnz	r4, 800548e <__d2b+0x6c>
 8005440:	9301      	str	r3, [sp, #4]
 8005442:	f1b8 0f00 	cmp.w	r8, #0
 8005446:	d027      	beq.n	8005498 <__d2b+0x76>
 8005448:	a802      	add	r0, sp, #8
 800544a:	f840 8d08 	str.w	r8, [r0, #-8]!
 800544e:	f7ff fe0b 	bl	8005068 <__lo0bits>
 8005452:	9900      	ldr	r1, [sp, #0]
 8005454:	b1f0      	cbz	r0, 8005494 <__d2b+0x72>
 8005456:	9a01      	ldr	r2, [sp, #4]
 8005458:	f1c0 0320 	rsb	r3, r0, #32
 800545c:	fa02 f303 	lsl.w	r3, r2, r3
 8005460:	430b      	orrs	r3, r1
 8005462:	40c2      	lsrs	r2, r0
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	9201      	str	r2, [sp, #4]
 8005468:	9b01      	ldr	r3, [sp, #4]
 800546a:	61bb      	str	r3, [r7, #24]
 800546c:	2b00      	cmp	r3, #0
 800546e:	bf14      	ite	ne
 8005470:	2102      	movne	r1, #2
 8005472:	2101      	moveq	r1, #1
 8005474:	6139      	str	r1, [r7, #16]
 8005476:	b1c4      	cbz	r4, 80054aa <__d2b+0x88>
 8005478:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800547c:	4404      	add	r4, r0
 800547e:	6034      	str	r4, [r6, #0]
 8005480:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005484:	6028      	str	r0, [r5, #0]
 8005486:	4638      	mov	r0, r7
 8005488:	b003      	add	sp, #12
 800548a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800548e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005492:	e7d5      	b.n	8005440 <__d2b+0x1e>
 8005494:	6179      	str	r1, [r7, #20]
 8005496:	e7e7      	b.n	8005468 <__d2b+0x46>
 8005498:	a801      	add	r0, sp, #4
 800549a:	f7ff fde5 	bl	8005068 <__lo0bits>
 800549e:	9b01      	ldr	r3, [sp, #4]
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	2101      	movs	r1, #1
 80054a4:	6139      	str	r1, [r7, #16]
 80054a6:	3020      	adds	r0, #32
 80054a8:	e7e5      	b.n	8005476 <__d2b+0x54>
 80054aa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80054ae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80054b2:	6030      	str	r0, [r6, #0]
 80054b4:	6918      	ldr	r0, [r3, #16]
 80054b6:	f7ff fdb8 	bl	800502a <__hi0bits>
 80054ba:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80054be:	e7e1      	b.n	8005484 <__d2b+0x62>

080054c0 <_calloc_r>:
 80054c0:	b538      	push	{r3, r4, r5, lr}
 80054c2:	fb02 f401 	mul.w	r4, r2, r1
 80054c6:	4621      	mov	r1, r4
 80054c8:	f000 f856 	bl	8005578 <_malloc_r>
 80054cc:	4605      	mov	r5, r0
 80054ce:	b118      	cbz	r0, 80054d8 <_calloc_r+0x18>
 80054d0:	4622      	mov	r2, r4
 80054d2:	2100      	movs	r1, #0
 80054d4:	f7fe fa10 	bl	80038f8 <memset>
 80054d8:	4628      	mov	r0, r5
 80054da:	bd38      	pop	{r3, r4, r5, pc}

080054dc <_free_r>:
 80054dc:	b538      	push	{r3, r4, r5, lr}
 80054de:	4605      	mov	r5, r0
 80054e0:	2900      	cmp	r1, #0
 80054e2:	d045      	beq.n	8005570 <_free_r+0x94>
 80054e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054e8:	1f0c      	subs	r4, r1, #4
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	bfb8      	it	lt
 80054ee:	18e4      	addlt	r4, r4, r3
 80054f0:	f000 fa2c 	bl	800594c <__malloc_lock>
 80054f4:	4a1f      	ldr	r2, [pc, #124]	; (8005574 <_free_r+0x98>)
 80054f6:	6813      	ldr	r3, [r2, #0]
 80054f8:	4610      	mov	r0, r2
 80054fa:	b933      	cbnz	r3, 800550a <_free_r+0x2e>
 80054fc:	6063      	str	r3, [r4, #4]
 80054fe:	6014      	str	r4, [r2, #0]
 8005500:	4628      	mov	r0, r5
 8005502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005506:	f000 ba22 	b.w	800594e <__malloc_unlock>
 800550a:	42a3      	cmp	r3, r4
 800550c:	d90c      	bls.n	8005528 <_free_r+0x4c>
 800550e:	6821      	ldr	r1, [r4, #0]
 8005510:	1862      	adds	r2, r4, r1
 8005512:	4293      	cmp	r3, r2
 8005514:	bf04      	itt	eq
 8005516:	681a      	ldreq	r2, [r3, #0]
 8005518:	685b      	ldreq	r3, [r3, #4]
 800551a:	6063      	str	r3, [r4, #4]
 800551c:	bf04      	itt	eq
 800551e:	1852      	addeq	r2, r2, r1
 8005520:	6022      	streq	r2, [r4, #0]
 8005522:	6004      	str	r4, [r0, #0]
 8005524:	e7ec      	b.n	8005500 <_free_r+0x24>
 8005526:	4613      	mov	r3, r2
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	b10a      	cbz	r2, 8005530 <_free_r+0x54>
 800552c:	42a2      	cmp	r2, r4
 800552e:	d9fa      	bls.n	8005526 <_free_r+0x4a>
 8005530:	6819      	ldr	r1, [r3, #0]
 8005532:	1858      	adds	r0, r3, r1
 8005534:	42a0      	cmp	r0, r4
 8005536:	d10b      	bne.n	8005550 <_free_r+0x74>
 8005538:	6820      	ldr	r0, [r4, #0]
 800553a:	4401      	add	r1, r0
 800553c:	1858      	adds	r0, r3, r1
 800553e:	4282      	cmp	r2, r0
 8005540:	6019      	str	r1, [r3, #0]
 8005542:	d1dd      	bne.n	8005500 <_free_r+0x24>
 8005544:	6810      	ldr	r0, [r2, #0]
 8005546:	6852      	ldr	r2, [r2, #4]
 8005548:	605a      	str	r2, [r3, #4]
 800554a:	4401      	add	r1, r0
 800554c:	6019      	str	r1, [r3, #0]
 800554e:	e7d7      	b.n	8005500 <_free_r+0x24>
 8005550:	d902      	bls.n	8005558 <_free_r+0x7c>
 8005552:	230c      	movs	r3, #12
 8005554:	602b      	str	r3, [r5, #0]
 8005556:	e7d3      	b.n	8005500 <_free_r+0x24>
 8005558:	6820      	ldr	r0, [r4, #0]
 800555a:	1821      	adds	r1, r4, r0
 800555c:	428a      	cmp	r2, r1
 800555e:	bf04      	itt	eq
 8005560:	6811      	ldreq	r1, [r2, #0]
 8005562:	6852      	ldreq	r2, [r2, #4]
 8005564:	6062      	str	r2, [r4, #4]
 8005566:	bf04      	itt	eq
 8005568:	1809      	addeq	r1, r1, r0
 800556a:	6021      	streq	r1, [r4, #0]
 800556c:	605c      	str	r4, [r3, #4]
 800556e:	e7c7      	b.n	8005500 <_free_r+0x24>
 8005570:	bd38      	pop	{r3, r4, r5, pc}
 8005572:	bf00      	nop
 8005574:	20000828 	.word	0x20000828

08005578 <_malloc_r>:
 8005578:	b570      	push	{r4, r5, r6, lr}
 800557a:	1ccd      	adds	r5, r1, #3
 800557c:	f025 0503 	bic.w	r5, r5, #3
 8005580:	3508      	adds	r5, #8
 8005582:	2d0c      	cmp	r5, #12
 8005584:	bf38      	it	cc
 8005586:	250c      	movcc	r5, #12
 8005588:	2d00      	cmp	r5, #0
 800558a:	4606      	mov	r6, r0
 800558c:	db01      	blt.n	8005592 <_malloc_r+0x1a>
 800558e:	42a9      	cmp	r1, r5
 8005590:	d903      	bls.n	800559a <_malloc_r+0x22>
 8005592:	230c      	movs	r3, #12
 8005594:	6033      	str	r3, [r6, #0]
 8005596:	2000      	movs	r0, #0
 8005598:	bd70      	pop	{r4, r5, r6, pc}
 800559a:	f000 f9d7 	bl	800594c <__malloc_lock>
 800559e:	4a23      	ldr	r2, [pc, #140]	; (800562c <_malloc_r+0xb4>)
 80055a0:	6814      	ldr	r4, [r2, #0]
 80055a2:	4621      	mov	r1, r4
 80055a4:	b991      	cbnz	r1, 80055cc <_malloc_r+0x54>
 80055a6:	4c22      	ldr	r4, [pc, #136]	; (8005630 <_malloc_r+0xb8>)
 80055a8:	6823      	ldr	r3, [r4, #0]
 80055aa:	b91b      	cbnz	r3, 80055b4 <_malloc_r+0x3c>
 80055ac:	4630      	mov	r0, r6
 80055ae:	f000 f991 	bl	80058d4 <_sbrk_r>
 80055b2:	6020      	str	r0, [r4, #0]
 80055b4:	4629      	mov	r1, r5
 80055b6:	4630      	mov	r0, r6
 80055b8:	f000 f98c 	bl	80058d4 <_sbrk_r>
 80055bc:	1c43      	adds	r3, r0, #1
 80055be:	d126      	bne.n	800560e <_malloc_r+0x96>
 80055c0:	230c      	movs	r3, #12
 80055c2:	6033      	str	r3, [r6, #0]
 80055c4:	4630      	mov	r0, r6
 80055c6:	f000 f9c2 	bl	800594e <__malloc_unlock>
 80055ca:	e7e4      	b.n	8005596 <_malloc_r+0x1e>
 80055cc:	680b      	ldr	r3, [r1, #0]
 80055ce:	1b5b      	subs	r3, r3, r5
 80055d0:	d41a      	bmi.n	8005608 <_malloc_r+0x90>
 80055d2:	2b0b      	cmp	r3, #11
 80055d4:	d90f      	bls.n	80055f6 <_malloc_r+0x7e>
 80055d6:	600b      	str	r3, [r1, #0]
 80055d8:	50cd      	str	r5, [r1, r3]
 80055da:	18cc      	adds	r4, r1, r3
 80055dc:	4630      	mov	r0, r6
 80055de:	f000 f9b6 	bl	800594e <__malloc_unlock>
 80055e2:	f104 000b 	add.w	r0, r4, #11
 80055e6:	1d23      	adds	r3, r4, #4
 80055e8:	f020 0007 	bic.w	r0, r0, #7
 80055ec:	1ac3      	subs	r3, r0, r3
 80055ee:	d01b      	beq.n	8005628 <_malloc_r+0xb0>
 80055f0:	425a      	negs	r2, r3
 80055f2:	50e2      	str	r2, [r4, r3]
 80055f4:	bd70      	pop	{r4, r5, r6, pc}
 80055f6:	428c      	cmp	r4, r1
 80055f8:	bf0d      	iteet	eq
 80055fa:	6863      	ldreq	r3, [r4, #4]
 80055fc:	684b      	ldrne	r3, [r1, #4]
 80055fe:	6063      	strne	r3, [r4, #4]
 8005600:	6013      	streq	r3, [r2, #0]
 8005602:	bf18      	it	ne
 8005604:	460c      	movne	r4, r1
 8005606:	e7e9      	b.n	80055dc <_malloc_r+0x64>
 8005608:	460c      	mov	r4, r1
 800560a:	6849      	ldr	r1, [r1, #4]
 800560c:	e7ca      	b.n	80055a4 <_malloc_r+0x2c>
 800560e:	1cc4      	adds	r4, r0, #3
 8005610:	f024 0403 	bic.w	r4, r4, #3
 8005614:	42a0      	cmp	r0, r4
 8005616:	d005      	beq.n	8005624 <_malloc_r+0xac>
 8005618:	1a21      	subs	r1, r4, r0
 800561a:	4630      	mov	r0, r6
 800561c:	f000 f95a 	bl	80058d4 <_sbrk_r>
 8005620:	3001      	adds	r0, #1
 8005622:	d0cd      	beq.n	80055c0 <_malloc_r+0x48>
 8005624:	6025      	str	r5, [r4, #0]
 8005626:	e7d9      	b.n	80055dc <_malloc_r+0x64>
 8005628:	bd70      	pop	{r4, r5, r6, pc}
 800562a:	bf00      	nop
 800562c:	20000828 	.word	0x20000828
 8005630:	2000082c 	.word	0x2000082c

08005634 <__ssputs_r>:
 8005634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005638:	688e      	ldr	r6, [r1, #8]
 800563a:	429e      	cmp	r6, r3
 800563c:	4682      	mov	sl, r0
 800563e:	460c      	mov	r4, r1
 8005640:	4691      	mov	r9, r2
 8005642:	4698      	mov	r8, r3
 8005644:	d835      	bhi.n	80056b2 <__ssputs_r+0x7e>
 8005646:	898a      	ldrh	r2, [r1, #12]
 8005648:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800564c:	d031      	beq.n	80056b2 <__ssputs_r+0x7e>
 800564e:	6825      	ldr	r5, [r4, #0]
 8005650:	6909      	ldr	r1, [r1, #16]
 8005652:	1a6f      	subs	r7, r5, r1
 8005654:	6965      	ldr	r5, [r4, #20]
 8005656:	2302      	movs	r3, #2
 8005658:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800565c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005660:	f108 0301 	add.w	r3, r8, #1
 8005664:	443b      	add	r3, r7
 8005666:	429d      	cmp	r5, r3
 8005668:	bf38      	it	cc
 800566a:	461d      	movcc	r5, r3
 800566c:	0553      	lsls	r3, r2, #21
 800566e:	d531      	bpl.n	80056d4 <__ssputs_r+0xa0>
 8005670:	4629      	mov	r1, r5
 8005672:	f7ff ff81 	bl	8005578 <_malloc_r>
 8005676:	4606      	mov	r6, r0
 8005678:	b950      	cbnz	r0, 8005690 <__ssputs_r+0x5c>
 800567a:	230c      	movs	r3, #12
 800567c:	f8ca 3000 	str.w	r3, [sl]
 8005680:	89a3      	ldrh	r3, [r4, #12]
 8005682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005686:	81a3      	strh	r3, [r4, #12]
 8005688:	f04f 30ff 	mov.w	r0, #4294967295
 800568c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005690:	463a      	mov	r2, r7
 8005692:	6921      	ldr	r1, [r4, #16]
 8005694:	f7ff fc38 	bl	8004f08 <memcpy>
 8005698:	89a3      	ldrh	r3, [r4, #12]
 800569a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800569e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a2:	81a3      	strh	r3, [r4, #12]
 80056a4:	6126      	str	r6, [r4, #16]
 80056a6:	6165      	str	r5, [r4, #20]
 80056a8:	443e      	add	r6, r7
 80056aa:	1bed      	subs	r5, r5, r7
 80056ac:	6026      	str	r6, [r4, #0]
 80056ae:	60a5      	str	r5, [r4, #8]
 80056b0:	4646      	mov	r6, r8
 80056b2:	4546      	cmp	r6, r8
 80056b4:	bf28      	it	cs
 80056b6:	4646      	movcs	r6, r8
 80056b8:	4632      	mov	r2, r6
 80056ba:	4649      	mov	r1, r9
 80056bc:	6820      	ldr	r0, [r4, #0]
 80056be:	f000 f92b 	bl	8005918 <memmove>
 80056c2:	68a3      	ldr	r3, [r4, #8]
 80056c4:	1b9b      	subs	r3, r3, r6
 80056c6:	60a3      	str	r3, [r4, #8]
 80056c8:	6823      	ldr	r3, [r4, #0]
 80056ca:	441e      	add	r6, r3
 80056cc:	6026      	str	r6, [r4, #0]
 80056ce:	2000      	movs	r0, #0
 80056d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056d4:	462a      	mov	r2, r5
 80056d6:	f000 f93b 	bl	8005950 <_realloc_r>
 80056da:	4606      	mov	r6, r0
 80056dc:	2800      	cmp	r0, #0
 80056de:	d1e1      	bne.n	80056a4 <__ssputs_r+0x70>
 80056e0:	6921      	ldr	r1, [r4, #16]
 80056e2:	4650      	mov	r0, sl
 80056e4:	f7ff fefa 	bl	80054dc <_free_r>
 80056e8:	e7c7      	b.n	800567a <__ssputs_r+0x46>
	...

080056ec <_svfiprintf_r>:
 80056ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f0:	b09d      	sub	sp, #116	; 0x74
 80056f2:	4680      	mov	r8, r0
 80056f4:	9303      	str	r3, [sp, #12]
 80056f6:	898b      	ldrh	r3, [r1, #12]
 80056f8:	061c      	lsls	r4, r3, #24
 80056fa:	460d      	mov	r5, r1
 80056fc:	4616      	mov	r6, r2
 80056fe:	d50f      	bpl.n	8005720 <_svfiprintf_r+0x34>
 8005700:	690b      	ldr	r3, [r1, #16]
 8005702:	b96b      	cbnz	r3, 8005720 <_svfiprintf_r+0x34>
 8005704:	2140      	movs	r1, #64	; 0x40
 8005706:	f7ff ff37 	bl	8005578 <_malloc_r>
 800570a:	6028      	str	r0, [r5, #0]
 800570c:	6128      	str	r0, [r5, #16]
 800570e:	b928      	cbnz	r0, 800571c <_svfiprintf_r+0x30>
 8005710:	230c      	movs	r3, #12
 8005712:	f8c8 3000 	str.w	r3, [r8]
 8005716:	f04f 30ff 	mov.w	r0, #4294967295
 800571a:	e0c5      	b.n	80058a8 <_svfiprintf_r+0x1bc>
 800571c:	2340      	movs	r3, #64	; 0x40
 800571e:	616b      	str	r3, [r5, #20]
 8005720:	2300      	movs	r3, #0
 8005722:	9309      	str	r3, [sp, #36]	; 0x24
 8005724:	2320      	movs	r3, #32
 8005726:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800572a:	2330      	movs	r3, #48	; 0x30
 800572c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005730:	f04f 0b01 	mov.w	fp, #1
 8005734:	4637      	mov	r7, r6
 8005736:	463c      	mov	r4, r7
 8005738:	f814 3b01 	ldrb.w	r3, [r4], #1
 800573c:	2b00      	cmp	r3, #0
 800573e:	d13c      	bne.n	80057ba <_svfiprintf_r+0xce>
 8005740:	ebb7 0a06 	subs.w	sl, r7, r6
 8005744:	d00b      	beq.n	800575e <_svfiprintf_r+0x72>
 8005746:	4653      	mov	r3, sl
 8005748:	4632      	mov	r2, r6
 800574a:	4629      	mov	r1, r5
 800574c:	4640      	mov	r0, r8
 800574e:	f7ff ff71 	bl	8005634 <__ssputs_r>
 8005752:	3001      	adds	r0, #1
 8005754:	f000 80a3 	beq.w	800589e <_svfiprintf_r+0x1b2>
 8005758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800575a:	4453      	add	r3, sl
 800575c:	9309      	str	r3, [sp, #36]	; 0x24
 800575e:	783b      	ldrb	r3, [r7, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 809c 	beq.w	800589e <_svfiprintf_r+0x1b2>
 8005766:	2300      	movs	r3, #0
 8005768:	f04f 32ff 	mov.w	r2, #4294967295
 800576c:	9304      	str	r3, [sp, #16]
 800576e:	9307      	str	r3, [sp, #28]
 8005770:	9205      	str	r2, [sp, #20]
 8005772:	9306      	str	r3, [sp, #24]
 8005774:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005778:	931a      	str	r3, [sp, #104]	; 0x68
 800577a:	2205      	movs	r2, #5
 800577c:	7821      	ldrb	r1, [r4, #0]
 800577e:	4850      	ldr	r0, [pc, #320]	; (80058c0 <_svfiprintf_r+0x1d4>)
 8005780:	f7fa fd2e 	bl	80001e0 <memchr>
 8005784:	1c67      	adds	r7, r4, #1
 8005786:	9b04      	ldr	r3, [sp, #16]
 8005788:	b9d8      	cbnz	r0, 80057c2 <_svfiprintf_r+0xd6>
 800578a:	06d9      	lsls	r1, r3, #27
 800578c:	bf44      	itt	mi
 800578e:	2220      	movmi	r2, #32
 8005790:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005794:	071a      	lsls	r2, r3, #28
 8005796:	bf44      	itt	mi
 8005798:	222b      	movmi	r2, #43	; 0x2b
 800579a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800579e:	7822      	ldrb	r2, [r4, #0]
 80057a0:	2a2a      	cmp	r2, #42	; 0x2a
 80057a2:	d016      	beq.n	80057d2 <_svfiprintf_r+0xe6>
 80057a4:	9a07      	ldr	r2, [sp, #28]
 80057a6:	2100      	movs	r1, #0
 80057a8:	200a      	movs	r0, #10
 80057aa:	4627      	mov	r7, r4
 80057ac:	3401      	adds	r4, #1
 80057ae:	783b      	ldrb	r3, [r7, #0]
 80057b0:	3b30      	subs	r3, #48	; 0x30
 80057b2:	2b09      	cmp	r3, #9
 80057b4:	d951      	bls.n	800585a <_svfiprintf_r+0x16e>
 80057b6:	b1c9      	cbz	r1, 80057ec <_svfiprintf_r+0x100>
 80057b8:	e011      	b.n	80057de <_svfiprintf_r+0xf2>
 80057ba:	2b25      	cmp	r3, #37	; 0x25
 80057bc:	d0c0      	beq.n	8005740 <_svfiprintf_r+0x54>
 80057be:	4627      	mov	r7, r4
 80057c0:	e7b9      	b.n	8005736 <_svfiprintf_r+0x4a>
 80057c2:	4a3f      	ldr	r2, [pc, #252]	; (80058c0 <_svfiprintf_r+0x1d4>)
 80057c4:	1a80      	subs	r0, r0, r2
 80057c6:	fa0b f000 	lsl.w	r0, fp, r0
 80057ca:	4318      	orrs	r0, r3
 80057cc:	9004      	str	r0, [sp, #16]
 80057ce:	463c      	mov	r4, r7
 80057d0:	e7d3      	b.n	800577a <_svfiprintf_r+0x8e>
 80057d2:	9a03      	ldr	r2, [sp, #12]
 80057d4:	1d11      	adds	r1, r2, #4
 80057d6:	6812      	ldr	r2, [r2, #0]
 80057d8:	9103      	str	r1, [sp, #12]
 80057da:	2a00      	cmp	r2, #0
 80057dc:	db01      	blt.n	80057e2 <_svfiprintf_r+0xf6>
 80057de:	9207      	str	r2, [sp, #28]
 80057e0:	e004      	b.n	80057ec <_svfiprintf_r+0x100>
 80057e2:	4252      	negs	r2, r2
 80057e4:	f043 0302 	orr.w	r3, r3, #2
 80057e8:	9207      	str	r2, [sp, #28]
 80057ea:	9304      	str	r3, [sp, #16]
 80057ec:	783b      	ldrb	r3, [r7, #0]
 80057ee:	2b2e      	cmp	r3, #46	; 0x2e
 80057f0:	d10e      	bne.n	8005810 <_svfiprintf_r+0x124>
 80057f2:	787b      	ldrb	r3, [r7, #1]
 80057f4:	2b2a      	cmp	r3, #42	; 0x2a
 80057f6:	f107 0101 	add.w	r1, r7, #1
 80057fa:	d132      	bne.n	8005862 <_svfiprintf_r+0x176>
 80057fc:	9b03      	ldr	r3, [sp, #12]
 80057fe:	1d1a      	adds	r2, r3, #4
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	9203      	str	r2, [sp, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	bfb8      	it	lt
 8005808:	f04f 33ff 	movlt.w	r3, #4294967295
 800580c:	3702      	adds	r7, #2
 800580e:	9305      	str	r3, [sp, #20]
 8005810:	4c2c      	ldr	r4, [pc, #176]	; (80058c4 <_svfiprintf_r+0x1d8>)
 8005812:	7839      	ldrb	r1, [r7, #0]
 8005814:	2203      	movs	r2, #3
 8005816:	4620      	mov	r0, r4
 8005818:	f7fa fce2 	bl	80001e0 <memchr>
 800581c:	b138      	cbz	r0, 800582e <_svfiprintf_r+0x142>
 800581e:	2340      	movs	r3, #64	; 0x40
 8005820:	1b00      	subs	r0, r0, r4
 8005822:	fa03 f000 	lsl.w	r0, r3, r0
 8005826:	9b04      	ldr	r3, [sp, #16]
 8005828:	4303      	orrs	r3, r0
 800582a:	9304      	str	r3, [sp, #16]
 800582c:	3701      	adds	r7, #1
 800582e:	7839      	ldrb	r1, [r7, #0]
 8005830:	4825      	ldr	r0, [pc, #148]	; (80058c8 <_svfiprintf_r+0x1dc>)
 8005832:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005836:	2206      	movs	r2, #6
 8005838:	1c7e      	adds	r6, r7, #1
 800583a:	f7fa fcd1 	bl	80001e0 <memchr>
 800583e:	2800      	cmp	r0, #0
 8005840:	d035      	beq.n	80058ae <_svfiprintf_r+0x1c2>
 8005842:	4b22      	ldr	r3, [pc, #136]	; (80058cc <_svfiprintf_r+0x1e0>)
 8005844:	b9fb      	cbnz	r3, 8005886 <_svfiprintf_r+0x19a>
 8005846:	9b03      	ldr	r3, [sp, #12]
 8005848:	3307      	adds	r3, #7
 800584a:	f023 0307 	bic.w	r3, r3, #7
 800584e:	3308      	adds	r3, #8
 8005850:	9303      	str	r3, [sp, #12]
 8005852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005854:	444b      	add	r3, r9
 8005856:	9309      	str	r3, [sp, #36]	; 0x24
 8005858:	e76c      	b.n	8005734 <_svfiprintf_r+0x48>
 800585a:	fb00 3202 	mla	r2, r0, r2, r3
 800585e:	2101      	movs	r1, #1
 8005860:	e7a3      	b.n	80057aa <_svfiprintf_r+0xbe>
 8005862:	2300      	movs	r3, #0
 8005864:	9305      	str	r3, [sp, #20]
 8005866:	4618      	mov	r0, r3
 8005868:	240a      	movs	r4, #10
 800586a:	460f      	mov	r7, r1
 800586c:	3101      	adds	r1, #1
 800586e:	783a      	ldrb	r2, [r7, #0]
 8005870:	3a30      	subs	r2, #48	; 0x30
 8005872:	2a09      	cmp	r2, #9
 8005874:	d903      	bls.n	800587e <_svfiprintf_r+0x192>
 8005876:	2b00      	cmp	r3, #0
 8005878:	d0ca      	beq.n	8005810 <_svfiprintf_r+0x124>
 800587a:	9005      	str	r0, [sp, #20]
 800587c:	e7c8      	b.n	8005810 <_svfiprintf_r+0x124>
 800587e:	fb04 2000 	mla	r0, r4, r0, r2
 8005882:	2301      	movs	r3, #1
 8005884:	e7f1      	b.n	800586a <_svfiprintf_r+0x17e>
 8005886:	ab03      	add	r3, sp, #12
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	462a      	mov	r2, r5
 800588c:	4b10      	ldr	r3, [pc, #64]	; (80058d0 <_svfiprintf_r+0x1e4>)
 800588e:	a904      	add	r1, sp, #16
 8005890:	4640      	mov	r0, r8
 8005892:	f7fe f8cf 	bl	8003a34 <_printf_float>
 8005896:	f1b0 3fff 	cmp.w	r0, #4294967295
 800589a:	4681      	mov	r9, r0
 800589c:	d1d9      	bne.n	8005852 <_svfiprintf_r+0x166>
 800589e:	89ab      	ldrh	r3, [r5, #12]
 80058a0:	065b      	lsls	r3, r3, #25
 80058a2:	f53f af38 	bmi.w	8005716 <_svfiprintf_r+0x2a>
 80058a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058a8:	b01d      	add	sp, #116	; 0x74
 80058aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ae:	ab03      	add	r3, sp, #12
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	462a      	mov	r2, r5
 80058b4:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <_svfiprintf_r+0x1e4>)
 80058b6:	a904      	add	r1, sp, #16
 80058b8:	4640      	mov	r0, r8
 80058ba:	f7fe fb71 	bl	8003fa0 <_printf_i>
 80058be:	e7ea      	b.n	8005896 <_svfiprintf_r+0x1aa>
 80058c0:	08006424 	.word	0x08006424
 80058c4:	0800642a 	.word	0x0800642a
 80058c8:	0800642e 	.word	0x0800642e
 80058cc:	08003a35 	.word	0x08003a35
 80058d0:	08005635 	.word	0x08005635

080058d4 <_sbrk_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	4c06      	ldr	r4, [pc, #24]	; (80058f0 <_sbrk_r+0x1c>)
 80058d8:	2300      	movs	r3, #0
 80058da:	4605      	mov	r5, r0
 80058dc:	4608      	mov	r0, r1
 80058de:	6023      	str	r3, [r4, #0]
 80058e0:	f7fd fe64 	bl	80035ac <_sbrk>
 80058e4:	1c43      	adds	r3, r0, #1
 80058e6:	d102      	bne.n	80058ee <_sbrk_r+0x1a>
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	b103      	cbz	r3, 80058ee <_sbrk_r+0x1a>
 80058ec:	602b      	str	r3, [r5, #0]
 80058ee:	bd38      	pop	{r3, r4, r5, pc}
 80058f0:	20000914 	.word	0x20000914

080058f4 <__ascii_mbtowc>:
 80058f4:	b082      	sub	sp, #8
 80058f6:	b901      	cbnz	r1, 80058fa <__ascii_mbtowc+0x6>
 80058f8:	a901      	add	r1, sp, #4
 80058fa:	b142      	cbz	r2, 800590e <__ascii_mbtowc+0x1a>
 80058fc:	b14b      	cbz	r3, 8005912 <__ascii_mbtowc+0x1e>
 80058fe:	7813      	ldrb	r3, [r2, #0]
 8005900:	600b      	str	r3, [r1, #0]
 8005902:	7812      	ldrb	r2, [r2, #0]
 8005904:	1c10      	adds	r0, r2, #0
 8005906:	bf18      	it	ne
 8005908:	2001      	movne	r0, #1
 800590a:	b002      	add	sp, #8
 800590c:	4770      	bx	lr
 800590e:	4610      	mov	r0, r2
 8005910:	e7fb      	b.n	800590a <__ascii_mbtowc+0x16>
 8005912:	f06f 0001 	mvn.w	r0, #1
 8005916:	e7f8      	b.n	800590a <__ascii_mbtowc+0x16>

08005918 <memmove>:
 8005918:	4288      	cmp	r0, r1
 800591a:	b510      	push	{r4, lr}
 800591c:	eb01 0302 	add.w	r3, r1, r2
 8005920:	d803      	bhi.n	800592a <memmove+0x12>
 8005922:	1e42      	subs	r2, r0, #1
 8005924:	4299      	cmp	r1, r3
 8005926:	d10c      	bne.n	8005942 <memmove+0x2a>
 8005928:	bd10      	pop	{r4, pc}
 800592a:	4298      	cmp	r0, r3
 800592c:	d2f9      	bcs.n	8005922 <memmove+0xa>
 800592e:	1881      	adds	r1, r0, r2
 8005930:	1ad2      	subs	r2, r2, r3
 8005932:	42d3      	cmn	r3, r2
 8005934:	d100      	bne.n	8005938 <memmove+0x20>
 8005936:	bd10      	pop	{r4, pc}
 8005938:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800593c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005940:	e7f7      	b.n	8005932 <memmove+0x1a>
 8005942:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005946:	f802 4f01 	strb.w	r4, [r2, #1]!
 800594a:	e7eb      	b.n	8005924 <memmove+0xc>

0800594c <__malloc_lock>:
 800594c:	4770      	bx	lr

0800594e <__malloc_unlock>:
 800594e:	4770      	bx	lr

08005950 <_realloc_r>:
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005952:	4607      	mov	r7, r0
 8005954:	4614      	mov	r4, r2
 8005956:	460e      	mov	r6, r1
 8005958:	b921      	cbnz	r1, 8005964 <_realloc_r+0x14>
 800595a:	4611      	mov	r1, r2
 800595c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005960:	f7ff be0a 	b.w	8005578 <_malloc_r>
 8005964:	b922      	cbnz	r2, 8005970 <_realloc_r+0x20>
 8005966:	f7ff fdb9 	bl	80054dc <_free_r>
 800596a:	4625      	mov	r5, r4
 800596c:	4628      	mov	r0, r5
 800596e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005970:	f000 f821 	bl	80059b6 <_malloc_usable_size_r>
 8005974:	4284      	cmp	r4, r0
 8005976:	d90f      	bls.n	8005998 <_realloc_r+0x48>
 8005978:	4621      	mov	r1, r4
 800597a:	4638      	mov	r0, r7
 800597c:	f7ff fdfc 	bl	8005578 <_malloc_r>
 8005980:	4605      	mov	r5, r0
 8005982:	2800      	cmp	r0, #0
 8005984:	d0f2      	beq.n	800596c <_realloc_r+0x1c>
 8005986:	4631      	mov	r1, r6
 8005988:	4622      	mov	r2, r4
 800598a:	f7ff fabd 	bl	8004f08 <memcpy>
 800598e:	4631      	mov	r1, r6
 8005990:	4638      	mov	r0, r7
 8005992:	f7ff fda3 	bl	80054dc <_free_r>
 8005996:	e7e9      	b.n	800596c <_realloc_r+0x1c>
 8005998:	4635      	mov	r5, r6
 800599a:	e7e7      	b.n	800596c <_realloc_r+0x1c>

0800599c <__ascii_wctomb>:
 800599c:	b149      	cbz	r1, 80059b2 <__ascii_wctomb+0x16>
 800599e:	2aff      	cmp	r2, #255	; 0xff
 80059a0:	bf85      	ittet	hi
 80059a2:	238a      	movhi	r3, #138	; 0x8a
 80059a4:	6003      	strhi	r3, [r0, #0]
 80059a6:	700a      	strbls	r2, [r1, #0]
 80059a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80059ac:	bf98      	it	ls
 80059ae:	2001      	movls	r0, #1
 80059b0:	4770      	bx	lr
 80059b2:	4608      	mov	r0, r1
 80059b4:	4770      	bx	lr

080059b6 <_malloc_usable_size_r>:
 80059b6:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80059ba:	2800      	cmp	r0, #0
 80059bc:	f1a0 0004 	sub.w	r0, r0, #4
 80059c0:	bfbc      	itt	lt
 80059c2:	580b      	ldrlt	r3, [r1, r0]
 80059c4:	18c0      	addlt	r0, r0, r3
 80059c6:	4770      	bx	lr

080059c8 <_init>:
 80059c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ca:	bf00      	nop
 80059cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ce:	bc08      	pop	{r3}
 80059d0:	469e      	mov	lr, r3
 80059d2:	4770      	bx	lr

080059d4 <_fini>:
 80059d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059d6:	bf00      	nop
 80059d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059da:	bc08      	pop	{r3}
 80059dc:	469e      	mov	lr, r3
 80059de:	4770      	bx	lr
